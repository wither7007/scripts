get_ipython().show_usage()
wi ipython
get_ipython().run_line_magic('history', '')
k='one time'
print(k)
print(k)+'x'
print(k+'x')
for x in "banana":
  print(x)
  
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('hist', '')
  print('img' x)
  print('img'+)
  print('img')
  print(x+ ' img')
print(3*3)
print('t \n')
print('\tt \n')
import date
import datetime
print(datetime.datetime)
print(datetime.datetime.now())
e
h
his
get_ipython().run_line_magic('edit', '2')
exi
313 Dale Street North.
m=input('jim')
print(m)
#/bin/python3.10
import fnmatch
import os

for file in os.listdir('.'):
    if fnmatch.fnmatch(file, '*.txt'):
        print(file)
file
get_ipython().system('ls')
note
with open('apts') as f:
    apts=f.readlines()
    
apts
print(apts)
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'start.py')
get_ipython().run_line_magic('run', 'Pystart')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('e', '2')
get_ipython().run_line_magic('e', '')
get_ipython().run_line_magic('l', '')
# %load 
get_ipython().run_line_magic('edit', 'start.py')
get_ipython().system('pwd')
get_ipython().system('fd')
get_ipython().system('nvim')
print('hello')
print('history!!')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '/tmp')
get_ipython().run_line_magic('h', '1')
get_ipython().run_line_magic('e', '1')
h 1
e 1
s
s='Go_Golang_Tutorial_10_Multiple_Return_Values_by_Net_Ninja_on_20210528_in_Go_Tutorial_Golang_for_Beginners.mkv'
t=_10'
t='10'
import re
if re.search(substring, string):
    print("Substring found")
else:
    print("Substring not found")
get_ipython().run_line_magic('e', '6')
if re.search(s, t):
t
re.search('abb','a')
x=re.search('abb','a')
print(x)
#Check if the string starts with "The" and ends with "Spain":
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)
if x:
  print("YES! We have a match!")
  print("No match")
x=re.search('a','aba')
if !x:
x='10'
x=re.search(x,x)
x='[0,9]'
x
x='.*_'
    print('found')
x='.*_*.'
    print("x found")
x.start
print(x.start())
get_ipython().run_line_magic('e', '32,33')
get_ipython().run_line_magic('ed', '32:33')
get_ipython().run_line_magic('ed', '30:33')
x='ial'
x=re.search(x,s)
s=s[0,15]
s=s[0:15]
s=s[0:25]
s.replace('Go_Golang_Tutorial_',s)
t=s.replace('Go_Golang_Tutorial_',s)
k.replace('one','tow')
s.replace('Go_Golang','')
r='Go_Golang_Tutorial_'
t=s.replace(s,r)
print(t)
'jim'.replace('i','x')
t=s.replace(r,s)
r
s.replace('r,'')
s.replace(r,'')
t='mv '+s.replace(r,'')
t='mv 's+' '+s.replace(r,'')
t='mv 's+'+ '+s.replace(r,'')
t='mv '+ s+'+ '+s.replace(r,'')
t=''
val = 'Geeks'
print(f"{val}for{val} is a portal for {val}.")
t=f"{val} for"
t=f"{val} for" {s}"
t=f"{val} for {s}"
f
t=""
t=f"mv {s}"
t=s.replace(r,'')
t=f"{s}" +s.replace(r,'')
t='mv' f"{s}" +s.replace(r,'')
t='mv ' f"{s}" +s.replace(r,'')
get_ipython().run_line_magic('e', '98')
t1='mv ' f"{s}" +s.replace(r,'')
f"{t}"
f"mv {t}"
f"mv {s} {t}"
get_ipython().run_line_magic('e', '100:109')
print(t1)
t1
t1=""
'jim'.replace('i','')
s.replace(r,'') + s
s.replace(r,'') + '   ' + s
print("{s.replace(r,'')}")
print(f"{s.replace(r,'')}")
print(f"{s} {s.replace(r,'')}")
print(f"{s} ======== {s.replace(r,'')}")
print(f"mv {s}  {s.replace(r,'')}")
ss='Go_Golang_Tutorial_11_Package_Scope_by_Net_Ninja_on_20210531_in_Go_Tutorial_Golang_for_Beginners.mkv'
ss
import re  
str = "Joe-Kim Ema Max Aby Liza"
print(re.sub("(\s)|(-)", ", ", str))
print(re.sub("Ema.*", "", str))
print(re.sub(".*Ema", "", str))
rr='_by_Net_Ninja'
print(re.sub("._by_Net_Ninja*", "", str))
print(re.sub("._by_Net_Ninja*", "", s))
print(re.sub("_by_Net_Ninja*", "", s))
print(re.sub(",*_by_Net_Ninja", "", s))
print(re.sub(",*_by_Net_Ninja.*", "", s))
target=re.sub(",*_by_Net_Ninja.*", "", s))
target=re.sub(",*_by_Net_Ninja.*", "", s)
target
vv=f"{s} {target}"
vv
vv=f"mv {s} {target}"
s='./Go_Golang_Tutorial_11_Package_Scope_by_Net_Ninja_on_20210531_in_Go_Tutorial_Golang_for_Beginners.mkv'
s.replace('./Go_Golang_Tutorial_','')
s=s.replace('./Go_Golang_Tutorial_','')
re.sub(",*_by_Net_Ninja.*", "", s))
re.sub(",*_by_Net_Ninja.*", "", s)
s=s.replace('./Go_Golang_Tutorial_','').re.sub(",*_by_Net_Ninja.*", "", s)
s='./Go_Golang_Tutorial_11_Package_Scope_by_Net_Ninja_on_20210531_in_Go_Tutorial_Golang_for_Beginners.mkv
./Go_Golang_Tutorial_12_Maps_by_Net_Ninja_on_20210601_in_Go_Tutorial_Golang_for_Beginners.mkv
./Go_Golang_Tutorial_13_Pass_By_Value_by_Net_Ninja_on_20210602_in_Go_Tutorial_Golang_for_Beginners.mkv
./Go_Golang_Tutorial_14_Pointers_by_Net_Ninja_on_20210602_in_Go_Tutorial_Golang_for_Beginners.mkv
./Go_Golang_Tutorial_15_Structs_Custom_Types_by_Net_Ninja_on_20210603_in_Go_Tutorial_Golang_for_Beginners.mkv
'
dir
files = []
for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        files.append(os.path.join(dirname, subdirname))
    # print path to all filenames.
    for filename in filenames:
        files.append(os.path.join(dirname, filename))
        
files
get_ipython().run_line_magic('cd', '/mnt/c/projects/yt-dlp/test/')
files[1]
files[2]
for a in files:
    print(a)
    if 'mkv' in a:
        print(a)
    if 'mkv' in a or 'webm' in a:
n=[]
        n.append(n)
n
n[1]
for a in n:
[x for x in files]
[x for x in files if 'mkv' in files]
[x for x in files if 'mkv' in x]
[x for x in files if 'mkv' in x of 'webm' in x]
[x for x in files if 'mkv' in x or 'webm' in x]
l=[x for x in files if 'mkv' in x or 'webm' in x]
l
files=[x for x in files if 'mkv' in x of 'webm' in x]
files=[x for x in files if 'mkv' in x or 'webm' in x]
[f"mv {x}" for x in files]
s=files[1]
[f"mv {x.replace(r,x)}" for x in files]
[f"mv {x.replace(r,x)}" for x in files][1]
[f"{x.replace(r,x)}" for x in files]
[f"{x}" for x in files]
[f"{x.replace(r,'')}" for x in files]
[f"mv {x} {x.replace(r,'')}" for x in files]
first=[f"mv {x} {x.replace(r,'')}" for x in files]
first
first[1]
get_ipython().run_line_magic('cp', '')
copy
with open("out.txt", "w") as o:
    for line in first:
        print("{} {}".format(line[0], line[1]), file=o)
[a for a in first]
first[1:5]
sec=first[1:5]
sec
f = open(OUT_FILE, 'a')
f = open('OUT_FILE', 'a')
f.write('jim')
f.close()
for a in first:
    f.write(a)
get_ipython().run_line_magic('r', '')
UT_FILE= 'results.txt'
f = open(OUT_FILE, 'w')
f.write(f"{first[1]}\n")
OUT_FILE= 'results.txt'
cd /mnt/c/projects/yt-dlp/test/
    f.write(f"$a\n")
get_ipython().run_line_magic('cd', "'/mnt/c/projects/yt-dlp/test/'")
    f.write(f"{a}\n")
cd '/mnt/c/projects/yt-dlp/test/'
re.sub(",*_by_Net_Ninja.*", "", first[1]))
re.sub(",*_by_Net_Ninja.*", "", first[1])
for x in files:
    print(re.sub(",*_by_Net_Ninja.*", "", x))
    print(x,re.sub(",*_by_Net_Ninja.*", "", x))
    print(f"mv x",re.sub(",*_by_Net_Ninja.*", "", x))
    print(f"mv {x}",re.sub(",*_by_Net_Ninja.*", "", x))
    target =re.sub(",*_by_Net_Ninja.*", "", x)
    print(target)
    first=f"mv {x} {x.replace(r,'')}" 
    print(first)
    # print(first)
    target =re.sub(",*_by_Net_Ninja.*", "", first)
    one=re.sub(",*_by_Net_Ninja.*", "", first)
    print(one)
    one=re.sub(",*_by_Net_Ninja.*", "", x)
    # print(one)
    first=f"mv {x} {one.replace(r,'')}" 
    first=f"mv {x} {one.replace(r,'')}.webm" 
files=[x for x in files if 'mkv' in x ]
    # print(rget)
    first=f"mv {x} {one.replace(r,'')}.mkv" 
    print(first, file=f)
files=[x for x in files if 'webm' in x ]
OUT_FILE= 'results.webm'
import sys
dir(sys)
sys.version
print(sys.version_info)
datetime.datetime.now()
e=datetime.datetime.now()
print(e.strftime("%Y"))
r=input('enter r')
r=input('enter r: ')
from math import pi
math.pi
pi
pi**2
values = input("Input some comma-separated numbers: ")
list = values.split(",")
list
values
type(values)
type(list)
dir()
print(dir())
f = open('out', 'w')
print(dir(), file=f)
zdir
zdir()
zdir('z)
v /mnt/c/projects/p3/modules/start2.py
a = 3
b = 11
c = 42
for i in range(80,83): 
    a = a*i 
    b = b*i 
    c = c*i 
    ans = (ic(a)+ic(b)+ic(c))/3
    ic(int(ans))
import yt_dlp
with yt_dlp.YoutubeDL({"format": "bestaudio"}) as video:
    info_dict = video.extract_info(link, download = True)
    video_title = info_dict['title']
    print(video_title)
    video.download(link)    
    print("Successfully Downloaded - see local folder on Google Colab")
def download_audio(link):
  with yt_dlp.YoutubeDL({'extract_audio': True, 'format': 'bestaudio', 'outtmpl': '%(title)s.mp3'}) as video:
download_audio('https://www.youtube.com/watch?v=cJuO985zF8E')
download_audio('https://www.youtube.com/watch?v=KPeHHpXOOds&list=RDKPeHHpXOOds&start_radio=1&rv=KPeHHpXOOds')
print(os.environ)
dic={i: i*i for in range(10)}
dic={i: i*i for i in range(10)}
dic
import json
print(json.dumps(dic))
print(json.dumps(dic),indent=4)
print(json.dumps((dic),indent=4))
from fastapi import FastAPI
import requests
print(requests.get("http://127.0.0.1:8000").json())
from enum import Enum
from pydantic import BaseModel, Field
from fastapi import FastAPI, HTTPException, Path, Query
# You can give your API a title and add additional metadata such as a description, version number, etc.
# The description also supports markdown formatting.
app = FastAPI(
    title="Arjan's Handyman Emporium",
    description="Arjan does not only code but also helps you fix things. **See what's in stock!**",
    version="0.1.0",
)
# Docstrings of classes will be reflected in the API documentation in the 'Schemas' section
class Category(Enum):
    """Category of an item"""
    TOOLS = "tools"
    CONSUMABLES = "consumables"
# You can add metadata to attributes using the Field class.
# This information will also be shown in the auto-generated documentation.
app
class Item(BaseModel):
    """Representation of an item in the system."""
    name: str = Field(description="Name of the item.")
    price: float = Field(description="Price of the item in Euro.")
    count: int = Field(description="Amount of instances of this item in stock.")
    id: int = Field(description="Unique integer that specifies this item.")
    category: Category = Field(description="Category this item belongs to.")
items = {
    0: Item(name="Hammer", price=9.99, count=20, id=0, category=Category.TOOLS),
    1: Item(name="Pliers", price=5.99, count=20, id=1, category=Category.TOOLS),
    2: Item(name="Nails", price=1.99, count=100, id=2, category=Category.CONSUMABLES),
}
@app.get("/")
def index() -> dict[str, dict[int, Item]]:
    return {"items": items}
@app.get("/items/{item_id}")
def query_item_by_id(item_id: int) -> Item:
    if item_id not in items:
        HTTPException(status_code=404, detail=f"Item with {item_id=} does not exist.")
    return items[item_id]
Selection = dict[
    str, str | int | float | Category | None
]  # dictionary containing the user's query arguments
@app.get("/items/")
def query_item_by_parameters(
    name: str | None = None,
    price: float | None = None,
    count: int | None = None,
    category: Category | None = None,
) -> dict[str, Selection | list[Item]]:
    def check_item(item: Item):
        """Check if the item matches the query arguments from the outer scope."""
        return all(
            (
                name is None or item.name == name,
                price is None or item.price == price,
                count is None or item.count != count,
                category is None or item.category is category,
            )
        )
    selection = [item for item in items.values() if check_item(item)]
    return {
        "query": {"name": name, "price": price, "count": count, "category": category},
        "selection": selection,
    }
@app.post("/")
def add_item(item: Item) -> dict[str, Item]:
    if item.id in items:
        HTTPException(status_code=400, detail=f"Item with {item.id=} already exists.")
    items[item.id] = item
    return {"added": item}
# The 'responses' keyword allows you to specify which responses a user can expect from this endpoint.
@app.put(
    "/update/{item_id}",
    responses={
        404: {"description": "Item not found"},
        400: {"description": "No arguments specified"},
    },
# The Query and Path classes also allow us to add documentation to query and path parameters.
def update(
    item_id: int = Path(
        title="Item ID", description="Unique integer that specifies an item.", ge=0
    ),
    name: str
    | None = Query(
        title="Name",
        description="New name of the item.",
        default=None,
        min_length=1,
        max_length=8,
    price: float
        title="Price",
        description="New price of the item in Euro.",
        gt=0.0,
    count: int
        title="Count",
        description="New amount of instances of this item in stock.",
        ge=0,
):
    if all(info is None for info in (name, price, count)):
        raise HTTPException(
            status_code=400, detail="No parameters provided for update."
    item = items[item_id]
    if name is not None:
        item.name = name
    if price is not None:
        item.price = price
    if count is not None:
        item.count = count
    return {"updated": item}
@app.delete("/delete/{item_id}")
def delete_item(item_id: int) -> dict[str, Item]:
            status_code=404, detail=f"Item with {item_id=} does not exist."
    item = items.pop(item_id)
    return {"deleted": item}
print('look at me')
items
from pprint import pprint
# url = "https://jsonplaceholder.typicode.com/posts"
url ="http://localhost:8000/"
body= {
  "name": "SSSSSSSSSSSSSSSSSSSSSS",
  "price": 0,
  "count": 0,
  "id": 22,
  "category": "tools"
body
response = requests.post(url, data=body)
response
def is_json(myjson):
  try:
    json.loads(myjson)
  except ValueError as e:
    return False
  return True
is_json(body)
is_json("{}")
get_ipython().run_line_magic('cp', '--help')
d
d()
cps(body)
type(body)
json.dump(body)
# import json module
import json  
     
# define Python dictionary
employee_details ={  
  "id": "04",  
  "name": "sunil",  
  "department": "HR"
}  
# Convert Python to JSON  
json_object = json.dumps(employee_details, indent = 4) 
# Print JSON object
print(json_object)
json.dumps(body)
cps(json.dumps(body))
# body = {
#             "title" : "Make a POST call",
#             "body" : "Details of making post call ....",
#             "userId": 1
#        }
mybody=json.dumps(body)
mybody
url
response = requests.post(url, data=mybody)
import mysql.connector
mydb = mysql.connector.connect(
  host="localhost",
  user="mysql",
  password="secret"
  host="127.0.0.1:3306",
  user="root",
  password="pets"
from mysql.connector import connection
 
# Connecting to the server
conn = connection.MySQLConnection(user = 'mysql', 
                              host = 'localhost',
                              database = 'pets')
print(conn)
															password='secret',
mydatabase
  user="steff007",
  password="secret",
  database="junk"
  user="admin",
cursor=mydb.cursor
query = ("SELECT * from junk")
cursor.execute(query)
cursor
print(query)
query = ("SELECT * from junk;")
cursor=mydb.cursor()
query = ("SELECT * from prodcuts;")
query = ("SELECT * from products;")
print(cursor)
cursor.fetchall()
