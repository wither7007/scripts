print('is this fixed')
import re
pf(??re)
original_stdout = sys.stdout # Save a reference to the original standard output
#swtich to with statment
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
import sys
sys.stdout 
fil.close()
from export import rend
rend('hi')
[str(a) for a in range(100)]
rend([str(a) for a in range(100)])
rend([str(a) for a in range(1000)])
import wikipedia
def wss(x):
  return wikipedia.search(x)
  
wss('bacon')
  res=wikipedia.search(x)
  rend(res)
wss('bacon')[1]
ws('Six Degrees of Kevin Bacon')
bac=ws('Six Degrees of Kevin Bacon')
ws
bac
ws('kant')
ws('Kant')
ws('Immanuael Kant')
wss('kant')
kk=wss('kant')
kk
ws(kk[0])
ws(kk[4])
tx=ws(kk[4])
type(tx)
tx.split(' ')
cps(tx)
reg=r'((?:\w+\s+){3}(?:\w+))\s*'
re.split(reg,tx)
reg=r'((?:\w+\s+){13}(?:\w+))\s*'
rend(re.split(reg,tx))
rend(re.split(reg,tx)[:3])
reg=r'((?:\w+\s+){13}(?:\w+))'
re.split('\s',tx)
re.split('\s{3}',tx)
re.split('.{3}',tx)
re.split('.{1,4}',tx)
re.split('.{1,4}',tx)[:3]
tx
re.findall('.{1,4}',tx)[:3]
re.findall('.{1,14}',tx)
re.findall('.{1,44}',tx)
re.findall('.{1,144}',tx)
re.findall('.{1,124}',tx)
from rich import inspect
import rich

inspect(rich)
d()
inspect(sheet)
inspect(wikipedia)
print(d())
dd
mm=ws(kk[4])
mm
x = os.environ.keys()
x
type(x)
'/'.join(x)
[a for a in x]
x['HOME']
inspect(x)
['a']*15
['a']*25
_dh
inspect(Out)
hi()
re.search('<[^/>][^>]*>', '<table>')
re.search('^s','ssss')
re.search('^s','ssss')==True
re.search('^s','ssss')==None
re.search('^x','ssss')==None
re.search('x','ssxss')==None
re.search('x','ssxss')
re.findall('x','ssxss')
re.findall('x+','ssxss')
re.findall('x*','ssxss')
import urllib
x = urllib.urlopen('https://www.w3resource.org')
zdir(urllib)
x = urllib.request('https://www.w3resource.org')
def reg(s):
    pattern='[a-zA-Z0-9]'
    return re.search(pattern, s) !=None
    
reg('xx')
reg('  ')
reg('^^a')
re.search(r'[^a-zA-Z0-9]','ssxss')
re.search(r'[^a-zA-Z0-9]','ssxss')==None
re.search(r'[^a-zA-Z0-9]','ssxss ')==None
    pattern=re.compile(r'[^a-zA-Z0-9]')
reg('xxx')
reg('xxx ')
    return re.search(pattern, s)==None
reg('xxxb')
reg('xxxb%')
    pattern=re.compile(r'ab*')
    return re.search(pattern, s)!=None
reg('abxxx')
reg('abbbbxxx')
reg('nnnab')
    pattern=re.compile(r'a(b*)')
reg('nnn')
reg('nnna')
reg('nnnabbb')
reg('ac')
    pattern=re.compile(r'^a(b*)$')
reg('ab')
reg('abbbb')
reg('axxxbbbb')
    pattern=re.compile(r'ab{3}')
reg('abb')
reg('abbb')
reg('abbbc')
reg('abbbcasdf')
reg('fabbbcasdf')
    pattern=re.compile(r'ab{2,3}')
reg('fabbbbcasdf')
    pattern=re.compile(r'[a-z].*_.*[a-z]')
reg('abb_bb')
reg('abb_BB')
    pattern=re.compile(r'[a-z]')
    return re.sub(pattern,' xxx ', s)
reg('this IS SOMETHING new')
    pattern=re.compile(r'0')
    return re.sub(pattern,'', s)
reg('20334000x')
reg('0020334000x')
    pattern=re.compile(r'0*$')
reg('0020334000x0000')
reg('0020334000x000a')
    pattern=re.compile(r'\d$')
    # return re.sub(pattern,'', s)
    re.match(pattern,s) != None
reg('22')
    return re.match(pattern,s) != None
re.findall(r'\d$','ssxss')
re.findall(r'\d$','ssxssi4')
re.match(r'\d$','ssxssi4')
print( re.match(r'\d$','ssxssi4') )
print( re.match(r's','ssxssi4') )
print( re.match(r'\d$','44') )
print( re.match(r'4$','44') )
print( re.match(r'[0-9]$','44') )
print( re.match(r'.*[0-9]$','44') )
print( re.match(r'.*\d$','44') )
print( re.match(r'.*\D$','44') )
print( re.match(r'.*\S$','44') )
print( re.match(r'.*\S$','aaaa44') )
print( re.match(r'.*\d$','aaaa44') )
print( re.match(r'.*\d$','aaaa44a') )
    pattern=re.compile(r'\Bz\B')
reg('wat')
reg('wzt')
reg('a wzt a')
pattern
reg("The quick brown fox jumps over the lazy dog.")
reg("The quick brown fox jumps over the lay dog.")
reg("The")
patterns = '\Bz\B'
text="The quick brown fox jumps over the lazy dog.")
text="The quick brown fox jumps over the lazy dog."
re.match(patterns,text)
print( re.match(patterns,text) )
text
patterns
def text_match(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
print(text_match("The quick brown fox jumps over the lazy dog."))
print(text_match("Python Exercises."))
if re.search(patterns,  text):
  return 'Found a match!'
else:
  return('Not matched!')
  print('Found a match!')
  print('Not matched!')
re.search(patterns,text)
text="The quick brown fox jumps over the lay zdog."
text="The quick brown fozx jumps over the lay zdog."
re.match("c", "abcdef")
re.match("c", "cabcdef")
re.findall("c", "cabcdef")
re.searc("c", "cabcdef")
re.search("c", "cabcdef")
text = """Ross McFluff: 834.345.1254 155 Elm Street
Ronald Heathmore: 892.345.3428 436 Finley Avenue
Frank Burger: 925.541.7625 662 South Dogwood Way
Heather Albrecht: 548.326.4584 919 Park Place"""
n=re.split('\n+',text)
n
[re.split(":? ", entry, 3) for entry in n]
[re.split(":? ", entry) for entry in n]
re.split(" ", "thi is something")
text = 'Python Java C Ruby'
text.split(' ')
text.split(' ',0)
text.split(' ',1)
text.split(' ',8)
wss('dirac')
ws('Dirac equation')
wss('james maxwell')
ws("Maxwell's equations")
maxw=ws("Maxwell's equations")
maxw.split(' ')
maxw.split(' ',8)
enumerate(maxw.split(' ',8))
[(a,b) for a in enumerate(maxw.split(' ',8))]
[(a,b) for a,b in enumerate(maxw.split(' ',8))]
[list((a,b)) for a,b in enumerate(maxw.split(' ',8))]
rend([list((a,b)) for a,b in enumerate(maxw.split(' ',8))])
rend([list(''.join(map(str,a),b)) for a,b in enumerate(maxw.split(' ',8))])
[list(''.join(map(str,a),b)) for a,b in enumerate(maxw.split(' ',8))]
[list((map(str,a),b)) for a,b in enumerate(maxw.split(' ',8))]
[list(a,b)) for a,b in enumerate(maxw.split(' ',8))]
[list(a,b) for a,b in enumerate(maxw.split(' ',8))]
[a,b for a,b in enumerate(maxw.split(' ',8))]
[(list(a,b)) for a,b in enumerate(maxw.split(' ',8))]
[list((str(a),b)) for a,b in enumerate(maxw.split(' ',8))]
rend([list((str(a),b)) for a,b in enumerate(maxw.split(' ',8))])
rend([list((str(a),b)) for a,b in enumerate(maxw.split(' ',8))][:3])
[list((str(a),b)) for a,b in enumerate(maxw.split(' ',8))][:3]
inspect(rend)
ins(rend)
rend([str(a) for a in range(10)])
''.join([list((str(a),b)) for a,b in enumerate(maxw.split(' ',8))][:3])
re.findall(r"\bf", maxw)
re.findall(r"\bf[a-z]*", maxw)
re.findall(r"\bf[a-z]*", maxw).sort()
print(re.findall(r"\bf[a-z]*", maxw).sort())
sort(re.findall(r"\bf[a-z]*", maxw))
sorted(re.findall(r"\bf[a-z]*", maxw))
set(sorted(re.findall(r"\bf[a-z]*", maxw)))
set(sorted(re.findall(r"\be[a-z]*", maxw)))
setup = "mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']"
setup
import timeit
timeit.timeit('[x for x in mylist if x not in used and (used.add(x) or True)]', setup='used = set();'+setup)
[x for x in mylist if x not in used and (used.add(x) or True)]
mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
mylist
val = u'Ознакомьтесь с документацией'
val
try:
    with open('/tmp/input.txt', 'r') as f:
        ...
except OSError:
    # 'File not found' error message.
    print("Fichier non trouvé")
    with open('data.txt', 'r') as f:
f
f.close()
f.close
del f
re.split(r'\W+', 'Words, words, words.')
re.split(r'\W+', 'Words, words, words')
re.split(r'\W+', maxw)
maxw[:-10]
len(maxw)
maxw[:-1]
maxw[-1]
maxw[-10]
maxw[-10:]
re.split(r'\S+', maxw)
rend(re.split(r'\S+', maxw))
rend(re.split(r'\s+', maxw))
maxw
re.search("\n",maxw)
re.search(r"\",maxw)
re.search(r"\n",maxw)
re.search(r"\\",maxw)
re.findall(r"\\",maxw)
re.findall(r"\",maxw)
re.findall(r'\',maxw)
re.findall('\\',maxw)
input("Press Enter to continue... ")
import keyboard
words = ['red', 'read', 'ready', 're;d', 'road', 'redo', 'reed', 'rod']
[w for w in words if re.search(r'\bre.?d\b', w)]
[a for a in maxw]
print(re.escape('https://www.python.org'))
maxw.replace('a','      x   ')
maxw.replace('\\','')
maxw.replace('\','')
cps(maxw)
print(maxw)
re.split(r'\b{13}', maxw)
re.split(r'\b', maxw)
re.split(r'\s', maxw)
re.split(r'\s{3}', maxw)
valid = re.compile(r"^[a2-9tjqk]{5}$")
displaymatch(valid.match("akt5q"))  # Valid.
def displaymatch(match):
    if match is None:
        return None
    return '<Match: %r, groups=%r>' % (match.group(), match.groups())
displaymatch(valid.match("akt5n"))  # Valid.
with open('Bookmarks') as user_file:
  bm = user_file.read()
bm
print(bm)
import json
bmj=json.loads(bm)
type(bmj)
dictionary = {} # Curly braces method
another_dictionary = dict() # Dict method
# Are the above dictionaries equivalent?
print(type(dictionary))
print(type(another_dictionary))
print(dictionary == another_dictionary)
dt={}
dt['x']='this is x'
inspect(dt)
dt['y']='this is y'
inspect(bmj)
xy=inspect(bmj)
xy
len(bmj)
for a in bmj:
    print(a)
bmj['roots']
type(bmj['roots'])
ro=bmj['roots']
ro
[a for a in ro]
del xy
len(bm)
type(bm)
for key,value in bm.items():
    print(key,value)
for key,value in bmj.items():
    print(f'{ key },{ value }\n')
kk=open('filename.txt', 'w') as f
kk=open('filename.txt', 'w')
    print(f'{ key },{ value }\n', file=kk)
kk.close()
bmj.keys()
ro.keys()
ro['bookmark_bar']
print(ro['bookmark_bar'])
bmb=ro['bookmark_bar']
inspect(bmb)
inspect(inspect)
from rich import print as rprint
rprint(ro)
rprint(ro, file=kk)
mport os
import pathlib
from rich import print
from rich.filesize import decimal
from rich.markup import escape
from rich.text import Text
from rich.tree import Tree
def walk_directory(directory: pathlib.Path, tree: Tree) -> None:
    """Recursively build a Tree with directory contents."""
    # Sort dirs first then by filename
    paths = sorted(
        pathlib.Path(directory).iterdir(),
        key=lambda path: (path.is_file(), path.name.lower()),
    )
    for path in paths:
        # Remove hidden files
        if path.name.startswith("."):
            continue
        if path.is_dir():
            style = "dim" if path.name.startswith("__") else ""
            branch = tree.add(
                f"[bold magenta]:open_file_folder: [link file://{path}]{escape(path.name)}",
                style=style,
                guide_style=style,
            )
            walk_directory(path, branch)
            text_filename = Text(path.name, "green")
            text_filename.highlight_regex(r"\..*$", "bold red")
            text_filename.stylize(f"link file://{path}")
            file_size = path.stat().st_size
            text_filename.append(f" ({decimal(file_size)})", "blue")
            icon = "🐍 " if path.suffix == ".py" else "📄 "
            tree.add(Text(icon) + text_filename)
    directory = os.path.abspath(sys.argv[1])
except IndexError:
    print("[b]Usage:[/] python tree.py <DIRECTORY>")
    tree = Tree(
        f":open_file_folder: [link file://{directory}]{directory}",
        guide_style="bold bright_blue",
    walk_directory(pathlib.Path(directory), tree)
    print(tree)
import os
os.chdir('..')
os.chdir("/mnt/c/Users/jayst/AppData/Local/Google/Chrome/User Data/Default")
with open('Bookmarks', 'r') as json_file:
    json_object = json.load(json_file)
print(json_object)
print(json.dumps(json_object))
print(json.dumps(json_object, indent=1))
    jo = json.load(json_file)
pretty_response
import requests
from pprint import pprint
pprint(jo)
pprint(jo, file=kk)
from rich.tree import Inspect
from rich.tree import inspect
print(json.dumps(jo, indent=1))
print(json.dumps(jo, indent=1), file=kk)
jo.keys()
jo['roots']
jo['roots'][1]
jo['roots'].keys()
jo['roots']['bookmar_bar']
jor=jo['roots']
jor
jor.keys()
jor['bookmark_bar']
jor['bookmark_bar'].keys()
jos=jor['bookmark_bar']
jos
jos.keys()
jos['children']
jot=jos['children']
jot.keys()
len(jot)
[a for a in jot]
[type(a) for a in jot]
jot[1]
jot[1]['name']
[a['name'] for a in jot]
print([a['name'] for a in jot])
jot[4].keys()
[a['type'] for a in jot]
[a['type'] for a in jot if a['type']=folder]
[a['type'] for a in jot if a['type']==folder]
[a['type'] for a in jot if a['type']=='folder']
[a['name'] for a in jot if a['type']=='folder']
type(jot)
for a in jot:
    print(a.keys())
    print(a['type'))
    print(a['type'])
    print(a['type'], a.keys())
jo
[a for a in jo]
[type(a) for a in jo]
type(jo)
jo['roots']['bookmark_bar']
bm=jo['roots']['bookmark_bar']
[a for a in bm]
bm['name']
bm['children']
type(bm['children'])
type(bm['children'][1])
bm1=(bm['children'][1])
print(bm1)
inspect(bm1)
[a['url'] for a in bm]
[a for a in bm['children']]
[a['url'] for a in bm['children']]
bmc
bmc=bm['children']
[a['url'] for a in bmc]
bmc[1]
bmc[1]['url']
[a for a in bmc]
[a['url'] for a in bmc][1]
[a for a in bmc][1]
[a['name'] for a in bmc][1]
[a['type'] for a in bmc][1]
[a['id'] for a in bmc][1]
[a['guid'] for a in bmc][1]
url
b1=bmc[1]
b1
b1['type']
b1['url']
b1.keys()
[a for a in b1.keys()]
[x['url'] for x in bmc[1]]
[x['type'] for x in bmc[1]]
[type(x) for x in bmc[1]]
[x for x in bmc[1]]
[x for x in bmc]
[x['url'] for x in bmc]
[x['id'] for x in bmc]
[x for x in bmc][1]
[type(x) for x in bmc][1]
xx=[x for x in bmc][1]
xx['id']
xx['guid']
xx['url']
print(url)
jj=jo['roots']['bookmark_bar']
jj
type(jj)
[a for a in jj]
[a['children'] for a in jj]
[a for a in jj['children']]
[type(a) for a in jj['children']]
[(a,type(a)) for a in jj['children']]
[(a['type'],type(a)) for a in jj['children']]
[(a['url'],type(a)) for a in jj['children']]
jj['children'][0]
print(jj['children'], file=kk)
[a for a in jo.keys]
[a for a in jo.keys()]
jo['version']
jo['sync_metadata']
pp=jo['sync_metadata']
len(pp)
type(pp)
pp=jo['roots']
[a for a in pp]
pp=jo['roots']['bookmark_bar']
pp
print(pp)
my_dict = {'C1':[1,2,3],'C2':[5,6,7],'C3':[9,10,11]}
for row in zip(*([key] + (value) for key, value in sorted(my_dict.items()))):
    print(*row)
for row in zip(*([key] + (value) for key, value in sorted(pp.items()))):
pp[1]
pp.keys()
pp=jo['roots']['bookmark_bar']['children']
for a in pp:
    print([x for x in a.keys()])
    print([x['name'], x for x in a.keys()])
    print([(x['name'], x) for x in a.keys()])
[a for a in pp if pp['type']=='url']
pp[1]['url']
pp[3]['url']
pp[:3]
pp[:2]
    if a['type']:
        print(a['type'])
        
    if a['type']=='url':
        print(a['type'],a['url'])
[a for a in pp if a['type']=='url']
[a['url'] for a in pp if a['type']=='url']
[a['url'] for a in pp if a['type']=='folder']
[a.keys() for a in pp if a['type']=='folder']
[[s for s in a.keys()] for a in pp if a['type']=='folder']
[a['name'] for a in pp if a['type']=='folder']
[a for a in jo['root']]
[a for a in jo['roots']]
type(j0)
import pprint
pprint.pprint(jo)
pprint.pprint(jo, file=kk)
n_dict = {'1': '1', '2': '2', '3': [1, 2, 3, 4, 5],
          '4': {'1': '1', '2': '2', 
                '3': [1, 2, 3, 4, 5]}}
print(n_dict)
print(jo)
print(jo, file=kk)
len(jo)
jo[1]
joo=json.dumps(jo)
print(joo)
type(joo)
with open('joo.txt', 'w') as jsf:
    jsf.writelines(joo)
joo=json.dumps(jo, indent=4)
joo=json.dumps(jo, indent=2)
inspect(jo)
[a for a in jo['roots']['bookmark_bar']]
[a for a in jo['roots']['bookmark_bar']['children']]
[a for a in jo['roots']['bookmark_bar']['children'][3]]
[a for a in jo['roots']['bookmark_bar']['children'][3]['name']]
jo['roots']['bookmark_bar']['children'][3]
jo['roots']['bookmark_bar']['children'][2]
jo['roots']['bookmark_bar']['children'][1]
jo['roots']['bookmark_bar']['children'][4]
jo['roots']['bookmark_bar']['children'][4]['name']="python Norvig"
fileB="/mnt/c/Users/jayst/AppData/Local/Google/Chrome/User Data/Default/Bookmarks.bak"
jo['roots']['bookmark_bar']['children'][4]['name']="writing JSON!!"
with open(fileB, 'w') as jsf:
jo['roots']['bookmark_bar']['children'][4]['name']="again No synch JSON!!"
jo['roots']['bookmark_bar']['children']
fileA="/mnt/c/Users/jayst/AppData/Local/Google/Chrome/User Data/Default/Bookmarks"
with open(fileA, 'r') as json_file:
fileB="/mnt/c/Users/jayst/AppData/Local/Google/Chrome/User Data/Default/Bookmarks"
jo['roots']['bookmark_bar']['children'][4]['name']="on FLY No synch JSON!!"
with open(fileA, 'w') as jsf:
jo['roots']['bookmark_bar']['children'][:2]
[a['type] for a in jo['roots']['bookmark_bar']['children'][:2]]
[a for a in jo['roots']['bookmark_bar']['children'][:2]]
[a['type'] for a in jo['roots']['bookmark_bar']['children'][:2]]
[(a['type'],a['name']) for a in jo['roots']['bookmark_bar']['children'][:2]]
jos=jo['roots']['bookmark_bar']['children']
jos[1]
jos[2]
jos[3]
jos[4]
jos[4]['name']='Im the Man'
[a for a in jos]
type(jos)
[a['type'] for a in jos]
[(a['name'], a['type']) for a in jos]
[(a['type'], a['name']) for a in jos]
[list((a['type'], a['name'])) for a in jos]
[list((a['type'], a['name'])) for a in jos if a['type'==folder]]
[list((a['type'], a['name'])) for a in jos if a['type'=='folder']]
[list((a['type'], a['name'])) for a in jos if a['type']=='folder']]
[list((a['type'], a['name'])) for a in jos if a['type']=='folder']
[a for a in jos if a['type']=='folder']
fold=[a for a in jos if a['type']=='folder']
[a['name'] for a in fold]
[a for a in jos if a['type']=='folder' and a['name']='next']
[a for a in jos if a['type']=='folder' and a['name']=='next']
type(fold)
fold[1]
print(fold)
json.dumps(fold)
print(json.dumps(fold,indent=2))
print(json.dumps(fold,indent=8))
print(json.dumps(fold,indent=4))
print(json.dumps(fold,indent=4),file=kk)
fold[:3]
fileC="/mnt/c/Users/jayst/AppData/Local/Google/Chrome/User Data/Default/OldBookmarks"
[a for a in jo]['roots']
[a for a in jo][2]
[a for a in jo][1]
dp="/mnt/c/you/gut "
dp="/mnt/c/you/gut/"
out=input+"downcut.mp4"
out=dp+"downcut.mp4"
out
start=(4,35)
start[1]
start[0]
start[0]*60
start[0]*60+start[1]
[a for a in jos][1]
[a for a in jos][1]['date_added']
import datetime
print(
    datetime.datetime.fromtimestamp(
        int("1284105682")
    ).strftime('%Y-%m-%d %H:%M:%S')
)
def timel(x):
    return     datetime.datetime.fromtimestamp( int(x)).strftime('%Y-%m-%d %H:%M:%S')
timel([a for a in jos][1]['date_added'])
myt=[a for a in jos][1]['date_added']
myt
timel(myt)
    return     datetime.datetime.fromtimestamp(int(x)).strftime('%Y-%m-%d %H:%M:%S')
timel(915148798.75)
myt/1000
int(myt)/1000
int(myt)/100_000
timel(int(myt)/100_000)
timel(int(myt)/1_000_000)
cps(int(myt))
timel(int(myt)/1_000_000_000)
timel(int(myt)/1_000_000_00)
timel(int(myt)/1_000_000_0)
epoch_time = int(time.time())
import time
epoch_time
int(myt)/100_000_000
("")
Date date = new Date((129407978957060010-116444736000000000)/10000);
myt-116444736000000000/10000
(129407978957060010-116444736000000000)/10000);
(129407978957060010-116444736000000000)/10000
def timeln(x):
    l=(x/10_000_000)-11644473600
    return(l)
timeln(myt)
    l=(str(x)/10_000_000)-11644473600
    l=(int(x)/10_000_000)-11644473600
int(time.time())
int(myt)/10_000_000
one=int(myt)/10_000_000
one-11_644_473_600
one
    l=(int(x)/10_000_000)-11_644_473_600
    mm=((x - 116444736000000000) / 10000000)
    return mm
    x=int(x)
print(timeln(myt))
    print(mm)
len(myt)
win="116444736000000000"
len(win)
win[-1]
from datetime import datetime, timedelta, tzinfo
from calendar import timegm
    ep = 116444736000000000  # January 1, 1970 as MS file time
    mil = 10000000
    mm=((x - ep) / mil)
    ep=11_644_473_600
time.time()
import inspect from rich
sheetc('pods')
sheetc('pods')['values']
sheetc('pods')['values'][1]
sheetc('pods')['values'][1][1]
vv=sheetc('pods')['values']
vv
[a[1] for a in vv]
cps([a[1] for a in vv])
cps([a[1]+'\n' for a in vv])
'\n'.join([a[1] for a in vv])
cps('\n'.join([a[1] for a in vv]))
cps(vv[1][1])
def ct(x):
    nt=(x/1000000)-11644473600
    return nt
ct(1)
jos[1]['date_added']
ct(jos[1]['date_added'])
cps(time.time())
time.gmtime(1676677831.8070912)
round(time.time())
round(ct(jos[1]['date_added']))
rr=round(ct(jos[1]['date_added']))
time.gmtime(rr)
jos[3:]
jos[1:]
len(jos)
jos[5]
newt=13321151697634282
ct(13321151697634282)
time.gmtime(ct(13321151697634282))
time_string
time.localetime()
time.localtime()
time.strftime("%m/%d/%Y, %H:%M:%S", time.localetime())
time.strftime("%m/%d/%Y, %H:%M:%S", time.localtime())
jos[4][1]
jos[4][0]
type(jos[4])
print(jos[4])
jos[4]['children']
jos[4]['children'][3]
jos[4]['children'][3]['date_added']
newt=jos[4]['children'][3]['date_added']
ct(newt)
time.localtime(ct(newt))
ins(ct)
time.strftime("%m/%d/%Y, %H:%M:%S", time.localtime(ct(newt)))
from yt_dlp import main
ins(main)
    fnt=time.localtime(nt)
    rt=time.strftime("%m/%d/%Y, %H:%M:%S", time.localtime(fnt))
    return rt
newt
time.localtime(newt)
time.localtime(int(newt))
    fnt=int(fnt)
type(time.localtime(int(newt)))
    # fnt=time.localtime(nt)
    # fnt=int(fnt)
    rt=time.strftime("%m/%d/%Y, %H:%M:%S", time.localtime(nt))
jos[4]['type']
[a for a in jos][4]]
[a for a in jos[4]]
jos[4]['children']['date_added']
[a for a in jos[4]['children']]
[a['date_added'] for a in jos[4]['children']]
[ct(a['date_added')] for a in jos[4]['children']]
[ct(a['date_added']) for a in jos[4]['children']]
[list(a['name'], ct(a['date_added'])) for a in jos[4]['children']]
[list(a['name'] ct(a['date_added'])) for a in jos[4]['children']]
[['name'], ct(a['date_added']) for a in jos[4]['children']]
[(['name'], ct(a['date_added'])) for a in jos[4]['children']]
[(a['name'], ct(a['date_added'])) for a in jos[4]['children']]
[(a['name'], ct(a['date_added']),ct(a['date_last_used'])) for a in jos[4]['children']]
[a for a in jos if a['type']=='folder' ]
[a['name'] for a in jos if a['type']=='folder' ]
type([a['name'] for a in jos if a['type']=='folder' ])
del jos[4]
type([a['name'] for a in jo if a['type']=='folder' ])
print(jo['roots'])
song='unknown.mp4'
start=(3,52)
finish=(3,56)
# vlc .\unknown.mp4 --start-time 210 --stop-time 260
vstart=start[0]*60+start[1]
vfinish=finish[0]*60+start[1]
wcom=f'vlc {song} --start-time {vstart} --stop-time {vfinish}'
vcom
wcom
cps(wcom)
vfinish=finish[0]*60+finish[1]
wcom=f'vlc --no-video-title  {song} --start-time {vstart} --stop-time {vfinish}'
b'Some ASCII'
bytearray(b'Some ASCII')
aa=bytearray(b'Some ASCII')
aa
n = int(input('Type a number, and its factorial will be printed: '))
if n < 0:
    raise ValueError('You must enter a non-negative integer')
factorial = 1
for i in range(2, n + 1):
    factorial *= i
print(factorial)
x=[a for in range(5)]
x=[a for a in range(5)]
(n * 2 for n in x)
list((n * 2 for n in x))
kk='/mnt/c/you/gut'
os.chdir(kk)
from rich.columns import Columns
from rich.console import Console
from rich.panel import Panel
from export import subdirs
from export import cps
# 3,52 56
#vlc --no-video-title --rate .5  unknown.mp4 --start-time 232 --stop-time 236
with open(fileA, 'a') as f:
    f.write(wcom)
with open('fileA', 'a') as f:
    f.write(wcom+'\n')
dirI="/mnt/c/you/gut/"
dirO=("/mnt/c/you/gut/clips")
clip=dirI+song
clip
dirO=("/mnt/c/you/gut/clips/")
wcom2=f'{dirO+song}'
wcom2
windir
'/'.replace('/','\')
'/'.replace('/','\\')
print('/'.replace('/','\\'))
    f.write('/'.replace('/','\\'))
ff
ff.replace('/mnt/c/','c:\\")
ff.replace('/mnt/c/','c:\\')
print(ff.replace('/mnt/c/','c:\\'))
print(ff.replace('/mnt/c/','c:\\').replace('/','\\'))
def wdir(x):
    ff=x.replace('/mnt/c/','c:\\').replace('/','\\')
    return ff
ww(ff)
wdir(ff)
cps(wdir(ff))
    cps(ff)
wcom2=f'{wdir(dirO+song)}'
from moviepy.editor import *
from export import wdir
wdir(clip)
'vlc ' + wdir(clip)
out=cp+song
with open('vlcs', 'a') as f:
console = Console()
cp="/mnt/c/you/gut/"
wdir(out)
out=dirO+song
wcom=f'vlc --no-video-title  {dirO+song} --start-time {vstart} --stop-time {vfinish}'
wcom=f'vlc --no-video-title  {wdir(dirO+song)} --start-time {vstart} --stop-time {vfinish}'
wcom=f'vlc --no-video-title  {wdir(dirI+song)} --start-time {vstart} --stop-time {vfinish}'
    f.write(wcom+'\n'+wcom2+'\n')
start
start[0]+'_'+start[1]
str( start[0] )+'_'+str( start[1] )
sts=str( start[0] )+'_'+str( start[1] )
stf=str( finish[0] )+'_'+str( finish[1] )
out=dirO+song+sts+--+stf
out=dirO+song+sts+'--'+stf
song='unknown'
out=dirO+song+sts+'--'+stf+'.mp4'
out=dirO+song+sts+'-'+stf+'.mp4'
#!/usr/bin/python3.10
# Importing required module
# https://www.codespeedy.com/cut-or-trim-a-video-using-moviepy-in-python/
# /mnt/c/projects/script/simp.py
myf=[a for a in subdirs(cp)]
e=[' '.join(map(str, (a,b))) for a,b in enumerate(myf)][:30]
ur = [Panel(a , expand=True) for a in e]
console.print(Columns(ur))
res=[]
def subdirs(dp):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(dp):
        if entry.is_file():
            if 'mp' in entry.name:
                res.append(entry.name)
            yield entry.name
subdirs('.')
print([a for a in enumerate(res)])
video = VideoFileClip(clip)
video1 = video.subclip(start, finish)
video1.write_videofile(out,codec='libx264')
myf=[a for a in subdirs(dirI)]
song=song+".mp4"
clip=dirI+song+".mp4"
#/mnt/c/you/gut/knocking.mp4
song='knocking'
start=(6,02)
finish=(6,19)
start=(6,2)
out=dirO+song+'-'+sts+'-'+stf+'.mp4'
with open('/mnt/c/you/gut/vlcs', 'a') as f:
# print([a for a in enumerate(res)])
wcom2=f'{wdir(out)}'
wcom2=f'vlc {wdir(out)}'
from ctypes import *
so_file = "my_functions.so"
my_functions = CDLL(so_file)
so_file
CDLL(my_functions.so)
CDLL("my_functions.so")
so_file="/home/steff007/junk/my_functions.so"
print(type(my_functions))
print(my_functions.square(10))
import music_tag
fi="/mnt/c/projects/music/twit0915.mp3"
f = music_tag.load_file("fi") 
fi
f = music_tag.load_file(fi)
f['title'}
f['title']
[_ for _ in f]
[a for a in f]
type(f)
ti=f['title']
ti
ti.values
ti.keys
[a for a in ti.values]
ins(ti)
inspect(ti)
inspect(f)
with open('file', 'w') as sys.stdout:
    print('test')
with open('files', 'w') as sys.stdout:
sys.stdout = open("sample.txt", "w")
print("abc\n123")
sys.stdout.close()
x="this is file print"
print(x)
sys.stdout =original_stdout
fi="twit0915.mp3"
f = music_tag.load_file(fi) 
from mutagen.mp3 import MP3
import exif
inspect(exif)
zdir(exif)
inspect(music_tag)
f['channels']
f['artist']
f['Comment']
f.tags
ins(f)
dir(f)
f.info
f.tag_map
[a for a in f.tag_map]
f[[a for a in f.tag_map]]
f['lyrics']
items=[a for a in f.tag_map]
items
f[items[1]]
f.raw[items[1]]
f.raw[items[1].value]
f.raw['title']
f.raw['composer']
f.raw['comment']
f['title'] = '440Hz'
f['title'].first
f['title'] = 'my stuff'
f.save()
[f[a] for a in items]
[[a, f[a]] for a in items]
f['artwork']
art = f['artwork']
art
art.first
art.first.mime
inspect(art)
art.first.width
art.first.data
with open('/mnt/c/projects/music/12.jpg', 'rb') as img_in:
    f['artwork'] = img_in.read()
os.chdir('/mnt/c/twit')
[a for a in subdirs('.')]
[a for a in subdirs('.')][0]
subdirs('.')[0]
f = music_tag.load_file([a for a in subdirs('.')][0])
with open('m.jpg', 'rb') as img_in:
with open('mp.jpg', 'rb') as img_in:
f['title'].first.replace(' ','_')
[a for a in subdirs('.')][1]
os.rename([a for a in subdirs('.')[1]], f['title'].first.replace(' ','_'))
os.rename([a for a in subdirs('.')][1], f['title'].first.replace(' ','_'))
re.sub(r'\s','_', f'title' )
re.sub(r'\s','_', f['title'] )
re.sub(r'\s','_', f['title'].first )
mat=r'[^[a-z][A-Z][0-9]]'
re.sub(mat,'_',f['title'].first)
re.sub(mat,'xxx','jim is')
mat
mat=r'^[a-zA-Z0-9]'
mat=r'^\S'
re.sub(r'^\s','_', f['title'].first )
re.sub(r'^[a-z]','_', f['title'].first )
re.sub(r'[^a-z]','_', f['title'].first )
re.sub(r'[^a-zA-Z]','_', f['title'].first )
re.sub(r'[^a-zA-Z0-9]','_', f['title'].first )
kk=re.sub(r'[^a-zA-Z0-9]','_', f['title'].first )
re.sub(r'_{2},' xxxx ',kk)
re.sub(r'_{2}', xxxx ',kk)
re.sub(r'_{2}', ' xxxx ',kk)
re.sub(r'_{2,}', ' xxxx ',kk)
re.sub(r'_{2,}', '_',kk)
kk=re.sub(r'_{2,}', '_',kk)
[a for a in subdirs('.') if a.contains('mp3')]
'jim'.__contains__('i')
[a for a in subdirs('.') if a.__contains__('mp3')]
res=[a for a in subdirs('.') if a.__contains__('mp3')]
res
mm=re.sub(r'[^a-zA-Z0-9]','_', res)
mm[1]
res[0]
mm=re.sub(r'[^a-zA-Z0-9]','_', res[0])
res=[a.replace('.mp3','') for a in subdirs('.') if a.__contains__('mp3')]
re
kk=re.sub(r'_{2,}', '_',mm)
os.rename([a for a in subdirs('.')][1], kk+'.mp3')
f = music_tag.load_file(res[0])
res[1]
f = music_tag.load_file(res[1])
f['comment']
f['comment'].first
kk=re.sub(r'[^a-zA-Z0-9]','_', f['comment'].first )
com=re.sub(r'[^a-zA-Z0-9]','_', f['comment'].first )
com
kk=re.sub(r'_{2,}', '_',com)
os.rename(res[0],kk+'.mp3')
fp = music_tag.load_file(res[0])
from PIL import Image, ImageDraw
width = 512
height = 512
message = "Hello boss!"
img = Image.new('RGB', (width, height), color='blue')
imgDraw = ImageDraw.Draw(img)
imgDraw.text((10, 10), message, fill=(255, 255, 0))
img.save('result.png')
with open('result.png', 'rb') as img_in:
f = music_tag.load_file(res[0]) 
from PIL import Image, ImageDraw, ImageFont
width = 100
height = 100
message = "Foss 2/22/23"
font = ImageFont.truetype("arial.ttf", size=100)
imgDraw.text((10, 10), message, font=font, fill=(255, 255, 0))
font = ImageFont.truetype("/usr/share/fonts/truetype/freefont/FreeMono.ttf", size=100)
font = ImageFont.truetype("/usr/share/fonts/truetype/freefont/FreeMono.ttf", size=25)
font = ImageFont.truetype("arial.ttf", size=20)
textWidth, textHeight = imgDraw.textsize(message, font=font)
xText = (width - textWidth) / 2
yText = (height - textHeight) / 2
imgDraw.text((xText, yText), message, font=font, fill=(255, 255, 0))
width = 300
height = 300
message = "FOSS 2-22"
width = 150
height = 150
im.save('x.jpg')
import PIL from PIL
from PIL import PIL
import Imagefrom PIL.ExifTags 
import TAGSdef 
from PIL Imagefrom PIL.ExifTags
im=Image.open('m.jpg')
imamge.show()
image.show()
im.show()
jjjjjj
im
from PIL import Image, ImageDraw, ImageFont, ImageColor
img = Image.new(mode="RGBA", size=(400,300), color='darkorange')
img.show()
img = Image.open('s.jpg')
x, y = img.size
txt_layer = Image.new("RGBA", (y, x), (255, 255, 255, 0))
font = ImageFont.truetype('WorkSans-Regular.ttf', 62)
draw = ImageDraw.Draw(txt_layer)
draw.text((100, 50), "ESG Assets Under Management", font=font, fill=('orangered'))
draw.text((1220, 50), "tel: 212 563 90x8", font=font, fill=('white'))
flip_img = txt_layer.transpose(Image.ROTATE_270)
new_img = Image.alpha_composite(img, flip_img)
myfont="/usr/share/fonts/truetype/freefont/FreeMono.ttf"
font = ImageFont.truetype(myfont, size=25)
# font = ImageFont.truetype('WorkSans-Regular.ttf', 62)
img.save('x.jpg')
new = Image.new("RGBA", (2000,2000))
new.save('n.jpg')
imgDraw.text((xText, yText), message, font=font, fill=(255, 255, 255))
my=res[1]
my
len(f['comment'])
music_tag
jj=inspect(f)
inspect(inspect, methods=True)
inspect(f, methods=True)
inspect(inspect, dunder=True)
dir(inspect)
from rich.pretty import pprint
pprint(locals())
pprint(x)
ff=open('xx','w')
pprint(x, file=ff)
console.print([1, 2, 3])
console.print([1, 2, 3], file=ff)
console.input("What is [i]your[/i] [bold red]name[/]? :smiley: ")
console = Console(record=True)
save_text('nn')
console.save_text('zz')
console.print(help)
help(rich)
help(yText)
tree = Tree("Family Tree")
tree.add("Mom")
tree.add("Dad")
tree.add("Brother").add("Wife")
tree.add("[red]Sister").add("[green]Husband").add("[blue]Son")
rprint(tree)
with open('my_tree.txt', 'w') as f:
    rprint(tree, file=f)
inspect(rpint)
inspect(rprint)
gg=[a for a in range(10000)]
gg
myout
woo
hi(0)
pprint(myout)
fp = music_tag.load_file('m.jpg') 
f = music_tag.load_file(res[1]) 
os
os.rename(res[1], kk+'.mp3')
f = music_tag.load_file(res[2]) 
res[2]
os.rename(res[2], kk+'.mp3')
[(a,b) for a,b in enumerate(res)]
[list((a,b)) for a,b in enumerate(res)]
message = "ww feb-23"
message = "google feb-23"
message = "goo\n feb-23"
message = "goo\nfeb-23"
f['album'].first
message = "FLOSS\nfeb-23"
data = {f"{n}": n for n in range(11)}
data
print(data)
type(data)
lt
res=[a for a in subdirs('.') if a.__contains__('Ask')]
message = "Tech\nfeb-23"
os.rename(res[0], kk+'.mp3')
[(a, f[a]) for a in items]
items[0]
f[items[0]]
[a for a in items]
[a for a in items and a=='artwork']
[a for a in items if a=='artwork']
[del a for a in items if a=='artwork']
a for a in items:
for a in items:
    print(f[a])
items['artwork']
items.remove(artwork)
items.remove('artwork')
message
res=[a for a in subdirs('.') if a.__contains__('S23')]
ws('Beethoven')
kk=ws('Beethoven')
type(kk)
re.findall('He.*\s',kk)
re.findall('He.\s',kk)
text = "I was searching my source to make a big desk yesterday."
m = re.findall (r'\b[s]\w+', text)
print (m)
nn=re.findall(r'\b[H]\w+',kk)
nn
nn=re.findall(r'\bHeil\w+',kk)
cps(nn)
cps(nn[0])
locals
locals()
type(locals())
[a for a in locals()]
print([a for a in locals()])
print(locals())
str
with open('esc.txt','w') as o:
    o.writelines(woo)
from rich import rprint
def catch(func, handle=lambda e : e, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except Exception as e:
        return handle(e)
eggs = (1,3,0,3,2)
[catch(lambda : 1/egg) for egg in eggs]
[1, 0, ('integer division or modulo by zero'), 0, 0]
eggs
eggs = [1,3,4]
eggs = [1,3,4,'jim']
eggs = [1,3,4,'jim',3 ,22]
wo
files
from rich import rich
dir(rich)
-
-,
_oh
with redirect_output("my_output.txt"):
    ls
captured()
x()
help
capture x
_oh[3]
_oh[0]
type(_oh)
inspect(_oh)
[a for a in _oh]
print(_oh)
len(_oh)
_oh[9]
[a for a in _oh[9]]
inspect(_oh[9])
print(_oh[9])
_oh[9].keys()
dir(_oh[9])
_oh[9].keys
[a for a in _oh[9].keys]
[a for a in _oh[9].keys()]
Out=_oh
Out
out=_oh
[a for a in _oh[0].keys()]
_12
inspect(_i)
inspect(_ii)
loc=[a for a in locals()]
print(loc)
inspect(ws)
inspect(_oh[10])
_oh[17]
for a in _oh[17]:
       inspect(a)
       
import subprocess
def runcmd(cmd, verbose = False, *args, **kwargs):
    process = subprocess.Popen(
        cmd,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
        text = True,
        shell = True
    std_out, std_err = process.communicate()
    if verbose:
        print(std_out.strip(), std_err)
    pass
runcmd('echo "Hello, World!"', verbose = True)
runcmd(ww, verbose = True)
p = re.compile('^.+-.+-.+$')
l1 = ["AB.22-01-01", "AB.33-01-44", "--4", "AA.44--05", "--"]
l2 = [ s for s in l1 if p.match(s) ]
l2
class redirect_output(object):
    """context manager for reditrecting stdout/err to files"""
    def __init__(self, stdout='', stderr=''):
        self.stdout = stdout
        self.stderr = stderr
    def __enter__(self):
        self.sys_stdout = sys.stdout
        self.sys_stderr = sys.stderr
        if self.stdout:
            sys.stdout = open(self.stdout, 'w')
        if self.stderr:
            if self.stderr == self.stdout:
                sys.stderr = sys.stdout
            else:
                sys.stderr = open(self.stderr, 'w')
    def __exit__(self, exc_type, exc_value, traceback):
        sys.stdout = self.sys_stdout
        sys.stderr = self.sys_stderr
inspect(redirect_output)
    inspect(music_tag, all=True)
    help(help)
from IPython.display import display
from IPython.display import Image
Image(url='http://python.org/images/python-logo.gif')
i=Image(url='http://python.org/images/python-logo.gif')
Display(i)
display(i)
        print(f[a])
    except:
        print('can\'t')
        print(f'{a} - {f[a]}')
        print(f'{a} - can\'t')
        print(f'{a} - can\'t {e}')
with open('s.png', 'rb') as img_in:
with open('s.jpg', 'rb') as img_in:
myitems=[]
        myitems.append(f'{a} - {f[a]}')
        myitems.append(f'{a} - can\'t {e}')
myitems
soup
with open('soup.txt','w') as w:
    w.writelines(soup)
type(soup)
len(soup)
inspect(soup)
page_raw
dir(soup)
soup.text
    w.writelines(soup.text)
with open('fileRan', "w", encoding="utf-8") as tex:
    print(soup.prettify(), file=tex)
print(soup.title)
nb_links = len(soup.find_all('a'))
print(f"There are {nb_links} links in this page")
soup.a
soup('script')
[s.extract() for s in soup('script')]
soup('svg')
[s.extract() for s in soup('svg')]
[s.extract() for s in soup('style')]
print 2_3
2+3
print(_)
total=100_000_000
print(f'{total:,}')
print(f'{total:,$}')
print(f'{total:_}')
total=1000000000000000000
C
res=[a for a in subdirs('/mnt/c/you/intime') if a.__contains__('KBat')]
mpath="/mnt/c/you/intime"
res=[a for a in subdirs(mpath) if a.__contains__('KBat')]
mpath
mpath=mpath+'/'+res[0]
mfile=mpath+'/'+res[0]
f = music_tag.load_file(mfile) 
mfile
com=re.sub(r'[^a-zA-Z0-9]','_', f['tracktitle'].first )
os.rename(mfile, kk')
mpath="/mnt/c/you/intime/"
f = music_tag.load_file(mfile)
os.rename(mfile, mpath+kk+'.mp3')
res=[a for a in subdirs(mpath) if a.__contains__('Carmack')]
newFile=mpath+kk+'.mp3'
newFile
inspect(wdir)
windir(newFile)
wdir(newFile)
res=[a for a in subdirs(mpath) ]
res[3]
res[:3]
res[:3].sort()
sorted(res[:3])
import glob
files = glob.glob("*.mp3")
len(files)
files[:5]
files[5:]
files[-5:]
[a for a in enumerate(files[-5])]
[a for a in enumerate(files[-5]:)]
[a for a in enumerate(files[-5:])]
[a for a in files if a.__contains__'sumer')
[a for a in files if a.__contains__'sumer']
[a for a in files if a.__contains__('sumer')]
mfile=[a for a in files if a.__contains__('sumer')][0]
from pathlib import Path
Path('somefile.txt').touch()
Path('ricardo.mp3').touch()
files = glob.glob("*.mp3")[-5:]
files = glob.glob("*.mp3")[-2]
files = glob.glob("*.mp3")[-4]
files[2]
f = music_tag.load_file(files[2]) 
mfile=files[2]
Path(newFile).touch()
files[-2]
f = music_tag.load_file(files[-2]) 
os.rename(mfile, newFile)
os.rename(mfile, kk)
mfile=mpath+'/'+res[-2]
mfile=mpath+'/'+res[-4]
f = music_tag.load_file(files[-4]) 
mfile=mpath+'/'+res[-3]
f = music_tag.load_file(files[-3]) 
mfile=mpath+'/'+files[-3]
files[-5]
mfile=mpath+'/'+files[-5]
f = music_tag.load_file(files[-5]) 
files[-10]
files[-10:]
files[-10:1]
files[-10:-11]
len(files)-10
files[136:]
files[130:136]
for f in files[130:136]:
    mfile=mpath+'/'+f
    print(mfile)
for f in files[130:130]:
for f in files[130:131]:
    f = music_tag.load_file(f) 
    items=[a for a in f.tag_map]
    myitems=[]
    for a in items:
        try:
            myitems.append(f'{a} - {f[a]}')
        except Exception as e:
            myitems.append(f'{a} - can\'t {e}')
    com=re.sub(r'[^a-zA-Z0-9]','_', f['tracktitle'].first )
    kk=re.sub(r'_{2,}', '_',com)
    newFile=mpath+kk+'.mp3'
    os.rename(mfile, newFile)
    Path(newFile).touch()
def Primes(max):    number = 1    while number < max:        number += 1        if check_prime(number):            yield number
fils
[(a,b) for a,b in enumerate(files)]
[(a,b) for a,b in enumerate(files)][-20:]
files{126:136]
files[126:136]
files[126:137]
for f in files[126:137]:
f = music_tag.load_file(f)
files[125:133]
files[125:134]
for f in files[124:136]:
files[100:125]
files[100:124]
files[90:124]
for f in files[90:124]:
[(a,b) for a,b in enumerate(files)][:20]
[(a,b) for a,b in enumerate(files)][:40]
[(a,b) for a,b in enumerate(files)][:60]
[(a,b) for a,b in enumerate(files)][:80]
[(a,b) for a,b in enumerate(files)][:100]
[(a,b) for a,b in enumerate(files)][:89]
[(a,b) for a,b in enumerate(files)][:90]
[(a,b) for a,b in enumerate(files)][:91]
files[90:]
d
from functools import reduce
files[100:]
for f in files:
files = glob.glob(mpath+"*.mp3")
mpath="/mnt/c/you/time13 "
mpath="/mnt/c/you/time13/"
filex
from sympy import init_printing, Symbol, expand
init_printing()
a = Symbol("a")
b = Symbol("b")
e = (a + b) ** 3
e
e.expand()
from sympy import symbols, cos
import logging
logging.basicConfig(format='%(asctime)s %(levelname)s:%(name)s:%(message)s')
logging.warning('You are learning Python logging!')
logging.debug("A debug message")
logging.info("An info message")
logging.warning("A warning message")
logging.error("An error message")
logging.critical("A critical message")
logger.setLevel(logging.DEBUG)
logging.setLevel(logging.DEBUG)
date_strftime_format = “%Y-%m-%y %H:%M:%S”
logging.basicConfig(stream=sys.stdout, level=logging.INFO, format="%(asctime)s %(message)s", datefmt=date_strftime_format)
date_strftime_format = "%Y-%m-%y %H:%M:%S"
logger.warning('This is a warning message to stdout')
logger.warning('This is a warning message')
logger.warning('This will be displayed!')
logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
logging.error('And non-ASCII stuff, too, like Øresund and Malmö')
logging.basicConfig(filename='myapp.log', format='%(asctime)s %(message)s', level=logging.INFO)
dfile='myapp.log'
data = open(dfile, 'r', encoding='utf-8').read().splitlines()
logging.warning('mylog')
files[6]
files=files[6]
files=files[5:6]
filest=files[6:7]
filest
filest=files[6:8]
for fi in filest:
    mfile=fi
    f = music_tag.load_file(fi) 
            com=re.sub(r'[^a-zA-Z0-9]','_', f['tracktitle'].first )
            kk=re.sub(r'_{2,}', '_',com)
            newFile=mpath+kk+'.mp3'
            os.rename(mfile, newFile)
            Path(newFile).touch()
        except:
            print(f'fail: {fi}')
            print(f'fail: {fi} error {e}')
            myE=f'fail: {fi} error {e}'
            print(myE)
            logging.warning(myE)
files[6:8]
for fi in files[6:8]:
files[5:8]
files[6:9]
for fi in files[6:9]:
            
files = glob.glob(mpath+"215*.mp3")
files = glob.glob(mpath+"LNL215*.mp3")
files = glob.glob(mpath+"LNL215*")
files[1]
files[0]
[a for a in files[0]]
files[0:]
for fi in files[0:]:
files[-1]
filename = __file__
import pdb; pdb.set_trace()
print(f'path = {filename}')
from IPython import embed
embed()
w
from IPython.core.debugger import set_trace
def ii():
    x = 5
    set_trace()
    print(x)
ii()
logging.warning('hoh')
[a for a in files if a.startswith('TW')]
[a for a in files if 'TW' in a]
for fi in mfi:
            set_trace()
mfi=[a for a in files if 'TW' in a]
            pdb.set_trace()
mfi
mfi=[a for a in files if 'sn' in a]
    pdb.set_trace()
        com=re.sub(r'[^a-zA-Z0-9]','_', f['tracktitle'].first )
        kk=re.sub(r'_{2,}', '_',com)
        newFile=mpath+kk+'.mp3'
        os.rename(mfile, newFile)
        Path(newFile).touch()
        myE=f'fail: {fi} error {e}'
        print(myE)
        logging.warning(myE)
[a for a in files if len(a)<20]
[a for a in files if len(a)<30]
[a for a in files if len(a)<40]
[a for a in files if len(a)>40]
mfiles
mfi=[a for a in files if len(a)<40]
for fi in files:
fi="/mnt/c/you/mcoding/dataClass.mp4"
f['tracktitle']
f['tracktitle'].first
if f['tracktitle'].first:
    print('yes')
if not f['tracktitle'].first:
if f['tracktile'].first:
  com=re.sub(r'[^a-zA-Z0-9]','_', f['tracktitle'].first )
  com='not_title'
  kk=re.sub(r'_{2,}', '_',com)
  newFile=mpath+kk+'.mp3'
  os.rename(mfile, newFile)
    com='not_title'
        if f['tracktitle'].first:
            com='not_title'
from tinytag import TinyTag
ti.title
cps(files[0])
import pdb; 
print(files)
me=[(a,b) for a,b in enumerate(files)]
me
with open(fileRan, "w", encoding="utf-8") as tex:
    print(me, file=tex)
fileRan='all'
me=[(a,b)+'\n' for a,b in enumerate(files)]
#my_str = ', '.join(map(str, my_list))
me=[map(str,(a,b))+'\n' for a,b in enumerate(files)]
me=[map(str,(a,b)) for a,b in enumerate(files)]
me=[','.join(map(str,(a,b))) for a,b in enumerate(files)]
me=[' - '.join(map(str,(a,b)))+'\n' for a,b in enumerate(files)]
files[59:]
files[-59:]
files[:59]
files[:60]
for fi in files[:60]:
        f = music_tag.load_file(fi) 
        print(f'{fi} {e}')
        pass
file_list = glob.glob("/mnt/c/twit ")
for file in file_list:
    if (int(time.time()) - int(os.stat(file).st_mtime) < 300):
        print(file)
file
file_list
file_list = glob.glob("/mnt/c/twit/")
file_list = glob.glob("/mnt/c/twit/*")
    if (int(time.time()) - int(os.stat(file).st_mtime) < 33300):
myfile=[]
        myfile.append(file)
myfile
for a in myfile:
    if f['tracktitle'].first:
    else:
        com='not_title'
except Exception as e:
    myE=f'fail: {fi} error {e}'
    print(myE)
    logging.warning(myE)
for fi in myfile:
    for a in myfile:
files=glob.glob('*')
dir(ti)
t.title
si=os.state(files[0])
si=os.stats(files[0])
si=os.stat(files[0])
si
inspect(si)
from datetime import date
today = date.today()
print("Today's date:", today)
now = datetime.datetime.now()
now
si.st_ctime
si.st_ctime.strftime("%B %d, %Y")
create_time
nt=st.ctime
nt=si=.ctime
nt=si.ctime
nt=si_ctime
nt=si.st_ctime
datetime.datetime.fromtimestamp(nt)
datetime.datetime.fromtimestamp(nt).strftime("%d/%m/%Y %H:%M:%S")
datetime.datetime.fromtimestamp(nt).strftime("%m/%d/%Y %H:%M:%S")
date
mpath="/mnt/c/projects/train/"
files=glob.glob(mpath+'*')
for a in files:
    ti=TinyTag(a)
    print(f'{a}   {ti.title}')
com=re.sub(r'_{2,}','_', com)
files=glob.glob(mpath+'.mp*')
files=glob.glob(mpath+'mp*')
files=glob.glob(mpath+'*mp*')
os.path.splitext(files[0])
os.path.splitext(files[0])[1]
ext=os.path.splitext(files[0])[1]
ext
ext=os.path.splitext(fi)
ext=os.path.splitext(fi)[1]
rend([a for a in range(20)])
rend(d())
[a for a in range(10)]
type(d())
rend([a for a in range(10)])
rend([map(a,str) for a in range(10)])
rend([map(str,a) for a in range(10)])
rend([a for a in "jim"])
my_list = [1, 2, 3, 4, 5]
my_str = ', '.join(map(str, my_list))
rend(my_str)
[map(str,a) for a in range(10)]
[map(a,str) for a in range(10)]
[(map(a,str)) for a in range(10)]
my_str = ' '.join(map(str, my_list))
my_str
[str(a) for a in range(3)]
ago = now - datetime.timedelta(days=33)
path = '.'
myp=[]
for root, dirs, files in os.walk(path):
    for fname in files:
        path = os.path.join(root, fname)
        st = os.stat(path)
        mtime = datetime.datetime.fromtimestamp(st.st_mtime)
        if mtime > ago:
            fs=f'{path} modified {mtime}'
            print(f'{path} modified {mtime}')
            myp.append(fs)
myp
rend(myp)
ago = now - datetime.timedelta(days=3)
            # print(f'{path} modified {mtime}')
def cfilter(path):
    myp=[]
    for root, dirs, files in os.walk(path):
        for fname in files:
            path = os.path.join(root, fname)
            st = os.stat(path)
            mtime = datetime.datetime.fromtimestamp(st.st_mtime)
            if mtime > ago:
                fs=f'{path} modified {mtime}'
                # print(f'{path} modified {mtime}')
                myp.append(fs)
        return myp
cfilter('.')
cfilter('/mnt/c/all')
                fs=f'{path} {mtime}'
        rend(myp)
cfilter('/mnt/c/twit')
                fs=f'{path}'
mpy
file=cfilter('/mnt/c/twit')
files=cfilter('/mnt/c/twit')
import tinytag
mpath="/mnt/c/twit/"
files=[a for a in files if not a.contains('.mp')]
files=[a for a in files if not a.contains('.mp')]mpath="/mnt/c/twit/"
'jim'.contain
zdir("jim")
print(zdir("jim"))
files=[a for a in files if not a.find('.mp')]
files=[a for a in files if not a.find('mp')]
files=[a for a in files if not a.find('Linux')]
files=[a for a in files if not 'Linux' in a)]
files=[a for a in files if not 'Linux' in a]
xfiles=[a for a in files if not "Linux" in a]
xfiles
'jim'.find('a')
'jim'.find('i')
bool('jim'.find('i'))
bool('jim'.find('x'))
bool('jim'.find('I'))
bool('jim'.find('X'))
'jim'.find('I')
xfiles=[a for a in files if not ".mp" in a]
files=cfilter('/mnt/c/twit/')
path
files=[a for a in files if not ".mp" in a]
files=[a for a in files if  ".mp" in a]
from /mnt/c/projects/script/dateFilter.py import cfilter
my="/mnt/c/projects/script/dateFilter.py"
from my import cfilter
print(my)
sys.path.append("/mnt/c/projects/script/")
import my_module
import dateFilter
# import dateFilter 
from dateFilter import cfilter
ff=cfilter('.')
files=cfilter(mpath)
files=[a for a in files if ".mp" in a]
mtime
from export import cfilter
import importlib
importlib.reload(cfilter)
sys.modules
zdir(d())
[a for a in sys.modules]
print([a for a in sys.modules])
importlib.reload(pyperclip)
dir(cfilter)
zdir(cfilter)
zdir(export)
print(cfilter)
print(cfilter())
inspect(cfilter)
del cfilter
inspect(cfilter,all=True)
f=cfilter('.')
del export
requests
import reqests
print(requests)
from importlib import reload
cfilter=reload(cfilter)
print([a+'\n' for a in sys.modules])
print([a+'\n' for a in sys.modules], file=tex)
with open('sysM', "w", encoding="utf-8") as tex:
    print([a+'\n' for a in sys.modules],file=tex)
help(sys)
dir()
start=(6,4)
finish=(6,43)
wcom=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" -ArgumentList "--no-video-title {wdir(dirI+song)} --start-time {vstart} --stop-time {vfinish}'
wcom=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" -ArgumentList "--no-video-title {wdir(dirI+song)} --start-time {vstart} --stop-time {vfinish}"'
print(f'start-process "C:\Program Files (x86)\VideoLAN\VLC\vlc.exe"')
print(f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe"')
wcom=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList "--no-video-title {wdir(dirI+song)} --start-time {vstart} --stop-time {vfinish}"'
re.split(r'(\W+)', '...words, words...')
re.split(r'(\S+)', '...words, words...')
ws('pascal')
ws('Pascal')
ws('Bacon')
def ws(x):
    ret=wikipedia.summary(x)
    return ret
ws('Francis Bacon')
wss('Pascal')
ws('Blaise Bacon')
  print(x)
  return res
ws('Blaise Pascal')
re.sub(r'mp[34],'ps1')
re.sub(r'mp[34],'ps1',wcom2)
re.sub(r'mp[34]','ps1',wcom2)
psOut=re.sub(r'mp[34]','ps1',wcom2)
psOut
psOut=re.sub(r'mp[34]','ps1',wcom)
psOut=re.sub(r'mp[34]','ps1',out)
psOut=dirO+song+'-'+sts+'-'+stf+'.ps1'
wcom=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList "--no-video-title {wdir(dirI+song)} --start-time {vstart}
with open('/mnt/c/you/gut/script/'+psOut, 'a') as f:
with open(psOut, 'a') as f:
dirS=("/mnt/c/you/gut/script/")
psOut=dirI+song+'-'+sts+'-'+stf+'.ps1'
psOutC=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList "--no-video-title {wdir(dirI+song)} --start-time {vstart} --stop-time {vfinish}"'
psOutC
psOutf=dirS+song+'-'+sts+'-'+stf+'.ps1'
psOutf
with open(psOutf, 'a') as f:
    f.write(psOutC)
with open(psOutf, 'w') as f:
Textout=dirO+song+'-'+sts+'-'+stf+'.mp4'
Textout
dir*
dirI
dirI+song
clipOut=dirO+song+'-'+sts+'-'+stf+'.mp4'
# with open(psOut, 'a') as f:
#     f.write(wcom)
# clipOut=dirO+song+'-'+sts+'-'+stf+'.mp4'
wcom2=f'vlc --no-video-title  {wdir(out)}'
# psw=wcom2.replace
from datetime import datetime
now = datetime.now()
dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
dt_string
now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
song='sunshine'
start=(0,0)
finish=(0,5)
    f.write(now+ ' ' + song +'\n'+wcom+'\n'+wcom2+'\n\n')
from playwright.sync.api import sync_playwright
from pydub import AudioSegment
sound = AudioSegment.from_file('LNL218.mp3')
sound
first_cut_point = (1*60 + 18) * 1000
last_cut_point = (1*60 + 33) * 1000
sound_clip = sound[first_cut_point:last_cut_point]
sound_clip.export(os.path.join(base_dir, "hsr.mp3"), format="mp3")
sound_clip.export("hsr.mp3", format="mp3")
mfile="/mnt/c/twit/LNL218.mp3"
sound = AudioSegment.from_file(mfile)
sound_clip.export(mpath+"hsrnew.mp3", format="mp3")
def cfilter(path,day):
    print("mmmmm")
    now = datetime.datetime.now()
    ago = now - datetime.timedelta(days=day)
cfilter('.',5)
ins(cfilter)
cfilter('.',15)
# datetime object containing current date and time
files=cfilter(mpath,5)
aa="/mnt/c/you/fireship/Stack.mp4"
help(replace)
aa.replace('\/mnt/','c:\\')
aa.replace('\/mnt','c\:\\')
aa.replace('\/mnt','xx')
aa.replace('/mnt','xx')
aa.replace('/mnt/c','xx')
aa.replace('/mnt/c','c:\\')
aa.replace('/mnt/c','c:\')
aa.replace('/mnt/c','c:\\').replace('/','\\')
cps(aa.replace('/mnt/c','c:\\').replace('/','\\'))
print(aa.replace('/mnt/c','c:\\').replace('/','\\'))
print(aa.replace('/mnt/c/','c:\\').replace('/','\\'))
aa="/mnt/c"
bb=aa.replace('/mnt/c/','c:\\')
bb
aa="/mnt/c/"
aa='/mnt'
x = re.search("/mnt", aa)
if x: 
aa='/mn'
if x:
    bb=aa.replace('/mnt/c/','c:\\').replace('/', '\\')
    print(f"{bb}")
    print("not linux")
x = re.search("c:\\", aa)
x = re.search("c\:\\", aa)
x = re.search("c:\", aa)
x = re.search("c\\", aa)
x = re.search(r"c\\", aa)
x = re.search(r"c:\\", aa)
aa="c:\pp"
aa="c"
p = pathlib.Path(__file__)
print(p)
p = pathlib.Path("fileA")
aa='/mnt/c/all'
aa='/mnt//all'
x = re.search("/mnt/c/", aa)
    print('windows')
aa='c:\'
aa='c:\\'
aa=r'c:\'
aa=r'c:\\'
aa=r"c:\"
aa=r"c:\\"
aa=r"C:\you\chopin"
cps(aa)
def winL(x):
    x.replace(r"c:\\", '/mnt/c/')
winL(aa)
ss=winL(aa)
ss
    y=x.replace(r"c:\\", '/mnt/c/')
    return y
aa.replace(r"c:\\", '/mnt/c/')
aa.replace(r"c:\", '/mnt/c/')
aa.replace(r"c:\\\", '/mnt/c/')
aa.replace(r"c:\\\\", '/mnt/c/')
aa.replace(r"c:", '/mnt/c/')
aa.replace(r"c", '/mnt/c/')
aa.replace("c", '/mnt/c/')
aa.replace(r"C:\\", '/mnt/c/')
aa.replace(r"C:\\\", '/mnt/c/')
aa.replace(r"C:\\\\", '/mnt/c/')
aa.replace(r"C:", '/mnt/c/')
aa.replace(r"C:", '/mnt/c/').replace('\','/')
aa.replace(r"C:", '/mnt/c/').replace('\\','/')
print(aa.replace(r"C:", '/mnt/c/').replace('\\','/'))
print(aa.replace(r"C:", '/mnt/c').replace('\\','/'))
    print(x.replace(r"C:", '/mnt/c').replace('\\','/'))
    y=x.replace(r"C:", '/mnt/c').replace('\\','/')
    cps(y)
winL('C:\Users\jayst\OneDrive\Documents')
aa=r"C:\Users\jayst\OneDrive\Documents"
aa=sys.argv[1]
    winL(x)
len(sys.argv)
print(sys.argv)
sys.argv[1]
sys.argv[0]
if sys.argv[1]:
    aa=sys.argv[1]
    aa='/mnt/'
    print(f"{aa} is {bb}")
if len(sys.argv)>1:
def pConv(pat='/mnt/'):
    if len(sys.argv)>1:
        aa=sys.argv[1]
    x = re.search("/mnt/c/", pat)
    if x:
        bb=pat.replace('/mnt/c/','c:\\').replace('/', '\\')
        print(f"{pat} is {bb}")
        print("not linux")
    x = re.search(r"c:\\", pat)
        print('windows')
        winL(x)
pConv()
pConv("c:\path")
import pdb
    patx = re.search("/mnt/c/", pat)
    if patx:
        print("not linupatx")
    patx = re.search(r"c:\\", pat)
        winL(patx)
    # pdb.set_trace()
winL("c:\p")
    pats = re.search("/mnt/c/", pat)
    if pats:
        winL(pat)
winL("/mnt/c/p")
pConv("/mnt/c/p")
pConv("c:\proj")
    print(f"y is {y}")
pConv("mnt/c/n")
pConv("mnt/c/no")
pConv("/mnt/c/no")
# import pdb
pConv("c:\pro")
pConv("/mnt/c/twit")
    # y=x.replace(r"C:", '/mnt/c').replace('\\','/')
        print(pat)
    print(f"y from winl is {y}")
        winl(path)
        winL(path)
        # print("not linupatx")
        # print('windows')
    y=x.replace(r"[Cc]:", '/mnt/c').replace('\\','/')
"jimmMMMm".replace('m','xx')
"jimmMMMm".replace('m','xx', flags=re.I)
co = re.compile(re.escape('c'), re.IGNORECASE)
co.sub('cccjim', 'imm')
co.sub('cccCCjim', 'imm')
co.sub('c:\\', '/mnt/c')
co.sub('c:\\', '\/mnt')
co.sub('c:\\', 'x')
co.sub(r'c:\\', 'x')
co = re.compile(re.escape('c:'), re.IGNORECASE)
co.sub(r'c:\\', '/mnt')
co.sub(r'c:\\', '/mnt/c/')
co.sub(r'C:\\', '/mnt/c/')
    co = re.compile(re.escape('c:'), re.IGNORECASE)
    lin=co.sub(r'C:\\', '/mnt/c/')
    lin=lin.replace('\\','/')
lin=co.sub(r'C:\\', '/mnt/c/')
lin=lin.replace('\\','/')
lin
    print(f"lin from winl is {lin}")
winL("c:\proj")
    cps(lin)
    return lin
xx=r"c:\\"
xx
print(xx)
xx=r"c:\"
co
lin=co.sub(xx, '/mnt/c/')
xx=r"c:\\projects"
re.sub('nn','pp','nnnn')
re.sub(co,'pp','nnnn')
re.sub(co,'c:','nnnn')
re.sub(co,'c:\proj','/mnt/c/')
re.sub(co,r'c:\proj','/mnt/c/')
re.sub(co,'c:\proj','x')
re.sub(co,'c:\\proj','x')
re.sub(co,'c:\\\proj','x')
re.sub(co,xx,'x')
re.sub(co,xx,'/mnt')
re.escape('https://www.finxter.com/')
re.escape(xx)
re.escape("C:\projects")
z=re.escape("C:\projects")
print(z)
re.findall('\m', 'hello {world}')
re.findall('\n', 'hello {world}')
re.findall('\n', 'hello {world}\n')
re.sub('zz','zz','xxx')
re.sub('zz','ff','xxx')
re.sub('jim','ff','xxx')
re.sub('jim','','xxx')
re.sub('x','i','xxx')
re.sub('c:','i','c:\')
re.sub('c:','i',re.escape('c:\'))
re.sub('c:','i','c:\\')
re.sub('c:','/mnt/','c:\\')
re.sub('c:\\','/mnt/','c:\\')
re.sub('c:\\\','/mnt/','c:\\')
re.sub(r'c:\\','/mnt/','c:\\')
re.sub(r'c:\\','/mnt/','c:\\project')
re.sub(r'c:\\','/mnt/c/','c:\\project')
kk=r'c:\\'
re.sub(kk,'/mnt/c/','c:\\project')
re.escape(kk)
cps(z)
re.sub(xx,'/mnt/c/','c:\\project')
mm="c:\projects\one"
print(mm)
cps(mm)
nn=r"c:\projects\one"
re.escape(nn)
print(re.escape(nn))
print(re.escape(nn+"****/\/"))
print(re.escape(nn+"///"))
print(re.escape(nn+"///\\"))
print(re.escape(nn+"\*\*"))
vv=r"([A-Z]+) | ([a-z]+)"
re.escape(vv)
tt=re.escape(vv)
print(tt)
text = '''This
is
a
multiline
string'''
re.sub(text,'\n','')
re.sub('\n',text,'')
re.sub('\n','',text)
re.sub('\n',' ',text)
re.sub('c:',' ','c:\\')
re.sub('c:\',' ','c:\\')
re.sub('c:\\',' ','c:\\')
re.sub(r'c:\\',' ','c:\\')
re.sub(r'c:\\','/mnt/c/','c:\\')
re.sub(r'c:\\','/mnt/c/','c:\\projects')
    co=re.sub(r'c:\\','/mnt/c/',x)
    print(co)
    # co = re.compile(re.escape('c:'), re.IGNORECASE)
    lin=co.replace('\\','/')
    co=re.sub(r'c:\\','/mnt/c/',x, re.IGNORECASE)
winL("C:\proj")
zz
co=re.sub(r'c:\\','/mnt/c/',xx, re.IGNORECASE)
xx="C:\none"
co=re.sub('c:\\','/mnt/c/',xx, re.IGNORECASE)
co=re.sub('c:\\\','/mnt/c/',xx, re.IGNORECASE)
co=re.sub('c:\\\\','/mnt/c/',xx, re.IGNORECASE)
cor = re.compile('c:\\', re.IGNORECASE)
co=re.sub(cor,'/mnt/c/',xx, re.IGNORECASE)
cor = re.compile(r'c:\\', re.IGNORECASE)
re.sub(cor,xx)
cor
re.sub(cor,'/mnt/c/',xx)
re.sub('C'/mnt/c/',xx)
re.sub('C'/mnt/c/,xx)
re.sub('C',/mnt/c/,xx)
re.sub('C','/mnt/c/',xx)
re.sub('C:','/mnt/c/',xx)
inputString = "hello TuTorialsPOint python"
# input replace string to be replaced with
replaceString = "java"
# substring to be replaced
subString = "tutorialspoint"
re.sub(subString,replaceString,inputString)
re.sub('h',replaceString,inputString)
re.sub('aaa','b','aaa')
re.sub('aaa','b','ff')
re.sub('\w','b','ff')
re.sub('[a-z]','b','ff')
re.sub('[a-z]','b','ffF')
re.sub('[a-z]','\s','ffF')
re.sub('[a-z]','\\s','ffF')
re.sub('c:\','','c:\')
re.sub(r'c:\','','c:\')
re.sub(r'c:\\','','c:\')
re.sub(r'c:\\','','c:\\')
re.sub(r'c:\\','/mnt','c:\\')
re.sub(r'c:\\','/mnt','c:\\proj')
re.sub(r'c:\\','/mnt/','c:\\proj')
re.sub(r'c:\\','/mnt/c/','c:\\proj')
re.sub(r'c:\\','/mnt/c/',r'c:\proj')
temp = "1\2\3\4"
temp
print('path\to\the\thing')
xx='path\to\the\thing'
print(re.escape(xx))
xx=r'path\to\the\thing'
'This string will not include \
backslashes or newline characters.'
bb='This string will not include \
today = datetime(year=2017, month=1, day=27)
today
name = "Fred"
f"He said his name is {name!r}."
pp=f"He said his name is {name!r}."
z
f"{z}"
f"{z!r}"
z="c:\pro"
nn=f"{z}"
print(nn)
v
xx="c:\proj"
cor = re.compile('c:xx', re.IGNORECASE)
re.sub(r'c:\\','/mnt/c/',r'C:\proj')
re.sub(r'c:\\','/mnt/c/',r'C:\proj',re.IGNORECASE)
re.sub(r'abc','xxx',r'abc',re.IGNORECASE)
re.sub(r'Abc','xxx',r'abc',re.IGNORECASE)
re.sub('Abc','xxx',r'abc',re.IGNORECASE)
re.sub('Abc','xxx',r'abc',flags=re.IGNORECASE)
re.sub('Abc','xxx',r'aBc',flags=re.IGNORECASE)
re.sub(r'c:\\','/mnt/c/',r'C:\proj',flags=re.IGNORECASE)
co=re.sub('c:\\','/mnt/c/',xx, flags=re.IGNORECASE)
myx='c:\\'
cor = re.compile(re.escape(myx), re.IGNORECASE)
co=re.sub(cor,'/mnt/c/',xx, flags=re.IGNORECASE)
co=re.sub(cor,'/mnt/c/',xx)
xx="C:\proj"
xx="C:\projiEEE"
co=re.sub(cor,'/mnt/c/','c:\nothing')
co=re.sub(cor,'/mnt/c/','c:\\nothing')
winf.py "c:\nothing"
with open('/mnt/c/temp/youMPs.txt') as file:
    data = [i for i in file.read().strip().split("\n")]
len(data)
me=data[:2]
help(re.sub)
re.sub(r'/mnt/','',me[0])
re.sub(r'/mnt/c/you/','',me[0])
[re.sub(r'/mnt/c/you/','',a) for a in data]
datac=[re.sub(r'/mnt/c/you/','',a) for a in data]
len(datac)
sorted(datac)
sorted(datac)[:10]
sorted(datac,key=str.lower)
sorted(datac,key=str.lower)[:20]
sorted(datac,key=str.lower)[:-20]
sorted(datac,key=str.lower)[-10:]
sorted(datac,key=len)
sorted(datac,key=len)[-10:]
sorted(datac,key=len)[-20:]
sorted(data, key=len)[-20:]
datac=[re.sub('/mnt/c/', '', a) for a in data]
datac
datac=[re.sub('/mnt/c/you', '', a) for a in data]
datac=[re.sub('/mnt/c/you/', '', a) for a in data]
sorted(datac, key=len)[-20:]
def generate_random_strings(num):
    result = []
    for i in range(num):
        s = ''.join(random.choice([chr(i) for i in range(ord('a'),ord('z'))]) for _ in range(5))
        result.append(s)
    return result
ten = generate_random_strings(10)
import random
ten
ord('a')
[ord(a) for a in range(30)]
[chr(a) for a in range(30)]
[str(chr(a)) for a in range(30)]
chr(22)
print(chr(22))
print([str(chr(a)) for a in range(30)])
y = chr(65)
print(y)
y = chr(5)
print([str(chr(a)) for a in range(130)])
print([a,str(chr(a)) for a in range(130)])
print(([a,str(chr(a))) for a in range(130)])
print([(a,str(chr(a))) for a in range(130)])
print([(a,str(chr(a))) for a in range(330)])
print([(a,str(chr(a))) for a in range(3330)])
s = ''.join(random.choice([chr(i) for i in range(ord('a'),ord('z'))]) for _ in range(5))
s
s = ''.join(random.choice([chr(i) for i in range(ord('A'),ord('z'))]) for _ in range(5))
ord('A')
ord('z')
random.choice(10)
random.choice('jim')
random.choice(datac)
mm='''
Twinkle, twinkle, little star,
	How I wonder what you are! 
		Up above the world so high,   		
		Like a diamond in the sky. 
Twinkle, twinkle, little star, 
	How I wonder what you are
'''
[chr(a) for a in mm]
[(ord(a)) for a in mm]
[(a,(ord(a))) for a in mm]
myp=[a for a in range(10)]
myp=[map(str,a) for a in range(10)]
map(str,2)
map(str,[a for a in range(5)])
' '.join(map(str,[a for a in range(5)]))
rend(' '.join(map(str,[a for a in range(5)])))
zdir(sys)
sys.platform()
sys.platform
sys.version
sys.version_info
import math
zdir(math)
math.pi
2^2
2**2
22**2
x=input('enter radius')
print(x * math.pi**2)
float(3)
x=int(input('enter radius'))
x=float(input('enter radius'))
print(x**2 * math.pi)
x=float(input('enter radius: '))
print(2* x * math.pi)
1.1**2
1.1**2*mat.pi
1.1**2*math.pi
x=input('list ')
print(list(x))
x.split(',')
print(list(x.split(',')))
print(tuple(x.split(',')))
x=input('file: ')
print(file.split('.')[1])
print(x.split('.')[1])
c= ["Red","Green","White" ,"Black"]
print(c[0],c[-1])
print('%i',2)
print('%i',%2)
print('%i',%(,2))
print('%i'%(,2))
print('%i'%2)
print('%f'%2)
print('%s'%2)
print('%s'%(2,3))
print('%i-%i'%(2,3))
str(2)+str(2)
x=int(input('int: '))
n=str(x)
nn=str(x)+str(x)
nnn=str(x)+nn
print(int(n)+int(nnn))
3+33+333
print(int(nn)+int(nnn))
nnn
sum([1,3,4])
map(str,[2,3,4])
list(map(str,[2,3,4]))
list(map(int,[n,nn,nnn]))
sum(list(map(int,[n,nn,nnn])))
print(abs.__doc__)
print(print.__doc__)
print(math.__doc__)
print(input.__doc__)
print(re.__all__)
print(math.__all__)
print(zdir(math))
print(dir(math))
print(dir(re))
print(math.__builtins__)
print(re.__builtins__)
c
cls
print(dir())
print(date.__doc__)
print(date.__builtins__)
zdir(date)
date.day
date.day()
date.day(2)
date(2)
date(2,1,1)
date(2014,1,1)
a=date(2014,1,1)
b=date(2015,1,1)
a-b
a-b.days
(a-b).days
math.pi*(4/3)*(6**3)
x=int(input('number: '))
if x < 17:
    print(x-17)
    print(2*abs(x-17))
    print(17-x)
    print(2*abs(17-x))
14
abs(1000-900)
abs(1000-1100)
abs(1000-1102)
def x(x):
    x1=x+100
    x2=x-100
    if abs(1000-x)>100:
        print('within 100')
x(900)
x(9000)
print(random.__doc__)
rnd()
[rnd() for a in range(100)]
inspect(rnd)
help(Rich)
zdir(rich)
help('SPECIALMETHODS')
random.int
random.int()
zdir(random)
random.randint
random.randint()
random.randint(5,10)
help(random.randint)
[randcom.randint(1,5)*10 for a in range(10)]
[random.randint(1,5)*10 for a in range(10)]
[random.randint(1,5)*10 for a in range(10)] + [random.randint(1,5)*10 for a in range(10)]
len([random.randint(1,5)*10 for a in range(10)] + [random.randint(1,5)*10 for a in range(10)])
e155
kk=[random.randint(800,1200)*10 for a in range(10)] + [random.randint(1800,220)*10 for a in range(10)]
kk=[random.randint(800,1200)*10 for a in range(10)] + [random.randint(1800,2200)*10 for a in range(10)]
    if abs(1000-x)<=100:
        print(f'{x} within 100')
[x(a) for a in kk]
x(890)
x(995)
[list(a,x(a)] for a in kk]
[list((a,x(a))] for a in kk]
[(a,x(a)) for a in kk]
kk=[random.randint(800,1200)*10 for a in range(10)]
kk=[random.randint(80,120)*10 for a in range(10)]
        return True
        return False
[list((a,x(a))) for a in kk]
rend([list((a,x(a))) for a in kk])
rend([list((str(a),x(a))) for a in kk])
rend([list((str(a),x(a))) for a in kk][3])
rend([list((str(a),str(x(a)))) for a in kk])
[list((str(a),str(x(a)))) for a in kk]
rend('jim')
jj=[list((str(a),str(x(a)))) for a in kk]
rend(jj)
enumerate(kk)
[(a,b) for a,b in enumerate(kk)]
kk=[random.randint(80,120)*10 for a in range(10)] + [random.randint(180,220)*10 for a in range(10)]
    if abs(1000-x)<=100 or abs(2000-x <=100):
    if abs(1000-x)<=100 or abs(2000-x) <=100:
import calendar
help(calendar)
calendar(2023,3)
zdir(calendar)
calendar.monthly(2003,3)
calendar.month(2003,3)
print(calendar.month(2003,3))
print(calendar.month(2023,3))
ll=[1,3,4]
ll[0]==ll[1]
ll=[1,1,1]
ll[0]==ll[1] and ll[0]==ll[3]
ll[0]==ll[1] and ll[0]==ll[2]
ll=[1,1,2]
x=int(input('3 numbers: '))
x=input('3 numbers: ')
x.split('))
x.split()
x=x.split()
print(sum(x))
x=map(str,x)
x=map(int,x)
if x[0]==x[1] and x[0]==x[3]:
    print(sum(x)*3)
    print(sum(x))
x=list(map(int,x))
if x[0]==x[1] and x[0]==x[2]:
'jim'.startswith('j')
def iss(x):
    if x.startswith('is'):
        return x
        return 'is ' +x
iss("jim is x")
iss("is jim is x")
iss("is jim x")
def sss(x,n):
    for x in range(n):
        print(x)
sss('jim',3)
    for a in range(n):
v+='jim'
v=''
    v=''
        v+=x
    return v
sss('jim',33)
sss('jim is',33)
3%2
4%2
if x%2==0:
    print('even')
    print('odd')
def four(x):
    b=0
    for a in x:
        if a==4:
            b+=1
    return b
four([,3,3,4,8,4])
four([3,3,4,8,4])
'j' in 'jim'
'i' in 'jim'
'aeiou' in 'jim'
def vow(x):
    v='aeiou'
    for a in v:
        if a in x:
            return True
vow('this')
vow('ths')
            return False
vow('thes')
vow('thus')
vow('thu')
        print(a)
        pdb.set_trace()
    for let in v:
        print(let)
        if let in x:
        # pdb.set_trace()
        return let in x
vow('a')
    return False
vow('thsw2121')
1 in [5,6,7]
1 in [5,6,7,1]
''.join(['jim','s'])
c1 = set(["White", "Black", "Red"])
c2 = set(["Red", "Green"])
for a in c1:
    if a not in c2:
c1 - c2
jj=[random.randint(80,120)*10 for a in range(10)] + [random.randint(180,220)*10 for a in range(10)]
kk-jj
set(jj)-set(kk)
len(jj)
len(kk)
len(set(jj)-set(kk))
jj+kk
set(jj+kk)
set(jj-kk)
help(range)
for t in range(20)
[t for t in range(20)]
[t for t in range(20,-1)]
[t for t in range(20,0,-1)]
20%4
def gcd(a,b):
    for t in range(30,0,-1):
        if a % t==0 and b % t ==0:
            print(t) 
gcd(20,15)
    c=max(a,b)
    for t in range(c,0,-1):
            return t
gcd(35,15)
gcd(35,7)
gcd(42,7)
gcd(4200,700)
gcd(4200,710)
gcd(42,56)
gcd(336,360)
3/5
def ss(x,y,z):
    xx=list(x,y,z)
    return xx
ss(1,3,3)
list(1,3)
    xx=list[x,y,z]
    xx=list([x,y,z])
set(ss(1,3,3))
    if len(xx)==len(set(xx)):
        return sum(xx)
        return 0
ss(1,3,2)
type(2)
def ifi(x,y):
    if type(x)==int and type(y)==int:
        return x+y
        return 'not integers'
ifi('a,b')
ifi('a,b',2)
ifi(3,2)
j,m=2,3
j
m
j,m,n=2,3,"nothing"
j,m,n=2,3,"nothing",4
def fv(pv, rate, yr):
    return pv*(1+(rate/100))^yr
fv(100,3,3)
    return pv*(1+(rate/100))**yr
fv(1000,3.5,7)
sqrt(4)
math.sqrt(2)
abs(-2)
def cart(x,y,x1,y1):
    xx=abs(x-x1)**2
    yy=abs(y-y1)**2
    return math.sqrt(xx+yy)
print(zdir(os))
print(zdir(sys))
print(zdir(os.system))
os.system
os.system()
print(os.system)
print(os.system())
help(os)
os.name()
os.name
zdir(os.name)
os.environ
os.fspath('.')
os.fspath('/mnt')
os.fspath('c:]')
os.fspath('c:\')
import struct
print(struct.calcsize("P") * 8)
import platform
print(zdir(platform))
platform.version
platform.version()
kk=dir(platform)
platform['release']
platform.kk[1]
kk[1]
kk[6]
platform.intertools
platform.release
platform.release()
zdir(sysconfig)
sysconfig.realpath
sysconfig.realpath()
sysconfig.realpath('a')
zdir('jim')
'jim'.upper
'jim'.upper()
'jim'.upper()=='jim'
'jim'.lower()=='jim'
str_num = "1234567890"
print("Original string:",str_num)
if jjj:
    print(jjjj)
except:
    print('no')
n=20
type(n)
type(n())
print(type(n)())
n = 20
d = {"x":200}
l = [1,3,5]
t= (5,7,8)
print(type(d)())
print(type(l)())
print(type(t)())
type(d)
type(d)()
sys.float_info
sys.int_info
import collections
num = [2,2,4,6,6,8,6,10,4]
len(num)
n-10
n.bit_length
n.bit_length()
n="The lady doth protest too much, methinks"
n=999999999999999999999
var_list = ['a', 'b', 'c']
x, y, z = (var_list + [None] * 3)[:3]
print(x, y, z)
(var_list + [None] * 3)[:3]
var_list
'2222'.ljust(8, '0')
'2222'.rjust(8, '0')
import os.path
print(os.path.expanduser('~'))
print(os.path.expanduser(''))
print(os.path.expanduser('/home'))
from timeit import default_timer
start=default_timer()
print("Input the value of x & y")
x, y = map(int, input().split())
print("The value of x & y are: ",x,y)
import imp
print("Location of Python os module sources:")
print(imp.find_module('os'))
print("\nLocation of Python sys module sources:")
print(imp.find_module('datetime'))
imp.find_module('numpy')
ws('Roger Bacon')
kk=ws('Roger Bacon')
kk.split()
print(kk.split())
files=cfilter(mpath,8)
re.search('j','jim)
re.search('j','jim')
re.search('[A-Z]','jim')
re.search('[A-Z]','jiIm')
re.findall('[A-Z]','jiIm')
re.findall('[A-Z]',"This Week in Google")
''.join(re.findall('[A-Z]',"This Week in Google"))
it
ti["album"]
type(ti)
ti.album
import pudb
import bs4
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen
news_url="https://news.google.com/news/rss"
Client=urlopen(news_url)
xml_page=Client.read()
Client.close()
soup_page=soup(xml_page,"xml")
news_list=soup_page.findAll("item")
# Print news title, url and publish date
for news in news_list:
  print(news.title.text)
  print(news.link.text)
  print(news.pubDate.text)
  print("-"*60)
import pkg_resources
zdir(pkg_resources)
pkg_resources.working_set
[a for a in pkg_resources.working_set]
sorted([a for a in pkg_resources.working_set])
with open('x','w') as f:
    print(sorted([a for a in pkg_resources.working_set]),file=f)
    print(sorted([a+'\n' for a in pkg_resources.working_set]),file=f)
    print(sorted([str(a)+'\n' for a in pkg_resources.working_set]),file=f)
    print(sorted([str(a)+'\n' for a in pkg_resources.working_set]))
    print(sorted([map(str,a) for a in pkg_resources.working_set]))
''.join(map(str,[2,3,4]))
    print(sorted([''.join(map(str,a)) for a in pkg_resources.working_set]))
[a for a in pkg_resources.working_set][:2]
[type(a) for a in pkg_resources.working_set][:2]
[str(a) for a in pkg_resources.working_set][:2]
nn=[a for a in range(10)]
oo=[a for a in range(10)]
nn[oo]=2
zip(oo,nn)
list(zip(oo,nn))
pp.split()
list(zip(oo,pp.split()))
list(zip(str(oo),pp.split()))
list(map(str,oo))
oo=list(map(str,oo))
pp=pp.split()
zip(oo,pp)
list(zip(oo,pp))
list(a for a in zip(oo,pp))
list(list(a) for a in zip(oo,pp))
rend(list(list(a) for a in zip(oo,pp)))
rend(list(a) for a in zip(oo,pp))
rend(zip(oo,pp))
oo=[]
for a in nn:
    oo.append(n)
    oo.append(a)
oo
nn=[a for a in range(4)]
    oo.append((a,0))
    for b in nn:
        oo.append((a,b))
del(oo[1])
len(oo)
zip(range(len(oo),oo))
range(len(oo))
zip(range(len(oo)),oo))
gg=range(len(oo))
zip(gg,00)
zip(gg,oo)
list(zip(gg,oo))
del oo[0]
oo.pop(4)
oo.pop(12)
def ri():
    return random.int(1,10)
ri
ri()
    return random.randint(1,10)
[ri() for a in range(5)]
nn=[ri() for a in range(5)]
[a for a in range(nn)]
[a for a in range(len(nn))]
list(zip([a for a in range(len(nn))],nn))
print(list(zip([a for a in range(len(nn))],nn)))
ll=list(zip([a for a in range(len(nn))],nn))
ll
[map(str,a) for a in ll]
[''.joinmap(str,a)) for a in ll]
[''.join(map(str,a)) for a in ll]
['-'.join(map(str,a)) for a in ll]
rend(['-'.join(map(str,a)) for a in ll])
x=cfilter('/mnt/c/all',10)
rend(x)
list(zip([a for a in range(len(x))],x))
ll=list(zip([a for a in range(len(x))],x))
rend([' - '.join(map(str,a)) for a in ll])
wss('euler')
eu=wss('euler')
eu
list(zip([a for a in range(len(eu))],eu))
ee=list(zip([a for a in range(len(eu))],eu))
ee[2]
ee[2][1]
ws(ee[2][1])
ee
ws(ee[0][1])
ler=ws((ee[0][1]))
ler
re.sub(r'[a-z]','',ler])
re.sub(r'[a-z]','',ler)
re.sub(r'[A-Z]','',ler)
re.sub(r'[^A-Z]','',ler)
re.sub(r'[^A-Za-z]','',ler)
re.sub(r'[^A-Za-z]',' ',ler)
kk=re.sub(r'[^A-Za-z]',' ',ler)
re.sub(r'\S',' ',kk)
re.sub(r'\s',' ',kk)
re.sub(r'\s{2,}',' ',kk)
'jim'[2]
'The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away.'[3:8]
def chop(x):
    n=0
    r=[]
    r.append(x[n,n+4])
    n+=1
    retrun r
    return r
chop('The lady doth protest too much, methinks')
    r.append(x[n:n+4])
wss('coleman hawkins')
ws('coleman hawkins')
nn=ws('coleman hawkins')
re.split('\s',nn)
len(nn)
re.split('\s',nn)[:10]
' '.joint(re.split('\s',nn)[:10])
' '.join(re.split('\s',nn)[:10])
' '.join(re.split('\s',nn)[10:20])
    ch=re.split('\s', x)
    r.append(ch[n:n+4])
chop(nn)
ins(chop)
zdir(inspect)
import inspect
    for a in len(ch):
        r.append(ch[n:n+4])
        n+=1
    for a in range(len(ch)):
        if n>200:
            break
        n+=4
        r.append(' '.join(ch[n:n+4]))
        r.append(' '.join(ch[n:n+14]))
def chop(x,l=14):
        r.append(' '.join(ch[n:n+l]))
        n+=l
cc=chop(nn)
cc
' '.join(cc)
'\n'.join(cc)
print('\n'.join(cc))
x='cargill'
res=wikipedia.search(x)
x='cargillasdfasdfasdf'
ee=list(zip([a for a in range(len(res))],res))
print(ee)
    res=wikipedia.search(x)
    ee=list(zip([a for a in range(len(res))],res))
    print(ee)
    rend(res)
    return res
    # print(x)
    # rend(res)
    return ee
ff=wss('coleman hawkins')
['-'.join(map(str,a)) for a in ee]
rend(['-'.join(map(str,a)) for a in ee])
    ff=['-'.join(map(str,a)) for a in ee]
    rend(ff)
ws(ff[4][1])
    j=input('which: ')
    ws(ff[j][1])
    ws(ee[j][1])
    j=int(input('which: '))
    jk=int(input('which: '))
    ws(ee[jk][1])
    print(ret)
    retc=chop(reg)
    print(rect)
    kl=ws(ee[jk][1])
    retc=chop(ret)
    return retc
    print(retc)
    print('\n'.join(retc))
ff=wss('einstein')
    fl=len(x)
        if n>fl
             break
        if n>fl:
    fl=len(ch)
ws('haggard')
wss('haggard')
    # return retc
    # return ee
wss('dylan')
wss('mean theorom')
wss('theorom')
wss('heorom')
wss('Theorom')
wss('kepler')
wss('my way')
wss('fats waller')
wss('platic jesus')
wss('holiday')
wss('b holiday')
ws('billie holliday')
wss('billie holliday')
ws('Billie Holiday')
wss('merle haggard')
datetime
ws('holiday')
modules
print(dd)
[a for a in dd]
rend([a for a in dd])
inspect(wss)
def xx(*x):
xx(1,3,4)
xx(1,3,4,"tom")
xx([a for a in range(5)])
xx([a for a in range(5)], "thom")
def intro(**data):
    print("\nData type of argument:",type(data))
    for key, value in data.items():
        print("{} is {}".format(key,value))
intro(Firstname="Sita", Lastname="Sharma", Age=22, Phone=1234567890)
    print(data)
    print(f'data is {data})
    print(f'data is {data}')
nn=intro(Firstname="Sita", Lastname="Sharma", Age=22, Phone=1234567890)
type(nn)
aa=[a for a in range(10)]
aa.pop(3)
aa.pop(3:5)
del aa[0:3]
[a for a in range(100) not if a%2==0]
[a for a in range(100)  if not a%2==0]
[a for a in range(100)  if  a%20==0]
from rich import inspect as rinspect
rinspect(inspect)
rinspect(rinspect)
sqldb="/home/steff007/.ipython/profile_default/history.sqlite"
fileName = "/home/steff007/script/sql_hist"
import sqlite3
conn = sqlite3.connect(sqldb)
c = conn.cursor()
ipl
len(ipl)
rend())[a for a in dd]
ins(pd)
pd
pd(0)
pd()
ins(prag)
wss('teddy wilson')
print([a for a in dd])
dd()
ins(rinspect)
help(rinspect)
ins(t)
import io
print(out)
len(out)
eval(len(out))
eval('len(out)')
eval('ins(out)')
eval('ins(ws)')
print(woo)
red()
red('ins(wss)')
rr=red('rinspect(rinspect)')
rr
re.sub(r'\x1B\[[0-9;]*[a-zA-Z]','',rr)
print(re.sub(r'\x1B\[[0-9;]*[a-zA-Z]','',rr))
red('ins(red)')
ins(red)
ins('red')
red(ins('red'))
red(ins(red))
red('ins(p)')
ins(p)
pp=ins(p)
print('xx'*30)
red('inspect(p)')
red('rinspect(p)')
red('rinspect(console)')
gg=red('rinspect(console)')
print(gg)
    print(gg,file=f)
gg=red('rinspect(logging)')
gg=red(rinspect(logging))
gg=red(ins(logging))
ins(logging)
gg=red('ins(logging)')
gg=red('ins(wikipedia)')
gg=red('ins(Columns)')
red('cfilter')
red(cfilter)
gg=red('cfilter')
red('red')
from contextlib import redirect_stdout
red('ins(exit)')
dir(exit)
type(exit)
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    rend(dd)
    return dd
    # return dd
red(sq)
red('sq')
red(ins(sq))
gg=red(ins(sq))
red('ins(sheet)')
red(ins(sqll))
red('ins(sqll)')
red('ins(pyperclip)')
str(map(str,gg))
list(map(str,gg))
red(ins(pyperclip))
red('ins(prag)')
gg=red('ins(prag)')
[a for a in gg]
type(gg)
len(bb)
len(gg)
re.sub(r'\s',' ',gg)
print(re.sub(r'\s',' ',gg))
print(re.sub(r'\s+',' ',gg))
print(re.sub(r'\n{2,}',' ',gg))
red('ins(sqlite)')
red('ins(sqlite3)')
red('ins(chop)')
sqpy
rend(dd)
DD
red('ins(pf)')
pf(gg)
wss('keats')
ws('John Keats')
red('ins(ws)')
res=wikipedia.search('John Keats')
ret=wikipedia.summary('John Keats')
ret=wikipedia.summary('washington')
ret=wikipedia.summary('keats')
ret=wikipedia.summary(keats)
import wikipediaapi
    wiki_wiki = wikipediaapi.Wikipedia('en')
    print("Page - Title: %s" % page_py.title)
    # Page - Title: Python (programming language)
    print("Page - Summary: %s" % page_py.summary[0:60])
    # Page - Summary: Python is a widely used high-level programming language for
wiki_wiki = wikipediaapi.Wikipedia('en')
print("Page - Title: %s" % page_py.title)
# Page - Title: Python (programming language)
print("Page - Summary: %s" % page_py.summary[0:60])
# Page - Summary: Python is a widely used high-level programming language for
page_py = wiki_wiki.page('Python_(programming_language)')
page_py
print("Page - Exists: %s" % page_py.exists())
page_py = wiki_wiki.page('Python')
zdir(page_py)
page_py.title
page_py.summary
page_py.text
red('ins(wikipedia)')
from .wikipedia import *
from wikipedia import *
zdir(wikipedia)
help(wikipedia)
page
len(text)
print(wikipedia.suggest("Bill cliton"))
print(wikipedia.suggest("keats"))
print(wikipedia.suggest("Keats"))
print(wikipedia.suggest("keyes"))
print(wikipedia.summary("keyes"))
print(wikipedia.summary("keats"))
print(wikipedia.summary("einstein"))
print(wikipedia.geosearch(37.787, -122.4))
wikipedia.summary('john keats')
wikipedia.summary('abraham lincoln')
ws('lincoln')
time.tm_gmtoff
time
zdir(time)
time.localtime
import builtins
dir(builtins)
print(dir(builtins))
dir(bin)
sys.path
'aaa'.isspace
'aaa'.isspace()
'\n'.isspace()
'  \n'.isspace()
help(isspace)
print(zdir('jim'))
def zdir(z):
    methods=[a for a in dir(z) if not a.startswith('_')]
    print(methods)
    return methods
    # return methods
'The lady doth protest too much, methinks'.re.split('\s')
re.split('\s','The lady doth protest too much, methinks')
mac=re.split('\s','The lady doth protest too much, methinks')
''.join(mac)
[(a,b) for a,b in enumerate(mac)]
[lis((a,b)) for a,b in enumerate(mac)]
[list((a,b)) for a,b in enumerate(mac)]
[list((str(a),b)) for a,b in enumerate(mac)]
rend([list((str(a),b)) for a,b in enumerate(mac)])
rend([str(list((str(a),b))) for a,b in enumerate(mac)])
ff={[str(list((str(a),b))) for a,b in enumerate(mac)]}
ff={(str(a),b) for a,b in enumerate(mac)}
ff['0']
type(ff)
gg={1,"jim"}
gg={"1","jim"}
gg={"1","jim",}
ff={(str(a),b)+":" for a,b in enumerate(mac)}
n=range(5)
[a for a in n]
[a:a*2 for a in n]
{a:a*2 for a in n}
b={a:a*2 for a in n}
type(b)
b.items()
[(x,y) for x,y in b]
b
[a for a in b]
[x for x in b]
[x,y for x,y in b]
[(x,y) for x,y in b.items()]
[list((x,y)) for x,y in b.items()]
[list((x,y*8)) for x,y in b.items()]
[list((x,chr(y))) for x,y in b.items()]
[list((x,chr(y*30))) for x,y in b.items()]
b.keys()
[a for a in b.keys()]
[b[a] for a in b.keys()]
[(a,b[a)] for a in b.keys()]
[(a,b) for a,b in b.keys()]
[(a,b[a]) for a in b.keys()]
[(a,b[a]) for a in b.items()]
d1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
del a, b
globals()
print(globals())
del b
d1
del n, mac
[a for a in d1]
[a for a in d1.keys()]
[a for a in d1.items()]
[a,b for a,b in d1]
[(a,b) for a,b in d1]
d1[1]
d1['a']
d1.items()
[(a,b) for a,b in d1.items()]
[(a,b) for a,b in d1.items() if a=='a']
d1[2]
type(d1.items())
[b for a,b in d1.items()]
[a for a,b in d1.items()]
{a for a,b in d1.items()}
type({a for a,b in d1.items()})
{a:2 for a,b in d1.items()}
type({a:2 for a,b in d1.items()})
rnd
type({a:rnd() for a,b in d1.items()})
cc={a:rnd() for a,b in d1.items()}
type(cc)
cc={a:rnd() for a in range(5)}
wss('lincoln')
linwss('lincoln')
lin=wss('lincoln')
ws('abraham lincoln')
lin=ws('abraham lincoln')
cps(ws('abraham lincoln'))
ret=wikipedia.summary('abraham lincoln')
ret
r1=re.sub('[^a-zA-Z]',ret)
r1=re.sub('[^a-zA-Z]',' ',ret)
r1
r2=re.sub('\S{2,}','',r1)
r2
r2=re.sub('\s{2,}','',r1)
r2=re.sub('\s{2,}',' ',r1)
r2.replace('LINK','')
chop(r2)
xx=chop(r2)
len(xx)
type(xx)
xx[:15]
xx[:15].replace('LINK','')
str(xx)
str(xx[0])
str(xx[:3])
str(xx[:3]).replace('LINK','')
str(xx).replace('LINK','')
str(xx[0]).replace('LINK','')
' '.join(xx)
' '.join(xx).replace('LINK','')
chop(' '.join(xx).replace('LINK',''))
hh=chop(' '.join(xx).replace('LINK',''))
hh
'\n'.join(hh)
print('\n'.join(hh))
hhh='\n'.join(hh)
hhh
    f.write(hh)
    f.write(hhh)
#p3/start.py:    data = open(dfile, 'r', encoding='utf-8').read().splitlines()
data = open('x', 'r', encoding='utf-8').read().splitlines()
data[:20]
data[20:40]
data[20:25]
d2=data[20:25]
d2
d2[0]
[a for a in d2[0]]
[a for a in d2[0].split(' ')]
{a:rnd() for a in [a for a in d2[0].split(' ')]}
{rnd():a for a in [a for a in d2[0].split(' ')]}
myd={rnd():a for a in [a for a in d2[0].split(' ')]}
md
myd
[myd[a] for a in myd]
[a for a in myd.items()]
[a for a in myd.values()]
{rnd():a for a in myd.values()}
data = open('x', 'r', encoding='utf-8').read() 
data.splitlines
data.splitlines()
open('xx', 'w', encoding='utf-8').write('jim')
open('xx', 'w', encoding='utf-8').write(data)
open('xx', 'w', encoding='utf-8').writelines(data)
open('xx', 'w', encoding='utf-8').writelines(r1)
open('xx', 'w', encoding='utf-8').writelines(ff)
open('xx', 'w', encoding='utf-8').writelines(str(ff))
s='aeio'
t=''
for a in range(len(s)):
    t+=a[s]
    t+=s[a]
t
s.split()
s.split('')
list('aeio')
gp([1,3])
set(gg)
' '.join(gg)
[str(a) for a in gg]
[''.join(a) for a in gg]
set([''.join(a) for a in gg])
[a,b for a,b in enumerate([''.join(a) for a in gg)]]
[(a,b) for a,b in enumerate([''.join(a) for a in gg)]]
[(a,b) for a,b in enumerate([''.join(p) for p in gg)]]
nn=''.join(gg)
permutationList
pe=permutationList
[(a,b) for a,b in enumerate(pe)]
3!
math.factorial(3)
gp(list('abcde'])
gp(list('abcde'))
pe=gp(list('abcde'))
len(pe)
len('abcde')
math.factorial(5)
import ipb
import idb
gp(list('12345'))
list(range(20)]
list(range(20))
gp(list(range(10)))
math.factorial(10)
print("{:,}".format(x));
print("{:,}".format(20));
print("{:,}".format(20000000));
print("{:_}".format(20000000));
print(f'{1000000:,}')
print(f'number is {1000000:,}')
g=f'number is {1000000:,}'
g
g=f'number is {1000000:_}'
range(10,2)
print(range(10,2))
[a for a in range(20,2)]
[a for a in range(20)]
[a for a in range(20,22)]
[a for a in range(20,22,-1)]
[a for a in range(24,22,-1)]
jj=(ran() for a in range(5))
print(jj)
[a for a jj]
ran()
rand()
jj=(rnd() for a in range(5))
[a for a in (rnd() for a in range(20))]
pp=[a for a in (rnd() for a in range(20))]
jj=(ran(), for a in range(5))
jj=(ran(),) for a in range(5))
jj=((ran(),) for a in range(5))
jj[1]
jj=((rand(),) for a in range(5))
jj=((rnd(),) for a in range(5))
ff=list('aaabc')
ff.count('a')
def wsr(x):
ff=wsr('albert einstein')
''.join(ff).count('a')
''.join(ff).count('Kais')
''.join(ff).count('from')
re.findall('from',''.join(ff))
re.search('from',''.join(ff))
''.join(ff)[517:521]
''.join(ff)[5110:521]
''.join(ff)[511:521]
print('\n')
[str(a) for a in ff]
print(['\n'.joint(ff)])
print(['\n'.join(ff)])
print(['\n -- '.join(ff)])
print(str(['\n -- '.join(ff)]))
print(''.join(['\n -- '.join(ff)]))
print(''.join(['\n -- '.join(ff[30])]))
pp=''.join(['\n -- '.join(ff)])
open('pp', 'w', encoding='utf-8').write(pp)
with open('pp', 'w', encoding='utf-8').write(pp)
10%3
10%2
10%1
reversed('jim')
str(reversed('jim'))
[a for a in reversed('jim')]
type(reversed('jim'))
print(__name__)
'jim'[::2]
'The lady doth protest too much, methinks'[::-1]
'The lady doth protest too much, methinks'[::-1][::-1]
code_to_test = "print('Hello World!')"
time = timeit.timeit(code_to_test, number=100)
print("Time taken to run the code:", time, "seconds")
'jim'[::-1]
'jim'[::]
a=range(10,2)
print(a)
[a for a in range(8)]
[a for a in range(8)][2:4]
[a for a in range(8)][2:4:2]
[a for a in range(18)][2:4]
[a for a in range(18)][2:4:3]
[a for a in range(18)][::3]
[a for a in range(18)][5::3]
'jim'.split()
re.split('\s','The lady doth protest too much, methinks')[::2]
kk=re.split('\s','The lady doth protest too much, methinks')
zip(kk,range(len(kk)))
[a for a in zip(kk,range(len(kk)))]
[a for a in zip(range(len(kk))),kk]
[a for a in zip(range(len(kk)),kk)]
[list(a for a) in zip(range(len(kk)),kk)]
[[a for a] in zip(range(len(kk)),kk)]
[a for a in list(zip(range(len(kk)),kk))]
list([a for a in list(zip(range(len(kk)),kk))])
list([a for a in list(zip(range(len(kk)),kk))])[:2]
list([a for a in list(zip(range(len(kk)),kk))])[::-1]
list(range(20))[::3]
print(*[1,2,3])
a=*[1,2,3]
" ".join([a for a in zip(range(len(kk)),kk)])
" ".join([str(a) for a in zip(range(len(kk)),kk)])
" ".join([str(a) for a in zip(range(len(kk)),kk)])[1]
" ".join([str(a) for a in zip(range(len(kk)),kk)])[1:3]
[str(a) for a in zip(range(len(kk)),kk)][1:3]
[list(str(a)) for a in zip(range(len(kk)),kk)][1:3]
[list(a) for a in zip(range(len(kk)),kk)][1:3]
[list(a) for a in zip(range(len(kk)),kk)]
[list(a) for a in zip(range(len(kk)),kk)][-1]
[list(a) for a in zip(range(len(kk)),kk)][-2]
[list(a) for a in zip(range(len(kk)),kk)].pop()
ls=[list(a) for a in zip(range(len(kk)),kk)]
ls
ls.pop()
ls.pop(2)
ls[-1]
ls[-1][0]
ls[-1][1]
[map(str,a) for a in ls]
[''.join(map(str,a)) for a in ls]
[' '.join(map(str,a)) for a in ls]
[' '.join(map(str,a)) for a in ls][:2]
[' '.join(map(str,a)) for a in ls][2:]
[' '.join(map(str,a)) for a in ls][2:-1]
[' '.join(map(str,a)) for a in ls][:-1]
[' '.join(map(str,a)) for a in ls][::-1]
code_to_test = '''print('Hello World!')
def rev(s): return s[::-1]
rev('jim')
math.sqrt(8)
def tri(x,y,z):
    return x**2 + y**2 ==math.sqrt(z)
tri(5,5,25)
def py(x,z):
    return (math.sqrt(x**2+y**2))
py(3,4)
def py(x,y):
def py(x,y,z):
    hy= (math.sqrt(x**2+y**2))
    return hy==z
py(3,4,5)
py(3,4,8)
list('123')
list('1 2 3')
'1 44 55'.split()
x,y,z='1 44 55'.split()
def py(x):
    x,y,z=x.split() 
py(3 4 5)
py('3 4 5')
print(x,y,z)
x='4 8 22'
[int(map(str,a)) for a in x.split()]
[map(int,a)) for a in x.split()]
[a for a in x.split()]
[int(a) for a in x.split()]
[int(a) for a in x.split()][0]
x,y,z=[int(a) for a in x.split()]
    x,y,z=[int(a) for a in x.split()]
py('3 4 9')
monthons=int(input('number of months: '))
for a range(20):
    print('jim')
for a in range(20):
    print(a,'jim')
for a in range(20,,2):
for a in range(0,20,2):
for a in range(0,20):
if 100%1000: print(2)
if 1000%1000: print(2)
22%3
help(round)
round(2.22234)
round(2.22234,3)
math
math.e
help(log)
help(math.log)
math.log(8,2)
math.log(1000,2)
math.log(1000,10)
10**3
def nn(n):
    if n%1000:
        return (1+n//1000)*1000
        return n
nn(1003)
3/2
3//3
def num(x):
    s = int(input('number: '))
    if 0 > s and s>50:
        print('ok')
num(2)
    while 0 > s and s<50:
        s = int(input('number: '))
    print('ok')
    s=-1
def num():
    while 0 < s and s<50:
num()
    while 5 < s:
    while 5 > s:
10/100
dow(x,y):
    return (x-y)/y
def dow(x,y):
dow(100,90)
    return ((x-y)/y)*100
dow(100,190)
from itertools import count
count(2)
[a for a in count(2)]
[a for a in count(10,2)]
for i in count(10,2):
                print(i)
                if i>25: break
                
from itertools import repeat
for i in repeat(‘Red’,3):
a = iter('Hello')
dir(a)
dir('jim')
[a for a in dir('jim')]
print([a for a in dir('jim')])
'a'.__class__
dir('a'.__class__)
for a in count(5):
    if a>10:
        break
for i in itertools.cycle("123"):
    print(i)
import itertools
rom itertools import product  
print("We are computing cartesian product using repeat Keyword Argument:")  
print(list(product([1, 2], repeat=2)))  
print()  
from itertools import product  
list(product([1,3]))
list(product([1,3,4]))
rom itertools import permutations  
print("Computing all permutation of the following list")  
print(list(permutations([3,"Python"],2)))  
from itertools import permutations  
print(list(permutations([3,"Python"],2)))
print(list(permutations([3,"Python"],4)))
print(list(permutations(['xyz'.split()],4)))
print(list(permutations(['xyz'.split()],2)))
'xyz'.split()
list('xyz')
print(list(permutations(list('xyz'),2)))
print(list(permutations(list('xyz'),3)))
x=list(permutations(list('xyz'),3))
[a,b for a,b in enumerate(x)]
3 86
[(a,b) for a,b in enumerate(x)]
fac(x):
    if x==1:
    x=x-1
    fac(x)
fac(3)
def fac(x):
num = int(input("Enter a number: "))    
factorial = 1    
if num < 0:    
   print(" Factorial does not exist for negative numbers")    
elif num == 0:    
   print("The factorial of 0 is 1")    
else:    
   for i in range(1,num + 1):    
       factorial = factorial*i    
   print("The factorial of",num,"is",factorial)    
   
fact = 1    
   print(" fact does not exist for negative numbers")    
   print("The fact of 0 is 1")    
       fact = fact*i    
   print("The fact of",num,"is",fact)    
num=4
for i in range(1,num + 1):    
   print(i)
   fact = fact*i    
print("The fact of",num,"is",fact)    
math.factorial(4)
num
v 18
f'{math.factorial(10):_}
f'{math.factorial(10):_}'
f'{2^^8:_}'
f'{2**8:_}'
f'{2**16:_}'
f'{2**32:_}
f'{2**32:_}'
num = 10    
fact
del fact
   print("The fact of",num,"is",fact)
fact = 1
factorial = lambda num: 1 if num <= 1 else num * factorial(num-1)
factorial
type(factorial)
factorial(4)
dir(factorial)
[a for a in dir(factorial)]
print([a for a in dir(factorial)])
factorial(-4)
g=f'number is {math.sqrt(1000000):_}'
g=f'number is {math.sqrt(10001234132)}'
g=f'number is {math.sqrt(10001234132):.2f}'
g=f'number is {math.sqrt(2):.2f}'
g=f'number is {math.sqrt(2):.4f}'
f'number is {math.sqrt(2):.4f}'
lin=wsr('abraham lincoln')
print(lin.tail())
st=" ".joint(lin[40])
st=" ".join(lin[40])
st=" ".join(lin[:15])
st
st=" ".join(lin)
st=st+st
print(st.tail())
sum([a for a in range(3)])
sum([a for a in range(6)])
len(str(2000))
'The lady doth protest too much, methinks'[4:8:-1]
'The lady doth protest too much, methinks'[4:8]
'The lady doth protest too much, methinks'[4:8:2]
q=input('num')
print(q)
q
[map(int,a)) for a in q]
[map(int,a) for a in q]
[int(map(int,a)) for a in q]
[list(map(int,a)) for a in q]
[int(a) for a in q]
type(q)
type(q[1])
[a for a in q]
x=input('num: ')
def ppp(x):
    return str(x)
[ppp(a) for a in x]
x=map(ppp,x)
list(x)
for i in x:
x=range(4)
map(ppp,x)
list(map(ppp,x))
my_dict = {2,3,4,5,6,7,8,9}
st[100]
st[:100]
map(lambda x: x.upper(), st[:100])
list(map(lambda x: x.upper(), st[:100]))
"".join(list(map(lambda x: x.upper(), st[:100])))
"".join(list(map(lambda x: x.lower(), st[:100])))
ins(fact)
my_dict = {2:3}
type(my_dict)
def rm(x)
    b=len(x)
    for a,b in enumerate(x):
        print(f'{a} {b}')
def rm(x):
rm(q)
len(st)
st[:100].split()
rm(st[:100].split())
    cc=''
        cc.append(f'{a} {b}')
    return cc
        c+=(f'{a} {b}')
        cc+=(f'{a} {b}')
dd=rm(st[:100].split())
        cc+=(f'{a} {b}\n')
import red
ord(22)
help(ord)
[(a chr(a)) for a in range(10)]
[(a, chr(a)) for a in range(10)]
[(a, chr(a)) for a in range(100)]
rend([(a, chr(a)) for a in range(100)])
[list((a, chr(a))) for a in range(100)]
rend([list((a, chr(a))) for a in range(100)])
[list((str(a), chr(a))) for a in range(100)]
rend([list((str(a), chr(a))) for a in range(100)])
[map(str,list((str(a), chr(a)))) for a in range(100)]
[list(map(str,list((str(a), chr(a))))) for a in range(100)]
[list(map(str,list((str(rnd()), chr(rnd()))))) for a in range(100)]
set('jim')
set(st)
all=set(st)
rend(all)
rend(sorted(all))
print(all)
print(sorted(all))
[(a, ord(a)) for a in sorted(all))]
[(a, ord(a)) for a in sorted(all)]
chr(8211)
char=[(a, ord(a)) for a in sorted(all)]
print(char)
str(char[4])
[str(a) for a in char]
rend([str(a) for a in char])
while true:
    x = input('number: ')
    if x==0:
    else print(x)
while True:
    x = int(input('number: '))
ss=st[:10]
ss=st.split()[:10]
ss.remove(1)
del ss[0]
del ss[::2]
sorted(set(st))
[[a,b] for a, b in enumerate(sorted(set(st)))]
jj=[[a,b] for a, b in enumerate(sorted(set(st)))]
[a[1] for a in jj]
[a[0] a[1] for a in jj]
[a[0]+a[1] for a in jj]
[str(a[0])+a[1] for a in jj]
[str(a[0])+' '+a[1] for a in jj]
print([str(a[0])+' '+a[1] for a in jj])
print([chr(a[1])+' '+a[1] for a in jj])
print([ord(a[1])+' '+a[1] for a in jj])
print([ord(a[1]) for a in jj])
print([ord(a[1])+a[1] for a in jj])
print([str(ord(a[1]))+a[1] for a in jj])
print([str(ord(a[1]))+' ' + a[1] for a in jj])
re.sub(r'\s',' ',st)
re.sub(r',',' ',st)
re.sub(r'^[a-zA-Z0-9',' ',st)
re.sub(r'^[a-zA-Z0-9]',' ',st)
re.sub(r'^[a-zA-Z0-9]','xx',st)
re.sub(r'^[a-z]','xx',st)
re.sub(r'[^a-z]','xx',st)
re.sub(r'[^a-zA-Z]','xx',st)
re.sub(r'[^a-zA-Z]','',st)
re.sub(r'[^a-zA-Z]',' ',st)
re.sub(r'[^a-zA-Z0-9]',' ',st)
re.sub(r'[^a-zA-Z0-9\.]',' ',st)
qq=re.sub(r'[^a-zA-Z0-9\.]',' ',st)
qq.split()
" ".join(qq.split())
rr=" ".join(qq.split())
rr=" ".join(qq.split()).split()
rr[:20]
r2rr[:25]
r2=rr[:25]
r2[::3]
r3=[list(a,b) for a,b in enumerate(r2)]
r3=[(a,b) for a,b in enumerate(r2)]
r3
re[::3]
r3[::3]
for a in r3:
    if 1[0]==5:
        del r3[5]
r3[5]
    if a[0]==5:
    if a[0]%3==0:
        del r3[a[0]]
        print(f'{a} remainder 3')
        print(f'{a} remainder 3 del {a[0]}')
del r3[21]
del r3[6]
del r3[::2]
del r3
del rr, ss
del x, g, i, jj
char
cps(char)
def 3(k):
    l=len(k)
def th(k):
    for x in l:
        del l[::3]
th(ss)
th(st)
sl=st.split()
th(sl)
    for x in range(l):
        del k[::3]
sl
        if x%3 ==0:
            print(k[x])
            del k[x]
            print(f'x is {x} {k[x]} ')
len(sl)
sl=sl[:20]
sl.pop(1)
def sh(k):
    for a,b in enumerate(k):
        print(f'{a} - {k}')
sh(sl)
sl[1]
        print(f'{a} - {b}')
        if a%==0:
            print(f'deleting {b[a]}')
            k.pop(a)
        if a%3==0:
sl=sl[:120]
        while a < len(k):
            print(f'{a} - {b}')
            if a%3==0:
                print(f'deleting {b[a]}')
                k.pop(a)
sl=st[:120]
k
sl=st[:120].split()
                print(f'deleting {k[a]}')
                try:
                    k.pop(a)
                except:
                    print(f'cant delete {a} of {len{a}}')
                    print(f'cant delete {a} of {len(a)}')
                pdb.set_trace()
    for (a,b) in enumerate(k):
for a,b in enumerate(sl):
    print(a, b)
                # pdb.set_trace()
[(a,b) for a,b in enumerate(sl)]
sl[::3]
[(str(a),b) for a,b in enumerate(sl)]
[(str(a)+b) for a,b in enumerate(sl)]
ss[(str(a)+b) for a,b in enumerate(sl)]
ss=[(str(a)+b) for a,b in enumerate(sl)]
ss[::3]
[ss.remove(a) for a in ss[::3]]
len(ss)
ss.remove(ss[0])
T = 1,2,3 # create a 3-tuple
T
list(map(str,T))
def nn(k):
    return str(k)+" number"
list(map(nn,T))
def remove_nums(int_list):
  #list starts with 0 index
  position = 3 - 1 
  idx = 0
  len_list = (len(int_list))
  while len_list>0:
    idx = (position+idx)%len_list
    print(int_list.pop(idx))
    len_list -= 1
nums = [10,20,30,40,50,60,70,80,90]
remove_nums(nums)
nums
    print(int_list)
    print(f'idx {idx} pop {int_list.pop(idx)}')
random.shuffle(range(3))
range(3)
print(range(3))
random.shuffle([a for a in range(3)])
[a for a in range(3)]
help(shuffle)
help(random.shuffle)
random.shuffle('123')
random.shuffle([1,2,3])
aa=random.shuffle([1,2,3])
print(aa)
random.shuffle(sl)
pprint(sl)
pprint(all)
pprint(random)
data = [{"language": "Python", "application": ["Data Science", "Automation", "Scraping", "API"]}, {"language": "Javascript", "application": ["Web Development", "API", "Web Apps", "Games"]}]
type(data[0])
[a for a in data]
[a['language'] for a in data]
[a['application'] for a in data]
mylist = ["apple", "banana", "cherry"]
print(random.choices(mylist, weights = [10, 1, 1], k = 14))
print(random.choices(mylist, weights = [10, 1, 1], k = 4))
print(random.choices(mylist, weights = [10, 10, 10], k = 4))
print(random.choices(range(20)))
print(random.choices(range(20, k=5)))
print(random.choices(range(20),k=5))
print(random.choices(range(200),k=5))
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}
z = x.intersection(y)
zz=x.union(y)
c=collections.Counter(st)
pprint(c)
type(c)
[a for a in cc]
[a for a in c]
cc[1]
c[1]
c[:20]
c[0]
[{a,b} for a,b in c]
counter = Counter(['D','C','C','E','E','E','A','A','X'])
print(counter)
from collections import counter
counter = collections.Counter(['D','C','C','E','E','E','A','A','X'])
from collections import Counter
counter = Counter({'X':3,'Y':2,'Z':1})
counter = collections.Counter(set(st))
counter = collections.Counter(list(set(st)))
counter = collections.Counter(st)
dir(counter)
counter.keys()
type(counter.keys())
counter.items()
[(a,b) for a,b in counter.items()]
[map(str,(a,b)) for a,b in counter.items()]
[list(map(str,(a,b))0 for a,b in counter.items()]]
[list(map(str,(a,b))) for a,b in counter.items()]
all=[list(map(str,(a,b))) for a,b in counter.items()]
print(sorted(all, key=lambda student: student[1]))
print(sorted(all, key=lambda student: student[0]))
print(sorted(all, key=lambda s: s[0]))
all[1]
all[1][1]
print(sorted(all, key=lambda s: s[1]))
print(sorted(all, key=lambda s: int(s[1])))
re.findall('from',st)
re.find('from',st)
zdir(re)
re.match('from',st)
re.search('from',st)
re.finditer('from',st)
[a for a in re.finditer('from',st)]
st[1178:1183]
print(sorted(all, key=lambda s: int(s[1]),reverse=True))
re.findall('ə',st)
student_objects = [
    Student('john', 'A', 15),
    Student('jane', 'B', 12),
    Student('dave', 'B', 10),
]
class Student:
    def __init__(self, name, grade, age):
        self.name = name
        self.grade = grade
        self.age = age
    def __repr__(self):
        return repr((self.name, self.grade, self.age))
student_objects[1]
repr(student_objects[1])
repr(student_objects)
        return "nothing"
str(student_objects)
        return repr((self.name, self.grade, self.age+"bbbbbbbbbb"))
        return repr((self.name, self.grade, str(self.age)+"bbbbbbbbbb"))
mydate = datetime.datetime.now()
print("__str__() string: ", mydate.__str__())
print("str() string: ", str(mydate))
mydate
str(mydate)
print("__repr__() string: ", mydate.__repr__())
print("repr() string: ", repr(mydate))
mydate.__str__
mydate.__str__()
mydate.__repr__()
lin=wsr('james monroe')
os.chdir('p3')
os.chdir('less')
records = defaultdict(list)
from collections import defaultdict
records
type(records)
rec = defaultdict(list)
rec[1]='jim'
rec
rec['a']
rec['1']
rec[1]
rec = defaultdict(int)
pprint(rec)
lin=lin.split()[:20]
lin[0]
len(lin)
lins=' '.join(lin)
lins
linsl=lins.split()
linsl
re.keys
rec.keys()
rec.values()
rec[2]='tom'
type(rec)
rec[33]
for a in os.scandir('.'):
[a for a in os.scandir('.')]
zdir(os.scandir)
ins(os.scandir)
help(os.scandir)
dir(os.scandir)
[a.name for a in os.scandir('.')]
[a.name for a in os.scandir('.')][0]
[a for a in os.scandir('.')][0]
dir([a for a in os.scandir('.')][0])
[a.name for a in os.scandir('.') if 'html' in  a.name ]
with open('grid.html') as inputfile:
  for lines in inputfile:
    line = lines.rstrip('\n')
data = open('grid.html', 'r', encoding='utf-8').read()
open
data.split('\n')
[a,b for a,b in enumerate(data.split['\n'))]
[(a,b) for a,b in enumerate(data.split['\n'))]
[(a,b) for a,b in enumerate(data.split('\n'))]
print([(a,b) for a,b in enumerate(data.split('\n'))])
print([[a,b] for a,b in enumerate(data.split('\n'))])
[str((a,b)) for a,b in enumerate(data.split('\n'))]
rend([str((a,b)) for a,b in enumerate(data.split('\n'))])
print("\n".join([str((a,b)) for a,b in enumerate(data.split('\n'))]))
import resource
import fileinput
count = 0
for lines in fileinput.input(['grid.html']):
    print(lines)
    count = count + 1
    print(lines.strip())
    print(lines.rstrip())
file=[]
    file.append(lines.strip())
file[:5]
[[a,b] for a, b in enumerate(sorted(set(st)[:5]))]
[[a,b] for a, b in enumerate(sorted(set(file)[:5]))]
[[a,b] for a, b in enumerate(list(sorted(set(file))[:5]))]
data = open('head.html', 'r', encoding='utf-8').read()
re.findall('font',st)
re.findall('font',data)
re.match('font',data)
print(re.match('font',data))
print(re.match('4',data))
with open ('h2.html', 'w') as out:
    out.write(data)
data = open('grid.html', 'r', encoding='utf-8').read().splitlines()
data = open('google.py', 'r', encoding='utf-8').read().splitlines()
print([a for a in data])
for a in data:
dx=" ".join(data)
dx
re.match('4',data)
re.match('4',dx)
re.match(r'4',dx)
re.match(r'4','jim4')
print(re.match(r'4','jim4'))
re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')
re.match(r'4', 'From amk Thu May 14 19:12:10 1998')
re.search(r'4', 'From amk Thu May 14 19:12:10 1998')
re.search(r'4', 'From amk Thu May 14 19:12:10 199844')
re.search(r'4', 'fff')
re.search(r'4', 'ff4f4')
p = re.compile('[a-z]+')
p
p.match('jim')
p.match('jim is 22### and %%')
m=p.match('jim is 22### and %%')
m.group()
m=p.match('@@@@jim is 22### and %%')
m=p.match('to jim is 22### and %%')
m=p.match('XXto jim is 22### and %%')
p = re.compile(r'\bclass\b')
print(p.search('no class at all'))
print(p.search('no class at all class'))
print(p.search('no classe at all class'))
re.sub(r'[^a-zA-Z0-9\.]',' ',lin)
re.sub(r'[^a-zA-Z0-9\.]',' ',lins)
l2=re.sub(r'[^a-zA-Z0-9\.]',' ',lins)
re.sub(r'\s{2,}','',l2)
def rfile(x):
    data = open(x, 'r', encoding='utf-8').read().splitlines()
    return data
rfile('grid.html')
kk=rfile('grid.html')
print(kk)
print('\n'.joint(kk))
print('\n'.join(kk))
open('xx', 'w', encoding='utf-8').write("".join(data))
open('xx', 'w', encoding='utf-8').write("\n".join(data))
def mym(x):
    return f'<div> {x} </div> '
jj=map(mym,lin:4)
jj=map(mym,lin[:4])
"".join(jj)
str(jj)
def pi(it):
    for x in it:
        print(x, end=' ')
    print('')  # for new line
pi(jj)
for a in jj:
    body='''
    <div class="wrapper">\n
    '''
    return f'{body}<div> {x} </div> \n '
list(jj)
kk="".join(jj)
open('xx', 'w', encoding='utf-8').write(kk)
jj=map(mym,lin[:24])
    return f'<div> {x} </div> \n '
jj="".join(listmap(mym,lin[:24]))
jj="".join(list(map(mym,lin[:24])))
open('xx', 'w', encoding='utf-8').write(jj)
    print(f"Error occurred: {e}")
finally:
    print("Finally Block")
    jjjj
    3//0
    3/0
list_numbers = [1, 2, 3, 4]
map_iterator = map(lambda x: x * 2, list_numbers)
pi(map_iterator)
linsl[100:110]
m=linsl[100:110]
for a,b  in enumerate(m):
    print(a,b)
    time.sleep(1.5)
    print(m)
    print(m.pop(a))
m.pop()
    print(m.pop())
    # time.sleep(1.5)
for a in len(m):
    m.pop()
len(m)
for a in range(len(m)):
    print(a, m)
raw_input('Press <ENTER> to continue')
def pause():
    programPause = raw_input("Press the <ENTER> key to continue...")
input()
input('no')
from polls.models import Choice, Question
zdir(Question)
from django.utils import timezone
timezone.now()
q = Question(question_text="What's new?", pub_date=timezone.now())
q.save()
q.id
zdir(q)
dir(q)
qq=dir(q)
qq
print(qq)
q.question_text
Question.objects.all()
[a for a in Question.objects.all()]
current_year = timezone.now().year
Question.objects.filter(question_text__startswith='What')
Question.objects.filter(question_text__startswith='xWhat')
q.choice_set.all()
q.choice_set.create(choice_text='Not much', votes=0)
q.choice_set.create(choice_text='The Sky', votes=0)
q.choice_set.create(choice_text='hacking', votes=0)
import polls
zdir(polls)
zdir(polls.models)
polls.models.timezone
polls.models.timezone()
zdir(timezone)
finish
vstart
video1 = video.subclip(vstart,vfinish)
video1
video
video1 = video.subclip(vstart, vfinish)
print(vfinish,vstart)
qq=[range(5)]
qq=[a for a in range(5)]
list(map(int,qq))
list(map(str,qq))
list(map(type,qq))
list(map(type,(vstart,vfinish)))
print(vstart,vfinish)
clip = VideoFileClip('/mnt/c/you/gut/downIntheValley.mp4')
clip1 = clip.subclip((4,30),(5,15))
clip1.write_videofile('edited.mp4',codec='libx264')
clip1 = clip.subclip((1,30),(1,35))
clip1 = clip.subclip((1,30),(2,15))
video = VideoFileClip('syncopated.mp4')
video = video.subclip(0, 20)
video = video.cutout(5, 10)
video.ipython_display(width = 360)
zdir(moviepy)
zdir(moviepy.editor)
import moviepy
moviepy.version
moviepy.version()
print(moviepy.version)
clip = VideoFileClip('syncopated.mp4')
scr
cps(scr)
scr=f'ffmpeg -i {clip} -ss {vstart} -to {vfinish} -vcodec libx264 -acodec copy {dirO}output.mp4'
with open('/mnt/c/you/gut/script', 'a') as f:
    f.write(scr)
with open('/mnt/c/you/gut/script.sh', 'a') as f:
scr=f'ffmpeg -i {clip} -ss {vstart} -to {vfinish} -vcodec libx264 -acodec copy {dirO}output.mp4 \n'
scr=f'ffmpeg -i {clip} -ss {vstart} -to {vfinish} -vcodec libx264 -acodec copy {slip}_{vstart}_{vfinish}.mp4 \n'
scr=f'ffmpeg -i {clip} -ss {vstart} -to {vfinish} -vcodec libx264 -acodec copy {clip}_{vstart}_{vfinish}.mp4 \n'
scr=f'ffmpeg -i {clip} -ss {vstart} -to {vfinish} -vcodec libx264 -acodec copy {song}_{vstart}_{vfinish}.mp4 \n'
scr=f'ffmpeg -i {clip} -ss {vstart} -to {vfinish} -vcodec libx264 -acodec copy {dirO}{song}_{vstart}_{vfinish}.mp4 \n'
from subprocess import run
data = run("ls",capture_output=True,shell=True)
print(data.stdout)
print(data.stderr)
data = run(scr,capture_output=True,shell=True)
aa=sheetc('data')
type(aa)
[a for a in aa.keys()]
bb=aa['values']
rend(bb)
bb[:10]
random.shuffle(aa)
random.randint(0,10)
bb[random.randint(0,10)]
for a in range(5):
    print(bb[random.randint(0,20)])
[ bb[random.randint(0,20)] for a in range(5) ]
"\n".join([ bb[random.randint(0,20)] for a in range(5) ])
"\n".join(bb)
"\n".join(bb[0])
print("\n".join(bb[0]))
["\n".join(a) for a in bb]
"\n".join(["\n".join(a) for a in bb])
print("\n".join(["\n".join(a) for a in bb]))
from typing import Final
DATABASE: Final = "MySQL"
Final
Final='jim'
today = datetime.today()
print(f"Today is {today}")
# Today is 2023-03-22 21:52:29.623619
print(f"Today is {today:%B %d, %Y}")
# Today is March 22, 2023
print(f"Today is {today:%m-%d-%Y}")
# Today is 03-22-2023
f"{today:%M}"
f"{today:%M}:ss"
f"{today:%M:%s}"
f"{today:%M:%ss}"
f"{today:%M:%S}"
f"{today:%H:%M:%S}"
axit
tx='''
                <a href="#">pricing</a>
                <a href="#">pricing</a>'''
tw=cfilter('/mnt/c/twit')
tw=cfilter('/mnt/c/twit',60)
tw
def mm(x):
    return f'<div> {x} </div>'
mm(x[1])
mm(tw[1])
[dw(a) for a in tw]
[mm(a) for a in tw]
join('\n')([mm(a) for a in tw])
'\n'.join([mm(a) for a in tw])
cps('\n'.join([mm(a) for a in tw]))
def jj(*x):
jj([1,2,34,])
jj(1,23)
jj(1 23)
ins(hi)
dir(hi)
dbName = 'database.db'
  conn = sqlite3.connect(dbName)
  cursor = conn.cursor()
  print("Database created!")
  print("Something bad happened: ", e)
  if conn:
    conn.close()
# Create operation
create_query = '''CREATE TABLE IF NOT EXISTS student(
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  surname TEXT NOT NULL);
  '''
cursor.execute(create_query)
print("Table created!")
# Insert and Read operation
cursor.execute("INSERT INTO student VALUES (1, 'John', 'Smith')")
print("Insert #1 done!")
cursor.execute("INSERT INTO student VALUES (2, 'Lucy', 'Jacobs')")
print("Insert #2 done!")
cursor.execute("INSERT INTO student VALUES (3, 'Stephan', 'Taylor')")
print("Insert #3 done!")
conn.commit()
conn.close()
records = cursor.execute("SELECT * FROM student")
for row in findrecords:
  print(row)
findRecords = cursor.execute("SELECT * FROM student")
for row in findRecords:
findRecords
[a for a in findRecords]
ss=[a for a in findRecords]
type(findRecords)
ins(findRecords)
zdir(findRecords)
def insert_command(conn, student_id, name, surname):
  command = 'INSERT INTO student VALUES (?, ?, ?)'
  cur = conn.cursor()
  cur.execute("BEGIN")
  try:
    cur.execute(command, (student_id, name, surname, ))
    cur.execute("COMMIT")
  except conn.Error as e:
    print("Got an error: ", e)
    print("Aborting...")
    cur.execute("ROLLBACK")
conn = sqlite3.connect(dbName, isolation_level=None)
cursor = conn.cursor()
print("Database created!")
insert_command(conn , 1, 'John', 'Smith')
insert_command(conn , 2, 'Lucy', 'Jacobs')
insert_command(conn , 3, 'Stephan', 'Taylor')
insert_command(conn , 4, 'Joseph', 'Random')
con
conn
cursor
insert_command(conn , 33, 'John', 'Smith')
insert_command(conn , , 'John', 'Smith')
tst='''SELECT sql 
FROM sqlite_master 
WHERE tbl_name = 'student';'''
findRecords = cursor.execute(tst)
fr=[a for a in findRecords]
fr
type(fr)
type(fr[0])
fr[0][0]
print(fr[0][0])
ss=[a for a in range(5)]
[print(a) for a in ss]
[print(f"this is {a}') for a in ss]
[print(f'this is {a}') for a in ss]
# A dictionary of student names and their score
student_score = {   'Ritika': 5,
                    'Sam': 7, 
                    'John': 10, 
                    'Aadi': 8}
# Iterate over the key-value pairs of a dictionary 
# using list comprehension and print them
[print(key,':',value) for key, value in student_score.items()]
[print(key,':',value,'\n') for key, value in student_score.items()]
kk=open('xxx','a') as j
kk=open('xxx','a') 
[print(key,':',value,'\n', file=kk) for key, value in student_score.items()]
cls Dd():
    phrase="The lady doth protest too much, methinks"
class Dd():
Dd.phrase
me=Dd
zdir(me)
me.phrase
dir(me)
Dd
    phrase="The lady doth protest too much, new"
Dd.phrase="new"
type(Dd)
type(Dd())
me=Dd()
random.range(5)
random.randrange(5)
[a for a in random.randrange(20)]
[random.randrange(20) for a in range(10)]
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
Point(2,3)
aa=Point(2,3)
aa.x
dir(aa)
zdir(aa)
aa.__dict__
aa.__doc__
aa.__hash__
aa.__module__
pr='The lady doth protest too much, methinks'
dir(pr)
rend(dir(pr))
pr.__class__
pr.__dir__
pr.__sizeof__
p1 = Point(4, 5)
p1
p1.x
class Zz(myDir):
    def __init__(self, myDir):
        self.myDir = myDir
class Zz:
Zx('/mnt')
jj=Zx('mnt')
jj=Zz('mnt')
dir(jj)
jj.mnt
jj.myDir
        return f"({self.myDir}"
        return f"{self.myDir}"
    def cfilter(myDir,day=60):
        myp=[]
        print("mmmmm")
        now = datetime.datetime.now()
        ago = now - datetime.timedelta(days=day)
        for root, dirs, files in os.walk(path):
            for fname in files:
                path = os.path.join(root, fname)
                st = os.stat(path)
                mtime = datetime.datetime.fromtimestamp(st.st_mtime)
                if mtime > ago:
                    fs=f'{path}'
                    # print(f'{path} modified {mtime}')
                    myp.append(fs)
            rend(myp)
            return myp
dir(Zz)
Zz.cfilter()
jj.cfilter()
        path=myDir
nn=Zz('.')
nn.cfilter
nn.cfilter()
os.scandir('.')
[a for a in os.scandir('.')][0]]
    def cc(myDir):
        print([a for a in os.scandir('.')][0])
nn.cc()
        print([a for a in os.scandir(myDir)][0])
nn.mDir
nn.myDir
nn.cc
        print([a for a in os.scandir(self.myDir)][0])
    def cc(self):
nn.cc('\mnt\c')
nn=Zz('\mnt\c\')
nn=Zz('\\mnt\\c\\')
nn=Zz(r'\')
nn=Zz('\\')
nn=Zz('..')
ff=nn.cc()
        ll=[a for a in os.scandir(self.myDir)][0]
        return ll
        ll=[a for a in os.scandir(self.myDir)]
        # print([a for a in os.scandir(self.myDir)]
nn.cc()[1]
[a for a in nn.c()]
import cfilter from exports
cfilter('\')
cfilter('\\')
cfilter('.',10)
cfilter('.',3)
cfilter('\',3)
cfilter(r'\',3)
mm=r'\'
wbkName = r'\AA\chart.xlsx'
wbkName
mm = r'\'
mm = r'\a'
mm = r'\\'
cfilter(mm)
cfilter('/')
cfilter('/mnt/c')
cfilter('/mnt/c/you')
[a for a in subdirs('/')]
[a for a in subdirs('/mnt/c/you')]
        [a for a in subdirs('.')]       
    def subdirs(self):
        """Yield directory names not starting with '.' under given path."""
        for entry in os.scandir(dp):
            if entry.is_file():
                yield entry.name
nn=Zz('/mnt/c/you')
pp=Zz('/mnt/c/all')
pp.cc()
zdir(pp)
        for entry in os.scandir(self):
zdir(nn)
nn.subdirs()
[a for a in n.subdirs()]
[a for a in nn.subdirs()]
        for entry in os.scandir(self.myDir):
pp=Zz('/mnt/c/twit')
[a for a in pp.subdirs()]
pp.subdirs()
pp=Z('/mnt/c/twit')
dir(pp)
pp.myDir
from export import Z
qq=Z('/mnt/c')
qq.cc()
(i * i for i in range(5))
[a for a in (i * i for i in range(5))]
def pt(max=0):
    n = 0
    while n < max:
        yield 2 ** n
        n += 1
pt(3)
[a for a in pt(3)]
y,z=1,2
y
def fb(nums):
    x,y=0,1
    for _ in range(nums):
        x,y=y, x+y
        yield x
[a for a in fb(8)]
[a for a in fb(88)]
[a for a in fb(9)]
        yield f'{x:_}'
[a for a in fb(30)]
[a for a in fb(83)]
        print(f'{x},{y}=y, x+y')
[a for a in fb(3)]
        print(f'{x},{y}={y}, {x+y}')
[a for a in fb(5)]
[a for a in fb(10)]
[a for a in fb(20)]
        yield f'{_} is {x:_}'
class Dog:
  def __init__(self, name, breed):
    self.name = name
    self.breed = breed
max = Dog("Max", "Golden Retriever")
pax = Dog("Max", "Golden Retriever")
# Default (internal) implementation of __repr__
print(max)
print(pax)
class Ba:
  def __init__(self, number, openingDate):
    # public access
    self.number = number
    # protected access
    self._openingDate = openingDate
    # private access
    self.__deposit = 0
type(Ba)
class MyClass:
  x = 'Hello World'
  y = 50
t1 = type('NewClass', (MyClass,), dict(x='Hello World', y=50))
print(type(t1))
print(vars(t1))
vars(Dog)
vars(y)
vars(fb)
class Cricket: 
    id = 10 
    player = "Sachin Tendulkar" 
    def display (self): 
        print(self.id,self.player) 
    print('Class created Successfully')
c=Cricket()
c.id
c.display
()
class Cricket:
   id = 10
   player = "Sachin Tendulkar"
   def display (self):
      print("ID: %d \nPlayer: %s"%(self.id,self.player))
# Create crkt instance of Cricket class
crkt = Cricket()
dir(crkt)
crkt.display()
class Program:
# The instance attributes
   def __init__(self, name, age):
      self.name = name
      self.age = age
# The instance method
   def plant(self, eucalyptus):
      return "{} plants {}".format(self.name, eucalyptus)
   def animals(self):
      return "{} animals".format(self.name)
# instantiating the object
Pen = Program("Pen", 10)
Pen
type(Pen)
vars(Pen)
Pen.plant()
Pen.plant('cactus')
Pen.animals()
Pen=Program(1,3)
pen
Pen=Program(1,(3,8))
Pen=Program(1,(3,8),3)
ins(Program)
class Soldier:
    def __init__(self, armor, num_weapons):
        self.armor = armor
        self.num_weapons = num_weapons
    def x(self):
        print(self)
patton=Soldier(2,4)
patton
patton.x()
patton.armor
import array
print(dir(array))
array.__dict__
for name in array.__dict__:
    print(name)
ad=array.__dict__
type(ad)
[(a,b) for a,b in ad]
[a b for a,b in ad]
[(a,b) for a,b in ad.items()]
[[a,b] for a,b in ad.items()]
class Z:
        return f"My class from Z: {self.myDir}"
dir(Z)
Z
Z.__dict__
[a fro a in Z.__dict__]
[a fro a in Z.__dict__.items()]
[a for a in Z.__dict__]
nn=Z('/mnt/c/you')
dir(nn)
[a for a in nn.__dict__]
nn.__dict__
print(nn.__dict__)
    def __init__(self, myDir, xx):
nn=Z('/mnt/c/you','not')
        self.zzmyDir = xx
import abs from builitins
from builtins import abs
dir(abs)
abs.__doc__
abs.__module__
print(dir(builtins.dir))
print(dir(builtins.dir.__doc__))
help(builtins.abs)
dir(builtins.abs)
def student(x):
dir(student)
print(dir(student))
student.__class__
student.__code__
student.__dict__
student.__str__
[a for a in dir(student)]
[a for a in dir(student)[:8]]
[a for a in dir(student)[:8]][1]
print([a for a in dir(student)[:8]][1])
str([a for a in dir(student)[:8]][1])
student.str([a for a in dir(student)[:8]][1])
cps([a for a in dir(student)[:8]][1])
student.__builtins__
cps([a for a in dir(student)[:8]][4])
student.__closure__
print(student.__builtins__)
repr([a for a in dir(student)[:8]][1])
abs
pd.__module__
pd.__sheet__
'ss'+[a for a in dir(student)[:8]][1]
'.'+[a for a in dir(student)[:8]][1]
'sheet'+'.'+[a for a in dir(student)[:8]][1]
eval('sheet'+'.'+[a for a in dir(student)[:8]][1])
eval('sheet'+'.'+[a for a in dir(student)[:8]][6])
oo=[a for a in dir(student)]
print(oo)
    eval('student.'a)
for a in oo[:3]:
    eval('student.'+a)
for a in oo:
    print(f'student.{a}')
student.__repr__
eval(student.__repr__)
eval('student.__repr__')
    n=f'student.{a}'
    eval(n)
    print(n)
eval(n)
[a for a in 1]
[a for a in [1]]
[eval(n) for a in [1]]
[eval(n) for n in oo]
oo[1]
[eval(f'student.'{n}) for n in oo]
[eval(f'student.{n}') for n in oo]
ss=[eval(f'student.{n}') for n in oo]
    print(eval('student.'+a))
    print(f"{eval('student.'+a)}")
    print(f"\n{eval('student.'+a)}")
    print(f"{a}\n{eval('student.'+a)}")
with open('eva','w') as f:
    print(f"{a}\n{eval('student.'+a)}", file=f)
    for a in oo:
        print(f"{a}\n{eval('student.'+a)}", file=f)
    pass  
print(type(Student))
print(Student.__dict__.keys())
print(Student.__module__)
dir(Student)
hi.__module__
hi.__inspect__
hi.__subdirs__
subdirs__module__
subdirs.__module__
ins(d())
ins(d)
dd=sorted([a for a in globals() if not a.startswith('_')])
    student_name = 'Terrance Morales'
    marks = 93  
jim=Student
jim.marks
dir(jim)
setattr(jim, 'age', 14)
zdir(jim)
jim.age
jim.m='s'
pp=1
pp.n=3
type(jim)
[a for a in jim]
[a for a in dir(jim)]
def ri(s):
    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    int_val = 0
    for i in range(len(s)):
        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            int_val += rom_val[s[i]]
    return int_val
ri('XX')
ri('XXIV')
rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
rom_val.values()
rom_val.items()
rom_val[1]
[a for a in rom_val]
rom_val[3]
rom_val['X']
[a for a in rom_val.values()]
stack, pchar = [], {"(": ")", "{": "}", "[": "]"}
pchar
pchar.keys()
pchar.values()
pchar.items()
i in 'jim'
class Restaurant:
    def __init__(self):
        self.menu_items = {}
        self.book_table = []
        self.customer_orders = []
    def add_item_to_menu(self, item, price):
        self.menu_items[item] = price
    def book_tables(self, table_number):
        self.book_table.append(table_number)
    def customer_order(self, table_number, order):
        order_details = {'table_number': table_number, 'order': order}
        self.customer_orders.append(order_details)
    def print_menu_items(self):
        for item, price in self.menu_items.items():
            print("{}: {}".format(item, price))
    def print_table_reservations(self):
        for table in self.book_table:
            print("Table {}".format(table))
    def print_customer_orders(self):
        for order in self.customer_orders:
            print("Table {}: {}".format(order['table_number'], order['order']))
dir(Restaurant)
r=Restaurant
dir(r)
r.__dict__
ins(r.customer_order)
r.customer_order(1,8)
r.customer_order(1,"x")
restaurant = Restaurant()
restaurant.customer_order(1, "Cheeseburger")
r=Restaurant()
r.print_menu_items()
r.print_customer_orders()
r.add_item_to_menu('pickl','jim')
r.add_item_to_menu('pickl',[2,3])
r.add_item_to_menu('pickls',[2,3])
"Astronomers don’t believe the universe is 13.7 billion years old—they know it.".split()
"Astronomers don’t believe the universe is 13.7 billion years old—they know it.".split()[random.range(6)]
"Astronomers don’t believe the universe is 13.7 billion years old—they know it.".split()[random.randrange(6)]
sheet('data')
sheet('data')['values']
sheetc('data')['values']
" ".join(sheetc('data')['values'])
" ".join(sheetc('data')['values'][0])
sheetc('data')['values'][0]
type(sheetc('data')['values'])
sheetc('data')['values'][:3]
"".join(sheetc('data')['values'][:3])
ss=sheetc('data')['values'][:3]
[str(a) for a in ss]
"".join([str(a) for a in ss])
[list(map(str,a)) for a in ss]
def f(lst):
    '''Converts input list of lists of strings
       to list of strings.'''
    tmp = []
    for inner in lst:
        s = ''
        for x in inner:
            s += x
        tmp.append(s)
    return tmp
f([list(map(str,a)) for a in ss])
[''.join(inner) for inner in ss]
str([''.join(inner) for inner in ss])
[''.join(inner) for inner in ss][0]
"".join([''.join(inner) for inner in ss])
"\n".join([''.join(inner) for inner in ss])
fs="\n".join([''.join(inner) for inner in ss])
open('xx', 'w', encoding='utf-8').write(fs)
class R:
    def __init__(self, title):
        self.title=title
b=R
b=R("xx')
dir(b)
print(b)
print(b.title)
b=R("xx")
b.title
isinstance(b,R)
isinstance(b,C)
isinstance(c,R)
gg=1
isinstance(gg,R)
gg=R
gg=R()
gg=R(1)
gg.title
print(object)
dir(object)
object.__class__
gg=Book('a')
gg=Book('a','Comic')
gg=Book('a','PAPERBACK')
gg.booktype
type(Book)
isinstance(gg,Book)
s=Supervisor()
zdir(s)
def outer(x):
    def inner(y):
        return x + y
    return inner
ins(outer)
outer(2)
pp=outer(2)
ins(pp)
pp(8)
print('*'*3)
    return x*10000
def my(o,y):
    o(y+13)
my(outer,8)
    print(o(y+13))
    return x+.88
    return x*3.14
def make_pretty(func):
    # define the inner function 
    def inner():
        # add some additional behavior to decorated function
        print("I got decorated")
        # call original function
        func()
    # return the inner function
# define ordinary function
def ordinary():
    print("I am ordinary")
ordinary()
ss=make_pretty(ordinary())
ss()
ins(ss)
ss=make_pretty(ordinary)
ins(ordinary)
ins(make_pretty)
        print("==========================")
@make_pretty
sheet('data')['values'][:3]
def inner(x):
    # add some additional behavior to decorated function
    print("==========================")
    # call original function
    func()
inner(2)
def g:
    print('g')
def g():
inner(g)
    def inner(x):
make_pretty(g)
make_pretty(g())
    print('ggggggggggggggg')
no=make_pretty(g())
no()
no
no('a')
no=make_pretty(g)
def smart_divide(func):
    def inner(a, b):
        print("I am going to divide", a, "and", b)
        if b == 0:
            print("Whoops! cannot divide")
            return
        return func(a, b)
def f(a,b):
    return a/b
f(3,2)
new=smart_divide(f)
new(3,2)
new(3,0)
print('*'*30)
def dec(a):
    def b(x):
        print('*'*30)
        a()
        print('='*30)
def yy():
zz=dec(yy)
zz()
zz=dec(yy())
def zz():
    print('zzzzzz')
    def b():
def lmn():
    print('lmnosp')
ppp=make_pretty(lmn)
ppp()
wss('Lincoln Logs')
wss('paul dirac')
mystr = "Hello"
rev_itr = reversed(mystr)
print(type(rev_itr))
rev_itr
list(rev_itr)
from person import person
'jim'.capitalize
'jim'.capitalize()
s="The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away."
" ".join(word.capitalize() for word in s.split(" "))
(a for a in s.split())
list((a for a in s.split()))
kk=(a for a in s.split())
[a for a in kk]
[a for a in s]
kk=(a for a in s])
kk=(a for a in s)
kk=(print(a)a for a in s)
kk=(print(a) for a in s)
s.title()
import seaborn
dir(Choice)
Choice.ok()
Choice.pk
Question.was_published_recently
Question.was_published_recently()
timezone
ins(timezone)
print(ins(timezone))
k=ins(timezone)
    print(ins(timezone),file=f)
zdir(timezone.now)
zdir(timezone.now())
zdir(timezone.now().toordinal)
timezone.now().toordinal
timezone.now().toordinal()
dir(Question)
cl
Question.objects
dir(Question.objects)
[a for a in dir(Question.objects)]
pp=[a for a in dir(Question.objects)]
rend(pp)
open('xx', 'w', encoding='utf-8').write(pp)
open('xx', 'w', encoding='utf-8').write("\n".join(pp))
kk=[a for a in dir(Question)]
kk='jim' +[a for a in dir(Question)]
kk='jim' + "\n".join([a for a in dir(Question)])
kk[:130]
kk='Question Dir\n\n' + "\n".join([a for a in dir(Question)])
[a for a in dir(Question)]
[a for a in dir(Question)][:5]
print(dir(Question))
list = [Jon, Ned, 8, 99]
print (*list)
list = "The lady doth protest too much, methinks".split()
list
print (*list,sep=',')
print (*list,sep='\n')
print (f'{*list}',sep='\n')
print (f'{list}',sep='\n')
print (*pp,sep='\n')
open('xx', 'a', encoding='utf-8').write("next\n")
open('xx', 'a', encoding='utf-8').write(kk)
open('xx', 'a', encoding='utf-8').write('\ndone')
ins(zdir)
zdir(ws)
zdir(os)
print (*me,sep=',')
print (*me,sep=', ')
Question.pk
Question.pk()
Question.id
Question.pub_date
all='''
SELECT sql FROM sqlite_master 
sqldb="/mnt/c/projects/django/database.db"
ip = c.execute(q)
ip = c.execute(all)
ip
list(ip)
"\n".join(list(ip))
nl=list(ip)
nl
"\n".join(nl)
[a for a in nl]
["\n".join(a) for a in nl]
["\n".join(a) for a in nl][0]
"\n".join(["\n".join(a) for a in nl])
nn="\n".join(["\n".join(a) for a in nl])
dbName = 'music.db'
  conn = sqlite3.connect(dbName, isolation_level=None)
create_query = '''CREATE TABLE IF NOT EXISTS song(
  name TEXT NOT NULL);
chr(',')
chr(,)
ord(',')
ord('\'')
ord('\"')
list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
list_files = subprocess.run(["ls", "-l"], stdout=subprocess.DEVNULL)
list_files
subprocess.call(["sqlite3", "database.db", 
  ".mode lines", 
  ".schema"])
".output results.xx"
  ".schema",
  ])
  ".schema" ])
".output results.xx",
.tables
subprocess.call(["sqlite3", "db.sqlite3", 
  "select * from  " ])
  "select * from song " ])
dbName="/mnt/c/projects/django/database.db"
create_query = '''CREATE TABLE IF NOT EXISTS song3(
dbName="/mnt/c/projects/django/mysite/db.sqlite3"
nq="INSERT INTO song3 (name) values ("new")"
cursor.execute(nq)
nq="INSERT INTO song3 (name) values ('new')"
nq
nq="INSERT INTO song3 (name) values ('good')"
data = open('song.txt', 'r', encoding='utf-8').read()
songs=data.split('\n')
len(songs)
songs[:-1]
songs[:-3]
songs[-4:]
list(filter(none,song))
list(filter(None,song))
list(filter(None,songs))
list(filter(None,songs))[-4:]
songs=list(filter(None,songs))
row="another"
conn.execute('insert into song3 (name) values (?)', row)
row
conn.execute(f'insert into mytable (name) values ({row})')
conn.execute(f'insert into song3 (name) values ({row})')
me=f'insert into song3 (name) values ({row})'
m3
me=f"insert into song3 (name) values ('{row}')"
conn.execute(me)
for row in songs:
        conn.execute(f"insert into song3 (name) values ('{row}')")
from polls.models import Schema
dir(Schema)
oq="SELECT * FROM sqlite_master where name like 'poll%' and type='table';"
result=cursor.execute(oq).fetchall()
oq
result
type(result)
for a in result:
    print('*'*3)
result[0]
" ".join(result[0])
type(result[0])
type(result[0][0])
" ".join(result[0][0])
" ".join(list(map(str,result[0])))
" ".join(list(map(str,result)))
print("\n".join(list(map(str,result))))
type(" ".join(list(map(str,result))))
print("<br><hr><br>".join(list(map(str,result))))
cps("<br><hr><br>".join(list(map(str,result))))
print(" ".join(list(map(str,result))))
print("\n\n".join(list(map(str,result))))
print("\n\n".join(list(map(str,result[0]))))
print("\n".join(list(map(str,result[0]))))
print("".join(list(map(str,result[0]))))
print(" -- ".join(list(map(str,result[0]))))
oq="SELECT tbl_name, sql FROM sqlite_master where name like 'poll%' and type='table';"
oq="SELECT tbl_name as 'table', sql FROM sqlite_master where name like 'poll%' and type='table';"
[type(a) for a in result]
type(a)
[a for a in result]
[a for a in result][0]
" ".join([a for a in result][0])
    p=" ".join(a)
    print(p)
    print(f'{type(p)}  {p})
    print(f'{type(p)}  {p}')
res=''
    res+=p
    res+=p+'\n'
print(res)
    res+=f"{p}+'\n\n'"
print('\n\nRes')
    res+=f"{p}'\n\n'"
type(res)
'jim   '.strip()
print(res.strip())
len(result)
    res+=f"{p}'\n'"
    print(f'\n=========== {p} =========== \n')
    # res+=f"{p}'\n'"
    res.append(p)
res[:]
res[-1]
type(res[-1])
cps("\n".join(res))
cps("\n\n".join(res))
def ins(x):
  return f{'"insert into {x} "'}
  return f'"insert into {x} "'
ins('table')
cps(ins('table'))
cps(ins(oq))
    return '"""'
ins
ins()
ins(2)
    return f'""{x}"'
  return f'"insert into "{x}" "'
ins("xxxxxxxxxx")
ins(result[0])
str(result[0])
type(ins(result[0]))
"".join(result[0])
ins(" ".join(result[0]))
fi=ins(" ".join(result[0]))
cps(fi)
  print(type(a))
  for b in a:
    print(type(b))
  print('='*30)
[c for c in [a for a in result]]
[d for d in [c for c in [a for a in result]]]
    for b in a:
        print(b)
oq="SELECT tbl_name, sql FROM sqlite_master where name like 'poll%' or name like 'son%' and type='table';"
nq="INSERT INTO song3 (name) values ('frumious')"
result=cursor.execute(nq)
  return f"INSERT INTO son3 (name) values('{x}')"
ins("bandersnatch")
result=cursor.execute(ins('brillig'))
  return f"INSERT INTO song3 (name) values('{x}')"
data = open('alb.txt', 'r', encoding='utf-8').read()
data[-1:]
data[-3:]
data.split('\n').strip()
data.strip().split('\n')
data=data.strip().split('\n')
for it in data:
  print(ins(it))
  cursor.execute(ins(it))
data=open('song.txt', 'r', encoding='utf-8').read().strip()
data=open('song.txt', 'r', encoding='utf-8').read().strip().split('\n')
result=cursor.execute(oq)
[n for n in [a for a in result]]
tt=[a for a in result]
tt
tt=[n for n in [a for a in result]]
type(tt[1])
for a in tt:
[b for b in [a for a in tt]]
[c for c in [b for b in [a for a in tt]]]
  return f"INSERT INTO polls_xsongs (schema_text) values('{x}')"
from polls.models import xSongs
dir(xSongs)
xSongs.objects
[a for a in xSongs.objects]
dir(xSongs.objects)
zdir(xSongs.objects)
xSongs.objects.all()
xSongs.objects.all()[1]
from polls.models import Question
latest_question_list = Question.objects.order_by('-pub_date')[:5]
latest_question_list
context = {'latest_question_list': latest_question_list}
context
s=xSongs.all()
s=xSongs.objects.all()
con={'ls',s}
zdir(con)
print(con)
con['ls']
dir(latest_question_list)
[a for a in latest_question_list]
[a for a in con]
[a for a in con][:3]
s=xSongs.objects.all()[:3]
con={'ls':s}
latest_question_list = Question.objects.all()
vv=xSongs.objects.all()
for a in latest_question_list:
for a in vv:
vv[1]
dir(vv[1])
zdir(vv[1])
zdir(latest_question_list[1])
vv[1].schema_text
for a in con:
type(con)
    print(a.id)
dict(s)
type(s)
{'ls',x)
{'ls',x}
{'ls',s}
data=open('th', 'r'.read().strip().split('\n'))
data=open('th', 'r').read().strip().split('\n'))
data=open('th', 'r').read().strip().split('\n')
re.sub(r'\d','','123ac')
re.sub(r'\d{2}','','123ac')
re.sub(r'\d{2}_','','123ac')
re.sub(r'\d{2}_','',data[0])
[re.sub(r'\d{2}_','',a) for a in data]
["mv " + re.sub(r'\d{2}_','',a) for a in data]
["mv "+ a + re.sub(r'\d{2}_','',a) for a in data]
["mv "+ a +" " + re.sub(r'\d{2}_','',a) for a in data]
[f"mv "+ a +" " + re.sub(r'\d{2}_','',a) for a in data]
[f"mv {a} "  + re.sub(r'\d{2}_','',a) for a in data]
[f"mv {a} .."  + re.sub(r'\d{2}_','',a) for a in data]
[f"mv {a} ..\\"  + re.sub(r'\d{2}_','',a) for a in data]
[f"mv {a} ..\"  + re.sub(r'\d{2}_','',a) for a in data]
[f"mv {a} ..\\"  + re.sub(r'\d{2}_','',a) for a in data][0]
cps([f"mv {a} ..\\"  + re.sub(r'\d{2}_','',a) for a in data][0])
good=[f"mv {a} ..\\"  + re.sub(r'\d{2}_','',a) for a in data][0]
good
good=[f"mv {a} ..\\"  + re.sub(r'\d{2}_','',a) for a in data]
[list(map(str,a)) for a in good]
[a for a in good]
nst=''
for a in good:
    nst+=a+'\n'
nst
print(nst)
cps(nst)
#good=[f"mv {a} ..\\"  + re.sub(r'\d{2}_','',a) for a in data]
data[:3]
good[:3]
cps(good[0])
good=[f"mv {a} ../"  + re.sub(r'\d{2}_','',a) for a in data]
sc=''
for a in good[:3]:
    sc+=f"{a}\n"
sc
cps(sc)
mv 02_Someone_To_Watch_Over_Me.mp3 ../Someone_To_Watch_Over_Me.mp3
mv 03_Skylark.mp3 ../Skylark.mp3
mv 03_You_Don_t_Know_What_Love_Is.mp3 ../You_Don_t_Know_What_Love_Is.mp3
gg=(a for a in [1,3,4])
gg()
def gn():
    n=1
    while n<=4:
        yield n
aa=gn()
next(aa)
num='1 – one
2 – two
3 – three
4 – four
5 – five
6 – six
7 – seven
8 – eight
9 – nine
10 – ten
11 – eleven
12 – twelve
13 – thirteen
14 – fourteen
15 – fifteen
16 – sixteen
17 – seventeen
18 – eighteen
19 – nineteen
20 – twenty'
num='''1 – one
20 – twenty'''
num=num.split('\n')
re.sub(r'\d+-\x','',num[0])
re.sub(r'\d+-\s','',num[0])
num[0]
re.sub(r'\d+ - ','',num[0])
re.sub(r'\d - ','',num[0])
re.sub(r'\d','',num[0])
re.sub(r'\d\s','',num[0])
re.sub(r'\d\s-','',num[0])
re.sub(r'\d – ','',num[0])
[re.sub(r'\d – ','',a) for a in num]
[re.sub(r'\d+ – ','',a) for a in num]
numc=[re.sub(r'\d+ – ','',a) for a in num]
re.sub(r'\d\s? ','',num[0])
re.sub(r'\d\s. ','',num[0])
re.sub(r'\d . ','',num[0])
numc=[re.sub(r'\d . ','',a) for a in num]
numc
from num2words import num2words
print(num2words(62))
print(num2words(1))
print(num2words(1)+'.mp3')
for a,b in enumerate(data[3:]):
for a,b in enumerate(data[:3]):
    print(b,a)
    print(b,num2words(a))
    print(b,num2words(a)+'.mp3')
    print(f"{b,num2words(a)}.mp3")
    print(f"{b} {num2words(a)}.mp3")
    print(f"mv {b} ../{num2words(a)}.mp3")
    print(f"cp {b} ../{num2words(a)}.mp3")
st=''
    fst="cp {b} ../vlc/{num2words(a)}.mp3\n"
    st+=fst
cps(st)
    fst=f"cp {b} ../vlc/{num2words(a)}.mp3\n"
os.chdir('vlc')
data=open('allMps.txt','r').read().strip().split('\n')
data[:10]
[a for a in data if 'spoken' not in a]
music=[a for a in data if 'spoken' not in a]
len(music)
music[:4]
data=open('allMpsN.txt','r').read().strip().split('\n')
music[1]
music[1].replace("/","xx")
music[1].replace("/mnt/c","")
music[1].replace("/mnt/c","file:///C:/")
music[1].replace("/mnt/c","file:///C:")
music[8].replace("/mnt/c","file:///C:")
newl=[]
for a in music[10:20]:
    new=a.replace("/mnt/c","file:///C:")
    newl.append(new)
newl
cps(newl[6])
vlist=''
    vlist+=new+'\n'
vlist
print(vlist)
music
random.shuffle(music)
for a in music[200:]:
music[30:]
cps(vlist)
data=open('/mnt/c/projects/music/vlc/allMps.txt','r').read().strip().split('\n')
with open('/mnt/c/you/playlist.m3u', 'w') as pl:
    pl.write(vlist)
os.system("echo Hello from the other side!")
os.system("fd")
os.system("fd -a")
dd=r'/mnt/c/projects'
os.chdir(dd)
os.chdir('junk')
os.scandir('.')[0]
bb=[a for a in os.scandir('.')][0]
zdir(bb)
bb.name
bb.stat
bb.stat()
zdir(bb.stat())
bb.stat.st_ctime
zdir(bb.stat('st_ctime'))
bb=[a for a in os.scandir('.')]
bb=[a.name for a in os.scandir('.')]
bb.st_ctime
home_dir = os.system("cd ~")
print("`cd ~` ran with exit code %d" % home_dir)
home_dir = os.system("cd ~; ls")
print("`cd ~` ran with exit cde %d" % home_dir)
zdir(list_files)
list_files.stdout
list_files.args
useless_cat_call = subprocess.run(["cat"], 
                                  stdout=subprocess.PIPE, 
                                  text=True, 
                                  input="Hello from the other side")
useless_cat_call
zdir(useless_cat_call)
useless_cat_call.stdout
print(useless_cat_call.stdout)  # Hello from the other side
subprocess.run("xx.sh")
print('start')
print('Finish')
fc = subprocess.run(["false"], check=True)
print("The exit code was: %d" % failed_command.returncode)
fc = subprocess.run(["ls"], check=True)
print("The exit code was: %d" % fc.returncode)
fc = subprocess.run(["allMps"], check=True)
data.now()
date.now()
datetime.date.today()
datetime.date.now()
datetime.datetime.now()
zdir(datetime)
zdir(datetime.date)
zdir(today)
to=datetime.datetime.now()
zdir(to)
to.month
to.microsecond
to.toordinal
to.toordinal()
zdir(datetime.now)
zdir(datetime.now())
aa=zdir(datetime)
datetime.MAXYEAR
datetime.date
datetime.UTC
datetime.now()
ins("datime.now")
dn=datetime.now()
dn
dn.hour
dn.min
dn.minute
dn.microsecond
dn.microsecond[1]
str(dn.microsecond)[:-3]
str(dn.microsecond)[-3:]
to=datetime.now()
to.weekday
to.weekday()
zdir(to.strftime)
zdir(datetime.strftime)
to.strftime('%A'))
to.strftime('%A')
to.day
fn=f'{to.strftime('%A')-to.day}'
fn=f'{to.strftime('%A')}-{to.day}'
fn=f"{to.strftime('%A')}-{to.day}"
fn
fn=f"{to.strftime('%M')}-{to.day}"
fn=f"{to.strftime('%Month')}-{to.day}"
to.strftime("%m/%d/%Y, %H:%M:%S")
fn=f"{to.strftime('%b')}-{to.day}"
fn=f"{to.strftime('%b%s')}-{to.day}"
fn=f"{to.strftime('%b-%s')}-{to.day}"
to
fn=f"{to.strftime('%b')}-{to.day}-{to.microsecond}"
writeF=f"'/mnt/c/you/{fn}.m3u"
writeF
writeF=f"/mnt/c/you/{fn}.m3u"
with open(writeF, 'w') as pl:
    pl.write('vlist')
print("The AllMps exit code was: %d" % fc.returncode)
#make up string name for output playist
#just for checking
print(f"The AllMps exit code was:  {fc.returncode} and file name is {fn} " )
# filter out dir spoken
# fc = subprocess.run(["allMps"], check=True)
# #just for checking
# print(f"The AllMps exit code was:  {fc.returncode} and file name is {fn} " )
#todo why subprocess fs up
ss='1:45'
to='1:59'
song ='rr.mp4'
songCut=f'{song}_{ss}-{to}.mp4'
songCut
def sl(x):
    ret= f"ffmpeg -i {song} -ss {ss} -to {to} -vcodec libx264 -acodec copy {songCut}"
sl(song)
ss=sl(song)
cps(ss)
mys=sl(song)
mys
cps(mys)
ss.replace(':','-')
songCut=f'{song}_{ss.replace(':','-')}-{to.replace(':','-')}.mp4'
songCut=f'{song}_{ss.replace('\:','-')}-{to.replace(':','-')}.mp4'
songCut=f"{song}_{ss.replace(':','-')}-{to.replace(':','-')}.mp4"
songCut=f"{song.replace('.mp4','')}_{ss.replace(':','-')}-{to.replace(':','-')}.mp4"
retS=sl(song)
retS
cps(sl(song))
ss='1:09'
to='1:25'
ss='1:10'
with open('cutter', 'w') as cut:
    cut.write(sl(song))
# ffmpeg -i LetBe.mp3 -ss 1:45 -to 1:59 -vcodec libx264 -acodec copy LetBe_cut.mp3
with open('ffm.py') as file:
    input = file.read()
input
import cv2
import matplotlib.pyplot as plt
img = cv2.imread('s.jpg')
resize_img = cv2.resize(img, new_size)
h, w, c = img.shape
print(f"Height and width of original image: {h}, {w}" )
new_size = (50, 40) # new_size=(width, height)
print(f"New height and width: {new_size[1]}, {new_size[0]}" )
zdir(resize_img)
resize_img.tofile('jj')
h
status = cv2.imwrite('g.jpg',img)
status = cv2.imwrite('g.jpg',resize_img)
import num2words
num2words(3)
fil=[a.name for a in os.scandir('.')]
[(a,b) for a in enumerate(fil)]
[(a,b) for a,b in enumerate(fil)]
[(num2words(a),b) for a,b in enumerate(fil)]
[(num2words(a)+'.jpg),b) for a,b in enumerate(fil)]
[(num2words(a)+'.jpg'),b) for a,b in enumerate(fil)]
[(num2words(a)+'.jpg',b) for a,b in enumerate(fil)]
[list(map(str,(num2words(a)+'.jpg',b)) for a,b in enumerate(fil)]]
[list(map(str,(num2words(a)+'.jpg',b))) for a,b in enumerate(fil)]
[list(map(str,(num2words(a)+'.jpg',b))) for b,a in enumerate(fil)]
(2,3)[0]
(2,3)[:-1]
(2,3)[::-1]
[(num2words(a),b)[::-1} for a,b in enumerate(fil)]
[(num2words(a),b)[::-1] for a,b in enumerate(fil)]
px=[(num2words(a),b)[::-1] for a,b in enumerate(fil)]
px[1]
px[1][1]
px[1][0]
fil=[a.name for a in os.scandir('.') if a.name.endswith(.jpg)]
fil=[a.name for a in os.scandir('.') if a.name.endswith('.jpg')]
fil
px
[[a,b] for a,b in px]
[list(map(str,[a,b])) for a,b in px]
[list(map(str,["mv "+a,b])) for a,b in px]
mx=[list(map(str,["mv "+a,b])) for a,b in px]
[" ".join(a) for a in mx]
[" ".join(a) for a in mx][0]
'\n'.join([" ".join(a) for a in mx])
cps('\n'.join([" ".join(a) for a in mx]))
mx
fil=[a.name for a in os.scandir('.') if not a.name.endswith('.py')]
for a in fil:
    os.rename(a, a+'.jpg')
cps(fil[1])
#data=open('/mnt/c/projects/music/vlc/allMps.txt','r').read().strip().split('\n')
data=open('lightbox.html).read().strip())
data=open('lightbox.html').read().strip())
data=open('lightbox.html').read().strip()
re.sub(r'"src=.*",'',data)
re.sub(r'"JIM",'','"JIM")
re.sub(r'i','','jim')
re.sub(r'"j','','"jim')
re.sub(r'"j.*','','"jim')
re.sub(r'"j.*','','"j=im')
re.sub(r'"j=','','"j=im')
re.sub(r'"src=.*"','',data)
cps(data)
data=open('lightbox.html').read().strip().split('\n')
data[1]
data[1:7]
"\n".join(data[1:7])
print("\n".join(data[1:7]))
a for a in data:
    if 'img' in a:
for a,b  in enumerate(data):
    if 'img' in b:
        print(a,b)
data[151]
for a,b  in enumerate(data[:140]):
for a,b  in enumerate(data[140:]):
data[140][11]
data[140:][11]
    if 'class="row">' in b:
"\n".join(data)
cps("\n".join(data))
data[3:]
data[0]=data[0].replace'html','test')
data[0]=data[0].replace('html','test')
data2=data
    if a not in data2:
[a for a in data if [a not in data2]]
data[4:]
data[0]
data[2]
data[2:]
data[:2]
data[:4]
print("\n".join(data))
all="\n".join(data)
all
re.findall(r'a',all)
re.findall(r'jpg',all)
re.match(r'jpg',all)
rr=re.match(r'jpg',all)
rr=re.search(r'jpg',all)
all[2227]
all[2227:230]
all[2227:2230]
re.findall(r'body',all)
re.findall(r'<body>',all)
re.findall(r'<\\body>',all)
re.findall(r'<\body>',all)
re.findall(r'</body>',all)
m = re.search('(?<=abc)def', 'abcdef')
pattern = re.compile("d")
pattern.search("dog")     # Match at index 0
pattern.search("dog",3)     # Match at index 0
pattern.search("dog",30)     # Match at index 0
pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".
pattern.search("dog", 2)  # No match; search doesn't include the "d"
pattern.search("dog", 0)  # No match; search doesn't include the "d"
pattern.search("dog",0, 4)  # No match; search doesn't include the "d"
text = "He was carefully disguised but captured quickly by police."
for m in re.finditer(r"\w+ly\b", text):
    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
for m in re.finditer(r"body", all):
all[100]
    print(f'{m.start()} - {m.end()}: {m.group(0)}')
    # print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
[a for a in all]
type(all)
for m in re.finditer(r"forty-seven", all):
open('xx.html', 'a', encoding='utf-8').write(all)
re.sub(r'forty-seven','thirty',all)
re.match(r'forty-seven',all)
re.match(r'forty',all)
re.match(r'seven',all)
re.findall(r'seven',all)
re.findall(r'forty-seven',all)
re.sub('forty-seven','thirty',all)
fs=re.sub('forty-seven','thirty',all)
fs
open('xx.html', 'a', encoding='utf-8').write(fs)
fs=re.sub('forty-seven','one',all)
re.findall(r'forty-seven',fs)
re.findall(r'one',fs)
open('xx.html', 'a', encoding='utf-8').write('wha')
open('xx.html', 'w', encoding='utf-8').write(fs)
def col(x):
mydiv='''
    <div class="column">
      <p>{x}</p>
      <img src="forty-six.jpg" style="width:100%" onclick="openModal();currentSlide(1)" class="hover-shadow cursor">
    </div>
ret mydiv
    mydiv='''
        <div class="column">
        <p>{x}</p>
        <img src="forty-six.jpg" style="width:100%" onclick="openModal();currentSlide(1)" class="hover-shadow cursor">
        </div>
    ret mydiv
    return mydiv
col('one.jpg')
    mydiv=f'''
        <img src={x} style="width:100%" onclick="openModal();currentSlide(1)" class="hover-shadow cursor">
col('four.jpg')
        <img src="{x}" style="width:100%" onclick="openModal();currentSlide(1)" class="hover-shadow cursor">
cps(col('four.jpg'))
cps(col('thirteen.jpg'))
        <div class="w-full rounded">
            <img src="{x}"
                alt="image">
    <h4>{x}</h4>
cps(col('fourteen.jpg'))
            <h4>{x}</h4>
            <img src="{x}" alt="image">
cps(col('nineteen.jpg'))
fil=[a.name for a in os.scandir('.') if not a.name.endswith('.jpg')]
fil=[a.name for a in os.scandir('.') if  a.name.endswith('.jpg')]
sorted(fil)
col(fil[1]]
col(fil[1])
ht=''
    ht+=col(a)
ht
cps(ht)
statinfo = os.stat('one.jpg')
zdir(statinfo)
statinfo.st_mtime()
statinfo.st_mtime
do=datetime.fromtimestamp(statinfo.st_mtime)
do
do.strftime( "%d-%m-%Y %H:%M:%S" )
si=['count', 'index', 'n_fields', 'n_sequence_fields', 'n_unnamed_fields', 'st_atime', 'st_atime_ns', 'st_blksize', 'st_blocks', 'st_ctime', 'st_ctime_ns', 'st_dev', 'st_gid', 'st_ino', 'st_mode', 'st_mtime', 'st_mtime_ns', 'st_nlink', 'st_rdev', 'st_size', 'st_uid']
si[1]
statinfo.si[1]
statinfo.count
statinfo.count()
statinfo.st_blksize
si=[a for a in si if a.startswith('st')]
s2=si[1]
statinfo.s2
s2
print(statinfo)
[a for a in statinfo]
statinfo
statinfo.st_atime
md('one.jpg')
    md(a)
    print(md(a))
    print(a,md(a))
dates=[]
    dates.append(a,md(a))
    dates.append(list(a,md(a)))
    dates.append([a,md(a)])
dates
inputDateList = ['06-2014', '08-2020', '4-2003', '04-2005', '10-2002', '12-2021']
# sorting the input list by formatting each date using the strptime() function
inputDateList.sort(key=lambda date: datetime.strptime(date, "%m-%Y"))
# input list of date strings
# Printing the input list after sorting
print("The input list of date strings after sorting:\n", inputDateList)
    dates.append([md(a)])
dates.sort(key=lambda date: datetime.strptime(date, "%m-%Y"))
dates.sort(key=lambda date: datetime.datetime.strptime(date, "%m-%Y"))
map(str,dates).sort(key=lambda date: datetime.datetime.strptime(date, "%m-%Y"))
dates[0]
[map(str,a) for a in dates]
[str(map(str,a)) for a in dates]
[list(map(str,a)) for a in dates]
",".join(dates)
type(dates)
[str(a) for a in dates]
[''.join(a) for a in dates]
jj=[''.join(a) for a in dates]
jj.sort(key=lambda date: datetime.strptime(date, "%m-%Y"))
jj.sort(key=lambda date: datetime.datetime.strptime(date, "%m-%Y"))
jj[4:]
jj[:4]
dates.sort(key=lambda date: datetime.strptime(date, "%d-%m-%Y %H:%M:%S"))
dates.sort(key=lambda date: datetime.datetime.strptime(date, "%d-%m-%Y %H:%M:%S"))
dates[:8]
[a[1] for a  in dates]
[a[1] for a  in dates].sort(key=lambda date: datetime.strptime(date, "%d-%m-%Y %H:%M:%S"))
nn=[a[1] for a  in dates].sort(key=lambda date: datetime.strptime(date, "%d-%m-%Y %H:%M:%S"))
nn=[a[1] for a  in dates]
nn.sort(key=lambda date: datetime.strptime(date, "%d-%m-%Y %H:%M:%S"))
prin(nn)
multi_list = [["a", 2], ["b", 1], ["c", 0]]
def jr(x):
  return x[1]
sml = sorted(multi_list, key=jr(x))
print(sml)
sml = sorted(multi_list, key=lambda x: jr(x))
dates2=["".join(a) for a in dates]
dates2
dates2=[",".join(a) for a in dates]
sorted(dates)
sorted(dates,key=lamda x: jr(x))
    return datetime.strptime(x[1], "%d-%m-%Y %H:%M:%S")
sorted(dates,key=lambda x: jr(x))
newD=sorted(dates,key=lambda x: jr(x))
print(newD)
newd
[a[1] for a  in newD]
[a[0] for a  in newD]
print([a[0] for a  in newD])
cps(newd[0])
for a in newd:
    print("".join(a))
    print(" - ".join(a))
    print(f'<div class="justify-center border-2 p-2 text-xs">{a}</div>')
    print(f'<div class="justify-center border-2 p-2 text-xs">{" - ".join(a)}</div>')
neh=''
    neh+=f'<div class="justify-center border-2 p-2 text-xs">{" - ".join(a)}</div>'
cps(neh)
old='eight.jpg eleven.jpg five.jpg four.jpg fourteen.jpg nine.jpg one.jpg seven.jpg six.jpg ten.jpg thirteen.jpg twelve.jpg three.jpg zero.jpg two.jpg'.split()
old
def ol(a)
     return f'''
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
            <div class="flex justify-center text-xs border-2 border-gray-300 rounded-xl p-6 bg-gray-100"><img
                    src="{a}" alt="" srcset=""></div>
def ol(a):
ol(old[1])
ppp=''
for a in old:
    ppp+=ol(a)
cps(ppp)
    <div class="tile bg-teal-500">
        <h1 class="tile-marker">ONE </h1>
        <img src="{x}" alt="">
    return f'''
        <h1 class="tile-marker">{a} </h1>
map(col,old)
[a for a map(col,old)]
[a for a in map(col,old)]
"".join([a for a in map(col,old)])
cps("".join([a for a in map(col,old)]))
ins(col)
        <h1 class="tile-marker">{x} </h1>
[ a in os.scandir('.') if a.name.endswith('.jpg')]
print(fil)
rend(newd)
rend("".join(newd))
newd[4:]
newd[:4]
[[a,b] for a,b in enumerate(newd)]
[[a,b] for a,b in enumerate(dates)]
print(newd)
[[a,b] for a,b in enumerate(newd)][:3]
[[a,b] for a,b in enumerate(newd)][:6]
["".join([a,b]) for a,b in enumerate(newd)][:6]
enewd
enewj=["".join(a) for a in enewd]
enewd[0]
"".join(enewd[0])
enewd=[[str(a),b] for a,b in enumerate(newd)][:6]
enewd[0][1]
"".join(enewd[0][1])
" ".join(enewd[0][1])
", ".join(enewd[0][1])
[(a[0],", ".join(a[1])) for a in enewd]
[", ".join(b) for b in [(a[0],", ".join(a[1])) for a in enewd]]
final
rend(final)
from exif import Image
with open("five.jpg", "rb") as palm_1_file:
    palm_1_image = Image(palm_1_file)
images = [palm_1_image]
images
zdir(images)
zdir(images[0])
i=image[0]
i=images[0]
zdir(i)
i.contrast
i.datetime
ps
[f[0] for f in px]
os.stat('PXL_20230411_092918542.jpg')
os.stat('PXL_20230411_092918542.jpg').st_size
md('PXL_20230411_092918542.jpg')
[md(f[0]) for f in px]
[[f[1],md(f[0])] for f in px]
[", ".join([f[1],md(f[0])]) for f in px]
cps("\n".join([", ".join([f[1],md(f[0])]) for f in px]))
[[a,b][::-1] for a,b in enumerate(newd)]
[[a,b.split(',')[0]][::-1] for a,b in enumerate(newd)]
for a,b  in enumerate(newd):
newd[0]
newd[0].split(',')
newd[0][0]
    print(a,b[0])
    print(b[0],a)
    print(b[0],num2words(a))
    print(b[0],num2words(a)+'.mp3')
    os.rename(b[0],num2words(a)+'mp3')
    return datetime.strptime(x[1], "%m-%d-%Y %H:%M:%S")
newd=sorted(dates,key=lambda x: jr(x))
def img(x):
    ret=f'"<img src=../{x}"'
[a[0] for a  in newd]
[map(img,a[0]) for a  in newd]
[list(map(img,a[0])) for a  in newd]
map(img,'x')
[a for a in map(img,'x')]
ins(img)
    return=f'"<img src=../{x}"'
    return f'"<img src=../{x}"'
[list(map(img,a[0])] for a  in newd]
img('two')
newd[1]
[a for a  in newd]
img('forty-six.jpg')
    print(img(a[0]))
    ht+=img(a[0])
    return f'"<img src=../{x}>\n"'
print(ht)
    return f'<img src=../"{x}">\n'
    return f'<img src="../{x}">\n'
    # print(img(a[0]))
    <img src="../{x}">\n'
xx='eight.jpg'
x='eight.jpg'
    print(b[0],num2words(a)+'.jpg')
    os.rename(b[0],num2words(a)+'.jpg')
#sort array
from PIL import Image, ImageEnhance
im = Image.open('five.jpg')
im = im.rotate(90, expand=True)
im.save('five.jpg')
im = Image.open('six.jpg')
im = im.rotate(180, expand=True)
im.save('six.jpg')
im = Image.open('seven.jpg')
im.save('seven.jpg')
im = Image.open('eleven.jpg')
im.save('eleven.jpg')
im = Image.open('ten.jpg')
im = im.rotate(-90, expand=True)
im.save('ten.jpg')
i 191
im = Image.open('twelve.jpg')
im.save('twelve.jpg')
im = Image.open('fourteen.jpg')
im.save('fourteen.jpg')
zz=[a for a in range(10)]
zz[:3]
zz[3:]
zz[:-1]
zz[:1]
zz[1:3]
aa[::-1]
zz[::-1]
map(str,zz)
[a for a in map(str,zz)]
[a*3 for a in map(str,zz)]
sorted(zz)
sorted(zz, reverse=True)
def ff(x):
    return f'file is {x} '
[a for a in map(ff,zz)]
[a.name for a in os.scandir('.')][3:]
[a.name for a in os.scandir('.')][1]
[a.name for a in os.scandir('.')][:3]
[a.name for a in os.scandir('.')][:3][2]
ff=[a.name for a in os.scandir('.')][:3][2]
os.stat(ff)
o=os.stat(ff)
o.st_atime
o.st_atime.strftime( "%d-%m-%Y %H:%M:%S" )
datetime.fromtimestamp(os.st_atime)
datetime.fromtimestamp(o.st_atime)
datetime.fromtimestamp(o.st_atime).strftime('%Y-%m-%d %H:%M:%S')
datetime.fromtimestamp(o.st_atime).strftime('%M-%y-%d %H:%M:%S')
datetime.fromtimestamp(o.st_atime).strftime('%d-%y %H:%M:%S')
datetime.fromtimestamp(o.st_atime).strftime('%M-%d-%y %H:%M:%S')
datetime.fromtimestamp(o.st_atime).strftime('%m-%d-%y %H:%M:%S')
o
def tt(x)
def tt(x):
    return datetime.fromtimestamp(x.st_atime).strftime('%m-%d-%y %H:%M:%S')
tt(o)
fil=[a.name for a in os.scandir('.') if a.name.endswith('.mp4')]
[tt(os.stat(a)) for a in fil]
[[a,tt(os.stat(a))] for a in fil]
newd=[[a,tt(os.stat(a))] for a in fil]
dates=[[a,tt(os.stat(a))] for a in fil]
    return datetime.strptime(x[1], "%m-%D-%Y %H:%M:%S")
    return datetime.strptime(x[1], "%m-%d-%y %H:%M:%S")
a=ws('mozart')
a=wss('mozart')
wss('Death of Wolfgang Amadeus Mozart')
aa='''On 5 December 1791, the composer Wolfgang Amadeus Mozart died at his home in
Vienna, Austria at the age of 35. The circumstances of his death have attracted
much research and speculation. The principal sources of contention are:  Whether Mozart declined
gradually, experiencing great fear and sadness, or whether he was fundamentally in good spirits
toward the end of his life, then felled by a relatively sudden illness; Whether
the cause of his death was from disease or poisoning; Whether his funeral arrangements
were the normal procedures for his day, or whether they were of a disrespectful
nature.There is a range of views on each of these points, many of which
have varied radically over time.'''
'x' in aa
'xx' in aa
aa.count('1')
aa.count('at')
print('/n'.join(newd))
[" - ".join(a) for a in newd]
print([" - ".join(a) for a in newd])
print("\n".join([" - ".join(a) for a in newd]))
x = 9
id(x)
    print(id(x))
jr(3)
x = "jim"
filename="x"
a='a'
md(x)
md('x')
a='m'
ev
eval(ev)
ws('berlioz')
wss('berlioz')
gg='''Louis-Hector Berlioz (11 December 1803 – 8 March 1869) was a French Romantic composer
and conductor. His output includes orchestral works such as the Symphonie fantastique and Harold
in Italy, choral pieces including the Requiem and L'Enfance du Christ, his three operas
Benvenuto Cellini, Les Troyens and Béatrice et Bénédict, and works of hybrid genres such
as the "dramatic symphony" Roméo et Juliette and the "dramatic legend" La Damnation de
Faust. The elder son of a provincial doctor, Berlioz was expected to follow his
father into medicine, and he attended a Parisian medical college before defying his family
by taking up music as a profession. His independence of mind and refusal to
follow traditional rules and formulas put him at odds with the conservative musical establishment
of Paris. He briefly moderated his style sufficiently to win France's premier music prize
– the Prix de Rome – in 1830, but he learned little from the
academics of the Paris Conservatoire. Opinion was divided for many years between those who
thought him an original genius and those who viewed his music as lacking in
form and coherence. At the age of twenty-four Berlioz fell in love with the
Irish Shakespearean actress Harriet Smithson, and he pursued her obsessively until she finally accepted
him seven years later. Their marriage was happy at first but eventually foundered. Harriet
inspired his first major success, the Symphonie fantastique, in which an idealised depiction of
her occurs throughout. Berlioz completed three operas, the first of which, Benvenuto Cellini, was
an outright failure. The second, the huge epic Les Troyens (The Trojans), was so
large in scale that it was never staged in its entirety during his lifetime.
His last opera, Béatrice et Bénédict – based on Shakespeare's comedy Much Ado About
Nothing – was a success at its premiere but did not enter the regular
operatic repertoire. Meeting only occasional success in France as a composer, Berlioz increasingly turned
to conducting, in which he gained an international reputation. He was highly regarded in
Germany, Britain and Russia both as a composer and as a conductor. To supplement
his earnings he wrote musical journalism throughout much of his career; some of it
has been preserved in book form, including his Treatise on Instrumentation (1844), which was
influential in the 19th and 20th centuries. Berlioz died in Paris at the age'''
re.findall(r'one',gg)
re.findall(r'o',gg)
re.match(r'jpg','asdfajpg')
re.search(r'jpg','asdfajpg')
re.match.groupdict(r'jpg','asdfajpg')
[a for a in dd if re.search('q',a)]
x='x'
fil=[a.name for a in os.scandir('.') if re.search(x,a)]
fil=[a.name for a in os.scandir('.') if re.search('x',a)]
fil=[a.name for a in os.scandir('.') if 'x' in a]
fil=[a.name for a in os.scandir('.') if 'x' in a.name]
fil=[a.name for a in os.scandir('.') if '' in a.name]
"".join(enewd)
"".join(newd)
rend("\n".join([" - ".join(a) for a in newd]))
rend([" - ".join(a) for a in newd])
def q(x):
  return    ''''  <div class="w-full p-2 rounded lg:w-1/3">
            <h2>images/six.jpg</h2>
            <img class="my" src="images/{x}.jpg">
''''
  return    '''  <div class="w-full p-2 rounded lg:w-1/3">
q('rou')
cps(q('nine'))
  return   f'''  <div class="w-full p-2 rounded lg:w-1/3">
            <h2>images/{x}.jpg</h2>
[q(a.name) for a in os.scandir('.')]
"".join([q(a.name) for a in os.scandir('.')])
cps("".join([q(a.name) for a in os.scandir('.')]))
return   f'''  <div class="w-full p-2 rounded lg:w-1/3">
          <h2>images/{x}</h2>
          <img class="my" src="images/{x}">
      </div>
 '''
   '''
    return f'<img src="{x}" alt="">'
fil=[a.name for a in os.scandir('.') if 'jpg' in a.name] 
[img(a) for a in fil]
"\n".join([img(a) for a in fil])
cps("\n".join([img(a) for a in fil]))
ss='0:00'
to='6:38'
ss.split(':')
ssd=ss.split(':')
ssd[0]*60+ssd[1]
ssd=tt.split(':')
tod=to.split(':')
tod[0]*60+tod[1]
tod
tod[0]
tod[0]*60
int(tod[0])*60
int(ssd[0])*60+int(ssd[1])
int(tod[0])*60+int(tod[1])
def dec(x):
    fd=x.split(':')
    return int(fd[0])*60+int(fd[1])
dec(to)
start=int(ssd[0])*60+int(ssd[1])
finish=int(tod[0])*60+int(tod[1])
song ='Yesterday.mp4'
    ret= f"ffmpeg -i {song} -ss {dec(ss)} -to {dec(to)} -vcodec libx264 -acodec copy {songCut}"
song ='Yesterday.mp3'
print(datetime.time(datetime.now()))
print(datetime.now())
mytime=datetime.now()
mytime
datetime.fromtimestamp(mytime).strftime( "%m-%d-%y %H:%M:%S" )
mytime.strftime( "%m-%d-%y %H:%M:%S" )
mytime=datetime.now().strftime( "%m-%d-%y %H:%M:%S" )
to='0:38'
song='Yesterday.mp3'
son
song
from PIL import Image
image=Image.open('size.jpg')
image.save("image-file-compressed", 
                "JPEG", 
                optimize = True, 
                quality = 10)
os.chdir('Apr17')
re.find('\.*',song)
re.match('\.*',song)
re.search('\.*',song)
ss=re.search('\.*',song)
ss=re.search(r'\.*',song)
re.search(r'\.xx*',song)
re.search(r'\.*',song)
re.search(r'\.*',song).group(0)
re.match(r'\.*',song).group(0)
re.match(r'\.m.*',song).group(0)
re.match(r'\.m.*',song)
re.match(r'm.*',song)
re.match('a','bam')
re.find('i','jim')
re.search('i','jim')
re.search('e',song)
re.search('\.',song)
re.search('\..*',song)
sss=re.search('\..*',song)
sss
print(sss)
sss.match
zdir(sss)
sss.group(0)
sss=re.search('\..*',song).group(0)
re.search('\..*',song).group(0)
re.search('\.m.*',song).group(0)
ext=re.search('\.m.*',song).group(0)
songCut=f"{song.replace(ext,'')}_{ss.replace(':','-')}-{to.replace(':','-')}{ext}"
#copy to clipboard with import
#cps(sl(song))
with open('cutter', 'a') as cut:
    cut.write(f'\n#{mytime}\n{sl(song)}\n')
song='knocking.mp4'
[a.name for a in os.scandir('.') if rematch('jpg',a.name)]
[a.name for a in os.scandir('.') if re.match('jpg',a.name)]
[a.name for a in os.scandir('.') if re.match('x',a.name)]
[a.name for a in os.scandir('.') if re.match('.*',a.name)]
[a.name for a in os.scandir('.') if re.match(r'.*',a.name)]
[a.name for a in os.scandir('.') if re.match(r'.*jpg',a.name)]
[a.name for a in os.scandir('.') if re.search(r'.*jpg',a.name)]
[a.name for a in os.scandir('.') if re.search(r'jpg',a.name)]
fil=[a.name for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil[1]
os.stat(fil[1])
os.stat(fil[1]).st_matime
os.stat(fil[1]).st_mtime
os.stat(fil[1]).st_mtime.strftime( "%m-%d-%y %H:%M:%S" )
datetime.fromtimestamp(os.stat(fil[1]))
datetime.fromtimestamp(os.stat(fil[1]).st_mtime)
[datetime.fromtimestamp(os.stat(a).st_mtime) for a in fil]
tfil=[datetime.fromtimestamp(os.stat(a).st_mtime) for a in fil]
tfil
sorted(tfil)
tfil=[[a,datetime.fromtimestamp(os.stat(a).st_mtime)] for a in fil]
tfil=[[a,datetime.fromtimestamp(os.stat(a).st_atime)] for a in fil]
#newd=sorted(dates,key=lambda x: format_date(x))
sorted(tfil, key=lambda x: x[1])
from exif import Image as ExifImage
with open('PXL_20230417_075419291.jpg','rb') as ff:
    ei=ExifImage(ff)
zdir(ei)
ei.datetime
ei.artist
vars(ei)
ei.__dict__
print(vars(ei))
x=zdir(ei)
ei.image_height
ei.list_all
ei.list_all()
print(ei.list_all())
ei.datetime_original
x=ei.list_all()
[a for a in x if re.search('date',a)]
for a in tfil:
  print(a[0])
open('PXL_20230417_075419291.jpg','rb') as ff
open('PXL_20230417_075419291.jpg','rb') ff
ff=open('PXL_20230417_075419291.jpg','rb') 
dir(ExifImage(ff))
print(dir(ExifImage(ff)))
ff=open('PXL_20230417_075419291.jpg','rb')
kk=dir(ExifImage(ff))
cps(kk)
ExifImage(ff).datetime
ff.close
ff.close()
for a in tfils:
    with open(a[0],'rb') as ff:
        print(f'{a[0]} {ExifImage(a[0]).datetime}')
tfils=sorted(tfil, key=lambda x: x[1])
fdates=[]
        inter=f'{a[0]} {ExifImage(a[0]).datetime}'
        print(inter)
        fdates.append(inter)
fdates
fdates[1]
        inter=f'{a[0]}, {ExifImage(a[0]).datetime}'
fdates=[1]
fdates[1].split(',')
[a.split(',') for a in fdates]
sp=[a.split(',') for a in fdates]
sorted(sp)
sorted(sp, key=lambda x: x[1])
final=sorted(sp, key=lambda x: x[1])       
from PIL import Image as PillowImage
    ret=f'''
    <h2>images/{x}</h2>
    <div class="my p-4 m-4"><img src="images/{x}" alt=""></div>
final[0][0]
img(final[0][0])
cps(img(final[0][0]))
    <p>images/{x}</p>
    <div class="my p-4 m-4"><p>images/{x}</p><img src="images/{x}" alt=""></div>
    <div class="my p-4 m-4"><p class="text-xs">images/{x}</p><img src="{x}" alt=""></div>
cps(img(final[1][0]))
for a in final:
    img(a[0])
htm=''
    htm+=img(a[0])
cps(htm)
[[a,b] for a,b in enumerate(final)]
        inter=f'{a[0]},{ExifImage(a[0]).datetime}'
final[8]
img(final[8][0])
cps(img(final[8][0]))
def img(x,y):
    <div class="my p-4 m-4"><p class="text-xs">{y} images/{x}</p><img src="{x}" alt=""></div>
    count=0
    htm+=img(a[0],count)
    count+=1
def img(x,y=0):
cps(img(final[8][0]),5)
img(final[8][0],3)
count=0
count
    print(img(a[0], count))
htm
final[8][0]
os.rename(final[8][0],'help_603.jpg')
        # print(inter)
os.rename(final[9][0],'help_604.jpg')
os.rename(final[10][0],'let_605.jpg')
os.rename(final[11][0],'let_606.jpg')
os.rename(final[12][0],'let_607.jpg')
os.rename(final[13][0],'let_608.jpg')
os.rename(final[0][0],'help_371.jpg')
os.rename(final[1][0],'help_372.jpg')
os.rename(final[2][0],'help_373.jpg')
os.rename(final[4][0],'help_374.jpg')
os.rename(final[5][0],'help_375.jpg')
os.rename(final[7][0],'helt1.jpg')
os.rename(final[8][0],'helt2.jpg')
kk=open('index.html', 'r').read()
kk.split('\n')
kk.split('\n')[2]
kk=open('index.html', 'r').readlines()
kk=open('index.html', 'r').readline()
kk2=open('index.html', 'r').readline()
kk2
for a in kk:
type(kk[0])
kk=open('index.html', 'r').readline(10)
kk=open('index.html', 'r').readline(100)
kk=open('index.html', 'r').readline(200)
kk=open('index.html', 'r').readline(700)
kk=open('index.html', 'r').readline(7700)
kk=open('index.html', 'r').readlines(100)
kk=open('index.html', 'r').readlines(100).strip()
kk=open('index.html', 'r').readlines().strip()
kk=open('index.html', 'r').readline().strip()
data=open('index.html', 'r', encoding='utf-8').read().strip().split('\n')
mm='jim steffes'
data=open('index.html', 'r').read()
re.findall('i','jim')
url='https://raw.githubusercontent.com/wither7007/all/main/.bash_history'
print(page_raw)
page_raw.split('\n')
import polars
kk=f'"C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" -ArgumentList @("--no-video-title c:\projects\music\gut\RedRiver.mp4 --start-time 67 --stop-time 88"'
kk=f'"C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList @("--no-video-title c:\projects\music\gut\RedRiver.mp4 --start-time 67 --stop-time 88"'
lin="/mnt/c/projects "
re.sub('mnt','', lin)
re.sub('/mnt/','', lin)
lin="/mnt/c/projects/music/gut "
re.sub('/mnt/c','c:', lin)
p2=re.sub('/','\', p1)
p1=re.sub('/mnt/c','c:', lin)
p2=re.sub('/','\\', p1)
p2=re.sub('\/','\\', p1)
lin="/mnt/c/projects/music/gut"
p1=re.sub('/mnt/c','c:', lin).strip()
p2=re.sub('/',r'\\', p1)
p2
print(p2)
cps(2)
cps(p2)
# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'.'
res = glob.glob(dir_path)
dir_path = '.'
dir_path = '*'
# folder path
dir_path = r'/mnt/c/all'
# to store file names
res = []
# construct path object
d = pathlib.Path(dir_path)
# iterate directory
for entry in d.iterdir():
    # check if it a file
    if entry.is_file():
        res.append(entry)
[a.name for a in os.scandir(dir_path)]
["/".join(dir_path,a.name) for a in os.scandir(dir_path)]
["/".join('a',a.name) for a in os.scandir(dir_path)]
["-".join('a',a.name) for a in os.scandir(dir_path)]
[dir_path+a.name for a in os.scandir(dir_path)]
lin="/mnt/c/projects/music/gut/songs/LetBe.mp3"
song=p2
kk=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList @("--no-video-title {song} --start-time {at} --stop-time {st}"'
at=00
st=15
--no-video-title {song} --start-time {at} --stop-time {st})
ll=f'--no-video-title {song} --start-time {at} --stop-time {st})'
ll=f'"--no-video-title {song} --start-time {at} --stop-time {st})"'
wdir(lin)
song=wdir(lin)
def arg(x):
    ll=f'"--no-video-title {song} --start-time {at} --stop-time {st})"'
    return ll
arg(song)
fil=[a.name for a in os.scandir('.') if re.search(r'\.mp4',a.name)]
[(a,b) for a b in enumerate(fil)]
[(a,b) for a, b in enumerate(fil)]
tfils
num2words(2)
zdir(num2words)
for a, b in enumerate(tfils)
for a, b in enumerate(tfils):
    print(f'{a} {b[0]})
    print(f'{a} {b[0]}')
    print(f'{num2words(a)} {b[0]}')
    print(f'{b} {num2words(a)}')
    print(f'{b[0]} {num2words(a)}')
tfils[:3]
    os.rename(b[0], num2Words(a)+'.mp3')
    print(num2Words(a))
a=4
num2words(a)
    xx=num2Words(a)
    print(xx)
xx=num2Words(a)
    print(num2words(a))
    os.rename(b[0], num2words(a)+'.jpg')
final[-1:]
final[-1:][0]
final[-1:][0][0]
ii=PillowImage.open('eighty-eight.jpg')
zdir(ii)
ii.format
ii.info
ii.height
ii.length
ii.width
kk="format"
ii.kk
[a for a in dir(ii)]
prop=[a for a in dir(ii)]
print(prop)
[a for a in prop if not re.search('^_',a)]
print([a for a in prop if not re.search('^_',a)])
myprop=[a for a in prop if not re.search('^_',a)]
final[1]
final[:1]
final[:0]
final[:3]
fil[-3:]
for a,b  in enumerate(fil):
    os.rename(b,a+'.jpg')
    os.rename(b,str(a)+'.jpg')
ii=PillowImage.open('84.jpg')
prop=[a for a in dir(ii) if not re.search('^_',a)]
prop
prop[-1:]
prop[-1:][0]
type(ii.save)
type(ii.verify)
type(ii.verify)=='method'
type(ii.verify)==method
type(ii.verify) is method
type(ii.verify) is "method"
type(ii.verify) == "method"
callable(ii.verify)
callable(ii.width)
print('Program initiated')
# giving the pause command to terminal using os.system()
os.system('pause')
print('Program Completed')
ii.size
ii.filename
ii=PillowImage.open('0.jpg')
ii.size[0]
ri=ii.rotate(90)
fi.save('rotate')
ri.save('rotate')
ri.save('rotate.jpg')
ri=ii.rotate(-90)
    ii=PillowImage.open(a)        
    print(f"{a} {ii.size}")
size=[]
    size.append(f"{a} - {ii.size}")
size
ii
    # print(f"{a} {ii.size}")
    size.append(a, ii.width)
    size.append(list(a, ii.width))
list(1,2)
    print(f"{a} {ii.width}")
    size.append([a, ii.width])
    if ii.width=4032:
            size.append([a, ii.width])
    if ii.width==4032:
        size.append([a, ii.width])
        ii.rotate(-90)
        ii.save(a)
        kk=ii.rotate(-90)
        kk.save(a)
asongs='''
newman.mp4 160 180
LetBe.mp3 0 12)
asongs
asongs.split('\n')
asongs.strip().split('\n')
bsongs=asongs.strip().split('\n')
bsongs
song='LetBe.mp3'
print(arg(song))
ll=arg(son)
kk=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList @("{ll}"'
ll=arg(song)
kk=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList @({ll}'
    ll=f'"--no-video-title {song} --start-time {at} --stop-time {st}"'
kk=f'start-process "C:\Program Files (x86)\VideoLAN\VLC\\vlc.exe" -ArgumentList @({ll})'
patht=r'c:\projects\music\guts\'
patht=r"c:\projects\music\guts\"
pa=r"c:\projects\music\guts\"
pa=r"c:\\projects\\music\\guts\\"
print(pa)
os.path.join( "C:", "meshes", "as" )
vv=r"C:\meshes\as"
vv=r"C:\meshes\as\"
vv=r"C:\meshes\as\\"
print(vv)
patht=r'c:\projects\music\guts\\'
cps(patht)
a='\''
a=r'\''
a=r'c:\a\''
a=r'c:\a\'
a=r"c:\a\"
patht=r'c:\projects\music\guts'
song=r'\LetBe.mp3'
    ll=f'"{patht}{song} --start-time {at} --stop-time {st}"'
patht=r'c:\projects\music\guts\songs'
patht=r'c:\projects\music\gut\songs'
from pathlib import Path, PureWindowsPath
filename = Path("source_data/text_files/raw_data.txt")
filename
PureWindowsPath(filename)
gg=PureWindowsPath(filename)
import webbrowser
webbrowser.open(filename.absolute().as_uri())
os.listdir('.')
os.chdir('Apr23')
    print(ii.size)
    print(a,ii.size)
[a[0] for a in tfils]
fils=[a[0] for a in tfils]
for a in fils:
ii=PillowImage.open('3.jpg')
kk=ii.rotate(-90)
kk.size
kk=ii.rotate(90)
kk.save('rot.jpg')
for a in fils[2:5]:
kk=ii.resize(3024,4032)
kk=ii.resize((3024,4032))
        print(a,ii.size)
        print(a,ii.width)
    if ii.width>4000:
type(ii.width)
ii.width>4000
if ii.width>4000:
    print('>4000')
ii=PillowImage.open('1.jpg')
for a in fils[:4]:
    # print(a,ii.size)
        kk=ii.resize((3024,4032))
dir('a')
[a for a in dir('a')]
print([a for a in dir('a')])
a='jim'
a.center(20)
print(a.center(20))
p=a.center(20)
os.chdir('/mnt/c/projects')
dir([a.name for a in os.scandir('.')][0])
print(dir([a.name for a in os.scandir('.')][0]))
print(dir([a for a in os.scandir('.')][0]))
dir([a.path for a in os.scandir('.')][0])
[a.path for a in os.scandir('.')][0]
[a.isdir for a in os.scandir('.')][0]
[a.is_dir for a in os.scandir('.')][0]
mm=[a for a in os.scandir('.')][0]
print(dir(mm))
mm.stat
mm.stat()
[a for a in os.scandir('.')][4]
dir([a for a in os.scandir('.')][4])
[b for b in dir([a for a in os.scandir('.')][4]) if not re.search('^_',b)]
[a for a in os.scandir('.')][4].is_dir
[a for a in os.scandir('.')][4].is_dir()
os.chdir('/mnt/c/projects/camera')
ff=open('PXL_20230424_032326903.jpg','rb')
ee=ExifImage(ff)
dir(ee)
print(dir(ee))
ee.datetime
zdir(ee.datetime)
type(ee.datetime)
re.sub(r':','_',ee.datetime)
re.sub(r':|\s','_',ee.datetime)
re.sub(r'\d{4}:','',ee.datetime)
one=re.sub(r'\d{4}:','',ee.datetime)
two=re.sub(r':|\s','_',one)
two
ee.stat()
ff.stat
ff.stat()
zdir(ff)
fil=[a for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil[0]
fil[0].stat
fil[0].stat()
fil[0].stat().st_mtime
ss=fil[0].stat().st_mtime
ss.strftime("%x")
datetime.fromtimestamp(ss)
datetime.fromtimestamp(ss).strftime("%x")
fil=[a,a.stat() for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil=[(a,a.stat()) for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil=[(a,a.stat().mtime) for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil=[(a,a.stat().st_mtime) for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil=[(a.name,a.stat().st_mtime) for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
tfils=sorted(fil, key=lambda x: x[1])
def pixDate(x):
    one=re.sub(r'\d{4}:','',ee.datetime)
    two=re.sub(r':|\s','_',one)
    return two
        inter=f'{a[0]},{pixDate(ExifImage(a[0]).datetime)}'
[a for a in fdates if re.search(r'^P',a)]
new=[a for a in fdates if re.search(r'^P',a)]
[a[0] for a in new]
new
a=tfils[3]
f'{a[0]},{ExifImage(a[0]).datetime}'
f'{a[0]},{ExifImage(a[0]).datetime}'.split(',')
f'{a[0]},{pixDate(ExifImage(a[0]).datetime)}'.split(',')
        inter=f'{a[0]},{pixDate(ExifImage(a[0]).datetime)}'.split(',')
final=sorted(fdates, key=lambda x: x[1])
final=[a for a final if re.match(r'^P',a)]
final=[a for a in final if re.match(r'^P',a)]
final=[a for a in final if re.searc(r'^P',a)]
final=[a for a in final if re.search(r'^P',a)]
final=[a for a in final if re.search(r'p',a)]
final=[a for a in final if re.search('p',a)]
final=[a for a in final if re.search('p',a[0])]
final=[a for a in final if re.search('^P',a[0])]
    one=re.sub(r'\d{4}:','',x)
final=[a for a in fdates if re.search('^P',a[0])]
    os.rename(a, b+'.jpg')
    os.rename(a[0], a[1]'.jpg')
    os.rename(a[0], a[1]+'.jpg')
from yt_dlp import YoutubeDL
URLS=["https://www.youtube.com/watch?v=PhFP5l71PRE"]
with YoutubeDL() as ydl:
    ydl.download(URLS)
import yt_dlp
URL="https://www.youtube.com/watch?v=PhFP5l71PRE"
ydl_opts = {}
with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    info = ydl.extract_info(URL, download=False)
    # ℹ️ ydl.sanitize_info makes the info json-serializable
    print(json.dumps(ydl.sanitize_info(info)))
    info = ydl.extract_info(URL, download=True)
URL="https://www.youtube.com/watch?v=JEp7QrOBxyQ"
    with open('json', w) as js:
        print(json.dumps(ydl.sanitize_info(info)),file=js)
    with open('json', 'w') as js:
URLS = ['https://www.youtube.com/watch?v=sGSZA6mYo4c']
ydl_opts = {
    'format': 'mp3',
    # ℹ️ See help(yt_dlp.postprocessor) for a list of available Postprocessors and their arguments
    'postprocessors': [{  # Extract audio using ffmpeg
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'm4a',
    }]
}
    error_code = ydl.download(URLS)
    'format': 'm4a',
ss='4:56'
to='6:24'
song='strum2.mp4'
from django.contrib import admin
from django.urls import path
urlpatterns = [
    path('admin/', admin.site.urls),
"""
Django settings for locallibrary project.
Generated by 'django-admin startproject' using Django 4.1.7.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^9qhg^b+5=3521h0g*-(c=&$a$a-(f+%^ltn+7cr*442m%i13t'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'catalog.apps.CatalogConfig', #This object was created for us in 
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
ROOT_URLCONF = 'locallibrary.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
WSGI_APPLICATION = 'locallibrary.wsgi.application'
# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SECRET_KEY
print(BASE_DIR)
BASE_DIR = Path('.').resolve().parent.parent
BASE_DIR = Path('.').resolve().parent
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR ='setting'
BASE_DIR
BASE_DIR / ''
PWD
.01 + .02
.01 + .02==.03
URL=URLS[0]
    st=json.dumps(ydl.sanitize_info(info))
type(st)
dict(str)
    st2=json.dumps(info)
type(st2)
st2
st2.split(',')
"\n".join(st2.split(','))
cps("\n".join(st2.split(',')))
json.loads(st)
type(json.loads(st))
std=json.loads(st)
len(std)
[a for a in std]
print([a for a in std])
print(sorted[a for a in std]))
print(sorted([a for a in std]))
std('description')
std['description']
std['comment_count']
std['original_url']
std['categories']
std['fulltitle']
std
cps(std)
print(sorted([(a,b) for a,b in std.items()]))
print(sorted([(a,b)+'\n' for a,b in std.items()]))
for a, b in std.items():
    print(f'{a} {b}\n')
    print(f'{a}: {b}\n')
ss=''
    tt=f'{a}: {b}\n'
    ss+=tt
cps(tt)
type(ss)
std['formats']
std['formats'][0]
std['formats'][1]
[a for a in std['formats']]
ydl_opts = {'format': 'm4a'}
URLS = ['https://www.youtube.com/watch?v=aajSxr8nghE']
info
json.loads(info)
type(info)
[(a,b) for a, b info.items()]
[(a,b) for a, b in  info.items()]
[(a,b) for a, b in  info.items()][:3]
[(a,b) for a, b in  info.items()][:1]
[(a,b) for a, b in  info.items()][:2]
error_code
te='''https://www.youtube.com/watch?v=sGSZA6mYo4c
DannyYoYo
https://www.youtube.com/watch?v=qhkpp_hPb9Y
Danny_MGallger
https://www.youtube.com/watch?v=bQaKvp_MiTE
sendinTheClowns
https://www.youtube.com/watch?v=8L6KGuTr9TI
te=te.split('\n').strip()
te
type(te)
te.split('\n')
te.split('\n').strip()
te.strip().split('\n')
li=te.strip().split('\n')
[a for a in li if  re.search(r'http')]
[a for a in li if  re.search(r'http',a)]
[a for a in li if  re.search(r'http',a)][2:]
[a for a in li if  re.search(r'http',a)][:2]
URLS= ['https://www.youtube.com/watch?v=sGSZA6mYo4c',
 'https://www.youtube.com/watch?v=qhkpp_hPb9Y']
URL
    print(info)
    with open('info', 'w') as inx:
        inx.write(info)
json.dumps(info)
    winfo=json.dumps(info)
        inx.write(winfo)
winfo
type(winfo)
json.loads(winfo)
jj=json.loads(winfo)
[(a,b) for a, b in  winfo.items()]
[(a,b) for a, b in  jj.items()]
[(a,b) for a, b in  jj.items() if not 'url' in a]
[(a,b) for a, b in  jj.items() if not 'url' in b]
[(a,b) for a, b in  jj.items() if not type(a)==list]
[(a) for a, b in  jj.items() if not type(a)==list]
print([(a) for a, b in  jj.items() if not type(a)==list])
cps([(a) for a, b in  jj.items() if not type(a)==list])
[(a,len(b)) for a, b in  jj.items() ]
[(a,b) for a, b in  jj.items() ]
[(a,type(b)) for a, b in  jj.items() ]
print([(a,type(b)) for a, b in  jj.items() ])
print([(a,type(b)) for a, b in  jj.items() if type(b)=='str'])
print([(a,type(b)) for a, b in  jj.items() if type(b)==str])
print([(a) for a, b in  jj.items() if type(b)==str])
jj['url']
jj['original_url']
print([(a,len(b)) for a, b in  jj.items() if type(b)==str])
jj['webpage_url']
jj['title']
jj['description']
jj['id']
cps([(a,len(b)) for a, b in  jj.items() if type(b)==str])
jj['fulltitle']
jj['fulltitle','title']
[a for a in jj if re.match('url',a)]
[a for a in jj if re.match('u',a)]
print([a for a in jj])
print(sorted[a for a in jj]))
print(sorted[a for a in jj])
print(sorted([a for a in jj]))
from mutagen.easyid3 import EasyID3  
import mutagen.id3  
from mutagen.id3 import ID3, TIT2, TIT3, TALB, TPE1, TRCK, TYER  
MP3('Big_Broters', ID3=EasyID3)
MP3('Big_Brothers', ID3=EasyID3)
MP3('Big_Brothers.mp3', ID3=EasyID3)
MP3('x.m4a', ID3=EasyID3)
import eyed3
f = music_tag.load_file('Big_Broters.mp3')
f = music_tag.load_file('Big_Brothers.mp3')
zdir(f)
f.info()
print(f.info())
f.tracktitle
f = music_tag.load_file('x.m4a')
f['artist']="jim"
f['title']="this is title"
f['comment']="this is comment"
zdir(yt_dlp)
help(yt_dlp.postprocessor)
help(yt_dlp.ydl_opts)
help(yt_dlp.utils)
help(yt_dlp.MetadataFromFieldPP)
yt_dlp.DateRange
yt_dlp.DateRange()
help(yt_dlp.YoutubeDL)
st3=json.loads(st2)
st3
type(st3)
    # st=json.dumps(ydl.sanitize_info(info))
    #make dict
    st3=json.loads(st2)
        print(st3,file=js)
cps([(a,len(b)) for a, b in  st3.items() if type(b)==str])
[('id', 11), ('title', 16), ('thumbnail', 52), ('description', 242), ('uploader', 23), ('uploader_id', 24), ('uploader_url', 55), ('channel_id', 24), ('channel_url', 56), ('webpage_url', 43), ('live_status', 8), ('album', 38), ('artist', 15), ('track', 16), ('channel', 15), ('upload_date', 8), ('creator', 15), ('alt_title', 16), ('availability', 6), ('original_url', 43), ('webpage_url_basename', 5), ('webpage_url_domain', 11), ('extractor', 7), ('extractor_key', 7), ('display_id', 11), ('fulltitle', 16), ('duration_string', 4), ('format', 49), ('format_id', 7), ('ext', 4), ('protocol', 37), ('format_note', 12), ('resolution', 9), ('dynamic_range', 3), ('vcodec', 3), ('acodec', 4)]
[(a,len(b)) for a, b in  st3.items() if type(b)==str]
for a in [(a,len(b)) for a, b in  st3.items() if type(b)==str]:
    st+=a+'\n'
nl=[(a,len(b)) for a, b in  st3.items() if type(b)==str]
    st+=a
    st+=str(a)
    st+=str(a)+'\n'
st3['fulltitle']
st3['title']
st3['artist']
st3['thumbnail']
st3['description']
st3['webpage_url']
st3['id']
mc='''
('id', 11)
('description', 242)
('album', 38)
('artist', 15)
('original_url', 43)
('fulltitle', 16)
mc
mc.strip().split('\n')
"".join(mc.strip().split('\n'))
mc.strip().split('\n')[0]
list(mc.strip().split('\n')[0])
nc=mc.strip().split('\n')
nc
nc[1]
typle(nc[1])
tuple(nc[1])
cps(nc)
nc[1].split(',')
json.load(nc)
json.loads(nc)
json.loads(nc[0])
json.loads(1,3)
json.loads((1,3))
json.loads(('a1',3))
json.load('json')
vv=open('json','r')
json.load(vv)
vv.read
vv.read()
vv.readlines()
nn=vv.read()
data=open('json', 'r', encoding='utf-8').read().strip().split('\n')
json.load((data[0]))
json.loads((data[0]))
data = open('json', 'r', encoding='utf-8').read()
json.loads(data)
with open('json','w') as st:
    st.write(st2)
with open('json','r') as sts:
    ddd=json.load(sts)
type(ddd)
nc.split(',')
string_tuples = ["(2500, 'Python')", "(2000, 'Hadoop')", "(3000, 'Spark')"]
result = [eval(ele) for ele in string_tuples]
string_tuples
result = [eval(ele) for ele in nc]
[a[0] for a in result]
ff=[a[0] for a in result]
ddd
[a for a in ddd]
[a for a in ddd if a in ff]
[[a,b] for a,b in ddd if a in ff]
[[a,b] for a,b in ddd.items() if a in ff]
[(a,b) for a,b in ddd.items() if a in ff]
nc[0]
eval(nc[0])
2.isdigit
zdir('2')
'2'.isdigit()
'2'.capitalize
'2'.capitalize()
'jim  '.strip()
dict(ff)
dict(result)
dict(result)['id']
cps([a[0] for a in result])
ex=['id', 'description', 'album', 'artist', 'original_url', 'fulltitle']
[(a,b) for a,b in st3.items if a in ex]
[(a,b) for a,b in st3.items() if a in ex]
URL='https://www.youtube.com/watch?v=Man4Xw8Xypo'
    ex=['id', 'description', 'album', 'artist', 'original_url', 'fulltitle']
    myin=[(a,b) for a,b in st3.items() if a in ex]
myin
    ex=['id', 'title', 'description', 'album', 'artist', 'original_url', 'fulltitle']
myin[1][0]
myin[1][1]
re.sub(r'^[a-zA-Z]','','@#4myin[1][1]ji')
re.sub(r'[^a-zA-Z]','','@#4myin[1][1]ji')
re.sub(r'[^a-zA-Z0-9]','','@#4myin[1][1]ji')
re.sub(r'[^a-zA-Z0-9]','','@#4myin[1][1]j  i')
re.sub(r'[^a-zA-Z0-9]','_','@#4myin[1][1]j  i')
first=re.sub(r'[^a-zA-Z0-9]','_','@#4myin[1][1]j  i')
    title=myin[1][1]
    first=re.sub(r'[^a-zA-Z0-9]','_',title)
first
re.sub(r'_{2,}','',first)
re.sub(r'_{1,}','',first)
re.sub(r'_{1,}','_',first)
final=re.sub(r'_{1,}','_',first)
    'embed-metadata':True,
    'outtmpl': final
ydl_opts
final=re.sub(r'_$','',final)
    final=re.sub(r'_{1,}','_',first)       
    final=re.sub(r'_$','',final)
    second=re.sub(r'_')
final=re.sub(r'_$','',final)+'.m4a'
    final=re.sub(r'_$','',final)+'.m4a'
f = music_tag.load_file(Final)
f = music_tag.load_file(final)
f['tracktitle']='blackbird'
dict(myin)
Path(final).touch()
    myin=dict([(a,b) for a,b in st3.items() if a in ex])
fm = music_tag.load_file(Final)
myin['title']
    title=myin['title']
fm
fm = music_tag.load_file(final)
myin['id']
fm['id']=myin['id']
fm['desc']=myin['id']
[a for a in fm.tag_map]
fm['comment']=myin['id']
fm.save()
fm["UserDefinedText"]='The lady doth protest too much, methinks'
fm["comment"]='The lady doth protest too much, methinks'
fm["HandlerDescription"]="what now"
fm['tracktitle']=title
fm['comment']=myin('original_url')
fm['comment']=myin['original_url']
fm['artist']=myin['artist']
URL='https://www.youtube.com/watch?v=SyNt5zm3U_M'
mint
[a for a in info]
print(sorted[a for a in info]))
print(sorted([a for a in info]))
info['description']
fm['artist']=myin['descrption']
[a for a in fm.tag_name]
zdir(fm)
fm['lyrics']=myin['descrption']
fm['lyrics']=myin['descirption']
fm['lyrics']=myin['description']
fm['comment']=myin['description']
fm['genre']=myin['original_url']
URL='https://www.youtube.com/watch?v=8L1UngfqojI'
#db="conn=sqlite3.connect('C:\Users\jayst\AppData\Roaming\Ditto\Ditto.db')"
#db="conn=sqlite3.connect('C:/Users/jayst/AppData/Roaming/Ditto/Ditto.db')"
db=r'/mnt/c/Users/jayst/AppData/Roaming/Ditto/Ditto.db'
conn=sqlite3.connect(db)
c=conn.cursor()
ip=c.execute("SELECT mText from Main")
[a for a in ip]
[a for a in ip][:4]
len(ip)
li=[a for a in ip]
li
len(li)
li[:3]
li[3:]
li[0]
li[0:8]
ip=c.execute("SELECT lDate, mText from Main")
[a for a in ip][3:]
[a for a in ip][-3:]
myl=[a for a in ip]
myl[-8:]
datetime.timestamp(0)
datetime.timestamp('0')
datetime.fromtimestamp('0')
datetime.fromtimestamp(0)
datetime.fromtimestamp(1682742175)
datetime.fromtimestamp(1682742175)strftime( "%d-%m-%Y %H:%M:%S" )
datetime.fromtimestamp(1682742175).strftime( "%d-%m-%Y %H:%M:%S" )
myl
def time(x):
    return datetime.fromtimestamp(1682742175).strftime( "%d-%m-%Y %H:%M:%S" )
myl=[time(a) for a in ip]
[type(a) for a in ip]
[a[0] for a in ip]
[time(a[0]), a[1] for a in ip]
[(time(a[0])), a[0], a[1] for a in ip]
[(time(a[0]))for a in ip]
[(time(a[0]), a[1])for a in ip]
    return datetime.fromtimestamp(1682742175).strftime( "%m-%d-%Y %H:%M:%S" )
myl=[(time(a[0]), a[1])for a in ip]
    return datetime.fromtimestamp(x).strftime( "%m-%d-%Y %H:%M:%S" )
print(myl[-8:])
myl[-1:]
myl[-1:][1]
myl[-1:][0]
join""(myl[-1:][0])
"".join(myl[-1:][0])
print("".join(myl[-1:][0]))
myl[-8:][0]
print(" - ".join(myl[-1:][0]))
for in myl[8:]:
for a in myl[8:]:
wstring=''
    temp=f'" - ".join(a))'
    wstring+=temp
print(wstring)
    temp=f'{" - ".join(a)}'
with open('ditto26', 'w', encoding="utf-8") as fs:
    fs.write(wstring)
wstring
type(wstring)
len(wstring)
open('xx', 'w', encoding='utf-8').write(wstring)
with open('ditto_out', 'w', encoding="utf-8") as fs:
re.sub(r'\r\n','\n',wstring)
wstring=re.sub(r'\r\n','\n',wstring)
myl[-10:]
ip=c.execute("delete from Main")
from django.db import models
zdir(models)
class Jim(models.Model):
class Genre(models.Model):
    """Model representing a book genre."""
    name = models.CharField(max_length=200, help_text='Enter a book genre (e.g. Science Fiction)')
    def __str__(self):
        """String for representing the Model object."""
        return self.name
    'catalog.apps.CatalogConfig',
db=r"/mnt/c/projects/djan/locallibrary/db.sqlite3"
conn = sqlite3.connect(db)
q='''
SELECT * from catalog_book_genre ;
SELECT * from catalog_book_genre
SELECT * from catalog_genre
myq="Beware the Jabberwock, my son The jaws that bite the claws that catch Beware the Jubjub bird, and shun The frumious Bandersnatch  He took his vorpal sword in hand;  Long time the manxome foe he sought  So rested he by the Tumtum tree  And stood awhi".split(' ')[5]
myq
myq="Beware the Jabberwock, my son The jaws that bite the claws that catch Beware the Jubjub bird, and shun The frumious Bandersnatch  He took his vorpal sword in hand;  Long time the manxome foe he sought  So rested he by the Tumtum tree  And stood awhi".split(' ')[:5]
re.sub(r'[^a-zA-Z0-9]','',myq)
[re.sub(r'[^a-zA-Z0-9]','',a) for a in myq]
myq=[re.sub(r'[^a-zA-Z0-9]','',a) for a in myq]
    return f'INSERT into "catalog_genre" values(null,{x})'
for w in myq:
    ip = c.execute(ins(w))
ins(mysq[0])
ins(myq[0])
    return f'INSERT into "catalog_genre" values(null,"{x}")'
q2='INSERT into "catalog_genre" values(null,"Jabberwock")'
c.execute(q2)
ws('List_of_Irish_ballads')
wss('irish')
wss('irish poets')
submissions
submissions = api.search_submissions(subreddit=subreddit, limit=limit, before=before, after=after)
[a for a in submissions]
mysub=[a for a in submissions]
mysub
mysub[1]
[(a,b) for a,b in mysub[1]]
mysub[1][1]
mysub[1][0]
type(mysub[1])
[(a,b) for a,b in mysub[1].items()]
[(a,b) for a,b in mysub[1].items()][:10]
[(a,b) for a,b in mysub[1].items()][:20]
[(a,b) for a,b in mysub[1].items()][:40]
[(a,b) for a,b in mysub[1].items()][-20]
[(a,b) for a,b in mysub[1].items()][:-20]
[(a,b) for a,b in mysub[1].items()][:-20:10]
[(a,b) for a,b in mysub[1].items()][:-30:10]
[(a,b) for a,b in mysub[1].items() if not a ==False]
[(a,b) for a,b in mysub[1].items() if not b ==False]
[a for a in mysub[1].keys()]
print([a for a in mysub[1].keys()])
print([a for a,b in mysub[1].keys()])
print([a for a,b in mysub[1].items()])
print([a for a,b in mysub[1].items()] if not b ==False)
print([a for a,b in mysub[1].items()] not if b ==False)
print([a for a,b in mysub[1].items()] not b ==False)
print([(a,b) for a,b in mysub[1].items()] not b ==False)
print([(a,b) for a,b in mysub[1].items()] not b ==False])
print([(a,b) for a,b in mysub[1].items() ])
print([(a,b) for a,b in mysub[1].items() not b ==False])
print([(a,b) for a,b in mysub[1].items() if not b ==False])
#definition of the class starts here  
class Person:  
    #initializing the variables  
    name = ""  
    age = 0  
      
    #defining constructor  
    def __init__(self, personName, personAge):  
        self.name = personName  
        self.age = personAge  
    #defining class methods  
    def showName(self):  
        print(self.name)  
    def showAge(self):  
        print(self.age)  
          
    #end of the class definition  
# Create an object of the class  
person1 = Person("John", 23)  
#Create another object of the same class  
person2 = Person("Anne", 102)  
#call member methods of the objects  
person1.showAge()  
person2.showName() 
zdir(Person)
dir(person1)
person1.__repre__
person1.__repr__
person1.__str__
person1.__init__
    """A simple example class"""
    i = 12345
    def f(self):
        return 'hello world'
x=MyClass
y=MyClass()
dir(x)
dir(y)
y.f
y.f()
y.i
zdir(y)
x.i
me=Person()
me=Person('a','b')
me.showAge()
dir(me.showAge)
dir(person1.showAge)
type(person1.showAge)
type(person1.age)
[a for a in person1.age]
def dec(s):
        print('dec')
    s()
    return inner 
def ced():
    printer('ced')
ced()
    print('ced')
dec(ced)
new=dec(ced)
new()
@dec
def innxs()
def innxs():
    print('innxs')
innxs()
add_five = outer(5)
# Import the default logging module
# Format the log message
# Emit a warning message
logging.basicConfig(filename='HumioDemo.log', format='%(asctime)s %(levelname)s:%(name)s:%(message)s')
#  Emit an INFO-level message
logger.warning('Python logging warning is cool! to fil')
logging.basicConfig(filename='what.log', format='%(asctime)s %(levelname)s:%(name)s:%(message)s')
logging.basicConfig(filename='what.log')
import abc
from typing import Any, Callable
def print_list(a: list) -> None:
print('ok')
print_list('jima')
def isprime(number: int) ->bool:
    if number < 2:
    for element in range(2, int(sqrt(number)+1)):
        if number % element==0;
        if number % element==0:
isprime(3)
from math import sqrt
3 % 10
3 % 10==0
    return True
isprime(33)
isprime(31)
def div(a:int, b:int)->float:
div(3,3)
div(3,0)
def dec(fun):
    def infun(x,y):
        if y==0:
            print('can\'t divide zero')
        return
    fun(a,b)
    return infun
div=dec(div)
    fun(x,y)
def div(x:int, y:int)->float:
    return x/y
def div(x,y):
    infun(x,y)
        fun(x,y)
div(3,1)
div(8,2)
div(8,0)
print(div(8,2))
ins(div)
def check(func):
    def inside(x,y):
        func(x,y)
    return inside
div=check(div)
div2=check(div)
div2(8,3)
ins(div2)
    pudb.set_trace()
        return func(x,y)
div2(8,0)
div(8,3)
        y=y*32
    return x+y
div(2,3)
    def inside(x):
        x=x+ "my word"
        return func(x)
def div(word):
    return word
div('jim')
        x="</body>\n"+x+ "\n</body>"
print(div('inside'))
    def my(x):
        ht='''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tailwind CSS Lightbox Gallery With Flex</title>
    <!-- <link rel="stylesheet" href="my.css"> -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="script.js"></script>
</head>
<body>
        x=ht+x
     return x 
def my(x):
    ht='''
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tailwind CSS Lightbox Gallery With Flex</title>
<!-- <link rel="stylesheet" href="my.css"> -->
<script src="https://cdn.tailwindcss.com"></script>
<script src="script.js"></script>
    x=ht+x
return x 
    return x 
my('jim')
with open('te.html', 'w', encoding="utf-8") as fs:
    fs.write(my('jim'))
        x=ht+x+ "\n</body>"
mydiv="\n".join([a.name for a in os.scandir('.')])
div=check(mydiv)
div
div(mydiv)
mydiv
    fs.write(div(mydiv))
def dec(func):
        x+=' decortated'
def myf(x):
    return x
myf('dude')
myf=dec(myf)
        x+=' bottom'
        x='top'+x
myf('body')
        x='top '+x
del x
        x+=' \nbottom'
        x='top\n'+x
print(myf('all my body'))
del myf
del dec
logging.root.level
logging.root.level=50
logging.DEBUG
zdir(logging)
x=input("enter number")
print('hello')
if  logging.root.level=50:
print(f'logging is {logging.root.level} ')
if  logging.root.level==50:
logging.root
logging.root.level='DEBUG'
logging.basicConfig(
level=logging.WARNING,
format="%(asctime)s %(levelname)s %(message)s",
datefmt="%Y-%m-%d %H:%M:%S",
filename="basic.log"
def set_color(org_string, level=None):
    color_levels = {
        10: "\033[36m{}\033[0m",       # DEBUG
        20: "\033[32m{}\033[0m",       # INFO
        30: "\033[33m{}\033[0m",       # WARNING
        40: "\033[31m{}\033[0m",       # ERROR
        50: "\033[7;31;31m{}\033[0m"   # FATAL/CRITICAL/EXCEPTION
    if level is None:
        return color_levels[20].format(org_string)
        return color_levels[int(level)].format(org_string)
logger.info(set_color("test"))
logger.debug(set_color("test", level=10))
logger.warning(set_color("test", level=30))
logger.error(set_color("test", level=40))
logger.fatal(set_color("test", level=50))
from .models import Book, Author, BookInstance, Genre
def index(request):
    """View function for home page of site."""
    # Generate counts of some of the main objects
    num_books = Book.objects.all().count()
    num_instances = BookInstance.objects.all().count()
    # Available books (status = 'a')
    num_instances_available = BookInstance.objects.filter(status__exact='a').count()
    # The 'all()' is implied by default.
    num_authors = Author.objects.count()
    context = {
        'num_books': num_books,
        'num_instances': num_instances,
        'num_instances_available': num_instances_available,
        'num_authors': num_authors,
    # Render the HTML template index.html with the data in the context variable
    return render(request, 'index.html', context=context)
mm=json.load('json')
    xx=json.load(sts)
v j
with open('j','r') as sts:
[a for a in xx.keys()]
URL='https://www.youtube.com/watch?v=QH5fw9kxDQA'
[a for a in info.keys()]
print([a for a in info.keys()])
info.id
info['id']
info['thumbnail']
cps(info['thumbnail'])
ss=json.dumps(info)
print(ss)
    print(info,file=sts)
with open('j','w') as sts:
dir(datetime)
20*3
(20*3)
import whitenoise
import importlib.metadata
print(importlib.metadata.version('DateTime'))
import DateTime
print(importlib.metadata.version('datetime'))
from importlib.metadata import version
version('datetime')
version('tables')
# pretty print loaded modules
pprint.pprint(sys.modules)
import pendulum
hi
import django
from django.core.management import execute_from_command_line
zdir(django)
from django.conf import settings
zdir(settings)
help(django)
#pick a path
mpath="/mnt/c/Users/jayst/Downloads"
mpath="/mnt/c/you/lazy" 
# mpath="/mnt/c/you/spoken/cb"
#set a date
files=cfilter(mpath,918)
files[4]
fi=files[4]
zdir(ti)
ti.comment
x = os.environ.keys()x = os.environ.keys()
s=dir(ti)
import exifread
ti.v1l1
print('*'*3000)
sys.stdout = open('logfile', 'w')
sys.stdout = sys.__stdout__
datetime.now().strftime("%m/%d/%Y, %H:%M:%S")
datetime.now().strftime("%m/%d/%y, %H:%M:%S")
from django.http import HttpResponse
models
import catalog
[a for a in catalog]
zdir(catalog)
dir(catalog)
from catalog.models import Book
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'locallibrary.settings')
dir(models)
    """Model representing a book genre (e.g. Science Fiction, Non Fiction)."""
    name = models.CharField(
        max_length=200,
        help_text="Enter a book genre (e.g. Science Fiction, French Poetry etc.)"
        )
        """String for representing the Model object (in Admin site etc.)"""
settings
settings.configure()
type(settings)
print(settings)
class Fruit(models.Model):
    name = models.CharField(max_length=100, primary_key=True)
    "polls.apps.PollsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')
zdir(Choice)
# create a class
    # class variable
    var = 1
    def __init__(self, name, age, id):
        self.id = id
# creating object
s = Student("Alice", 14, 23)
# calling the vars() function
pprint(vars())
vars()
vars(models)
print(vars(models))
from .models import Question
latest_question_list = Question.objects.order_by("-pub_date")[:5]
dbName
dbName="/mnt/c/projects/Django/first/mysite/db.sqlite3"
SELECT sql FROM sqlite_master;
my=[a for a in ip]
[a for a in my if 'choice' in a]
[a for a in my if 'p' in a]
[a for a in my if 'a' in a]
[a for a in my]
type(my)
my[4]
[a for a in my if 's' in a]
[a for a in my if '' in a]
[a for a in my ][8]
[a for a in my ][18]
type(my[4])
[map(str,a) for a in my] 
[list(map(str,a)) for a in my]
my2=[list(map(str,a)) for a in my]
[a for a in my2]
[a for a in my2 if "choice" in a]
[a for a in my2 if "c" in a]
my3=[str(map(str,a)) for a in my2]
my3
[a for a in my3]
my2
my2[1]
my2[1][0]
[a[0] for a in my2 ]
[a[0] for a in my2 if "choice" in a[0] ]
[a[0] for a in my2 if "quest" in a[0] ]
cps([a[0] for a in my2 if "quest" in a[0] ])
import numpy as np
import seaborn as sns
# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')
# display head of dataset
pd.head()
ll=[a for a in os.scandir('.')]
ll=[a.name for a in os.scandir('.')]
p='^22'
mm=[a for a in ll if re.match(p,a)]
p='^20'
for a in mm:
    b=1
    os.rename(a,str(b)+'.mp3')
    b+=1
b=1
addDeveloper(4, 'Mark', datetime.datetime.now())
wikipedia.summary("Python programming languag", sentences=2)
wikipedia.summary("schopenhauer", sentences=2)
result = wikipedia.search("beethoven")
page = wikipedia.page(result[3])
page.content
print(page.content)
with open('output.txt', 'w') as f:
    print(page.content,file=f)
re=page.content
pc=page.content
pc
pc.split('\n')
[a for a in pc.split('\n') if re.match('phony',a)]
[a for a in pc.split('\n') if re.match('T',a)]
page = wikipedia.page(result[4])
[a for a in pc.split('\n') if re.match('.*phony',a)]
[a for a in pc.split('\n') if re.match('Op.*phony',a)]
myq=[a for a in pc.split('\n') if re.match('Op.*phony',a)]
# print the summary of what python is
hq
addDeveloper(, 'Mark', datetime.datetime.now())
addDeveloper(?, 'Mark', datetime.datetime.now())
addDeveloper('?', 'Mark', datetime.datetime.now())
num=0
for a in mq:
    addDeveloper(4, a, datetime.datetime.now())
    num+=1
for a in myq:
num=10
    addDeveloper(num, a, datetime.datetime.now())
for lang in locale.locale_alias.values():
    print(lang)
import locale
import sqlparse
sqi = """INSERT INTO 'polls_question'
                  ('id', 'question_text', 'pub_date') 
                  VALUES (?, ?, ?);"""
print(sqlparse.format(sqi, reindent=True, keyword_case='upper'))
sqi = """INSERT INTO 'polls_question' ('id', 'question_text', 'pub_date') VALUES (?, ?, ?);"""
sqi = """insert INTO 'polls_question' ('id', 'question_text', 'pub_date') VALUES (?, ?, ?);"""
print(sqlparse.format(sqi, reindent=False, keyword_case='upper'))
from polls.models import Book
zdir(Book)
def addDeveloper():
        sqliteConnection = sqlite3.connect(dbName)
        cursor = sqliteConnection.cursor()
        print("Connected to SQLite")
        # insert developer detail
        schemaSql='''
SELECT sql 
        records = cursor.fetchall()
    except sqlite3.Error as error:
        print("Error while working with SQLite", error)
    finally:
        if sqliteConnection:
            sqliteConnection.close()
            print("sqlite connection is closed")
addDeveloper()
dbName="/mnt/c/projects/Django/mycat/locallibrary/db.sqlite3"
def schema():
            return records
nn=schema()
        cursor.execute(schemaSql)
[a for a nn]
[s for s in nn]
[s for s in nn if 'catalog' in s]
nn[1]
[s for s in nn if 'catalog' in s[0]]
[s[0] for s in nn]
[s[0] for s in nn if 'catalog' in s[0]]
[s[0] for s in nn ]
[s[0] for s in nn if s[0].startswith('C') ]
[type(s[0]) for s in nn ]
nn[1][0]
[(type(s[0]),s[0]) for s in nn ]
[(type(s[0][0]),s[0]) for s in nn ]
[(type(s[0]),s[0]) for s in nn[:5] ]
[(type(s[0]),s[0]) for s in nn[:5] if type(s[0])=='str' ]
[(type(s[0]),s[0]) for s in nn[:5] if isinstance(s[0],str) ]
[(type(s[0]),s[0]) for s in nn if isinstance(s[0],str) ]
[(type(s[0]),s[0]) for s in nn if isinstance(s[0],str) if 'catalog' in s[0] ]
[(type(s[0]),s[0]) for s in nn if isinstance(s[0],str) if 'catalog' in s[0] and 'index' not in s[0] ]
[(type(s[0]),s[0]) for s in nn if isinstance(s[0],str) if 'catalog' in s[0] and 'INDEX' not in s[0] ]
mm=[(type(s[0]),s[0]) for s in nn if isinstance(s[0],str) if 'catalog' in s[0] and 'INDEX' not in s[0] ]
mm=[s[0] for s in nn if isinstance(s[0],str) if 'catalog' in s[0] and 'INDEX' not in s[0] ]
with open('schema','w') as schem:
    for c in mm:
        schem.write("%s\n",c)
        schem.write("%s\n" % c)
content=open('schema')
print(content.read())
sqliteConnection = sqlite3.connect(dbName)
cursor = sqliteConnection.cursor()
print("Connected to SQLite")
insert='''insert into catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('22', 'jim', 'jim')'''
my=cursor.execute(insert)
insert
insert='select * from catalog_author'
insert='''insert into catalog_author' values ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('22', 'jim', 'jim')'''
insert='''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('22', 'jim', 'jim')'''
insert='''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('22', 'jim', 'jim','','')'''
sqliteConnection.commit()
insert='''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('22', 'tome', 'tome','','')'''
        sqliteConnection.commit()
cursor.execute(insert)
insert='''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('32', 'tome', 'tome','','')'''
insert=f'''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('42', 'tome', 'tome',{datetime.now()},'')'''
insert=f'''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('42', 'tome', 'tome','{datetime.now()}','')'''
insert=f'''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('66', 'mark', 'mark','{datetime.now()}','')'''
insert=f'''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('76', 'mark', 'mark','11/11/2023','')'''
insert='''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('122', 'new', 'new','2023-10-26','')'''
result = wikipedia.search("list of irish authors")
result[6]
page = wikipedia.page(result[6])
print(pc)
pc[:3]
pcc=pc.split('\n')
pcc[:5]
pcc[:25]
patter='(born'
pattern='(born'
[a for a in pcc if re.match(pattern,a)]
pattern='born'
pattern='born.*'
pattern='.*born.*'
at=[a for a in pcc if re.match(pattern,a)]
len(at)
at[:8]
at[1]
nn=at[1]
seperator=':'
nn.split(seperator,1)[0]
[nn.split(seperator,1) for nn in at]
[nn.split(seperator,1)[0] for nn in at]
ms=[nn.split(seperator,1)[0] for nn in at]
len(ms)
ms=[nn.split(seperator,1) for nn in at]
ms
with open('aut','w') as schem:
    for a in ms:
        schem.write("%s\n" % a)
ms[13]
ms[13][0]
ms[13][0].split(' ')[1]
def st(x):
    return x[0].split(' ')[1]
for a in ms:
    print(st(a))
[st[a] for a in ms]
[st(a) for a in ms]
[st(a) for a in ms].sort()
[st(a) for a in ms].sort
print([st(a) for a in ms].sort)
print([st(a) for a in ms].sort())
sorted([st(a) for a in ms])
sorted(ms)
ms[:8]
at
result = wikipedia.search("List of Nobel laureates in Literature")
page = wikipedia.page(result[0])
[(a,b) for a,b in result]
[(a,b) for a,b in enumerate(result)]
page = wikipedia.page(result[9])
print(p)c
oc=open('oc','w')
print(pc,file=oc)
oc.close()
st(at[1])
sorted(ms, key=lambda x:x.split(),1)
sorted(ms, key=lambda x:x.split(),[1])
sorted(ms, key=lambda x:x.split()[1])
sorted(ms, key=lambda x[0]:x.split()[1])
" ".join(ms)
sorted(at, key=lambda x:x.split()[1])
at=sorted(at, key=lambda x:x.split()[1])
[len(a) for a in at]
sorted([len(a) for a in at])
sorted([(a, len(a)) for a in at])
sorted([ len(a),a) for a in at])
sorted([ (len(a),a) for a in at])
sorted([ (len(a),a) for a in at] if len(a)>100)
sorted([ (len(a),a) for a in at if len(a)>100])
sorted([ (len(a),a) for a in at if len(a)<100])
sorted([ a for a in at if len(a)<100])
[ a for a in at if len(a)<100]
at=[ a for a in at if len(a)<100]
with open('myaut','w') as myaut:
    myaut.write('\n'.join(at))
with open('myaut','r') as myaut
    con=myaut.read():
with open('myaut','r') as myaut:
    con=myaut.read()
    con=myaut.readlines()
con[1]
con.split('\n')
insert='''insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') values ('999', 'new', 'new','2023-10-26','')'''
insert = ''' insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') VALUES(?,?,?,?)'''
mys= ('1999', 'blah', 'blah','2023-10-26','')
cursor.execute(insert,mys)
insert = ''' insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') VALUES(?,?,?,?,?)'''
import uuid
str(uuid.uuid4())
insert=''' insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death') VALUES(?,?,?,?,?)'''
mys= (str(uuid.uuid4()), 'blah', 'blah','2023-10-26','')
mys= (uuid.uuid4(), 'blah', 'blah','2023-10-26','')
mys= (999, 'blah', 'blah','2023-10-26','')
mys= (24234, 'blah', 'blah','2023-10-26','')
int(uuid.uuid4)
int(str(uuid.uuid4))
mys= ('', 'blah', 'blah','2023-10-26','')
mys= ('1111', 'blah', 'blah','2023-10-26','')
mys= (, 'blah', 'blah','2023-10-26','')
mys= ('blah', 'blah','2023-10-26','')
mys= (?,'blah', 'blah','2023-10-26','')
mys= (null,'blah', 'blah','2023-10-26','')
mys= (None,'blah', 'blah','2023-10-26','')
mys= (None,'george', 'Washington','2023-10-26','')
con=con.split('\n')
insert=''' insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death' 'description') VALUES(?,?,?,?,?, ?)'''
mys= (None, 'blah', 'blah','2023-10-26','', 'whats up')
#https://pynative.com/python-sqlite-date-and-datetime/
insert=''' insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death', 'description') VALUES(?,?,?,?,?, ?)'''
con[1].split('(')
newcon=[]
    newcon.append(a.split('('))
newcon
newcon[1][1]
newcon[1][1].replace(')','')
[a[1][1].replace(')','') for a in newcon]
[a[1].replace(')','') for a in newcon]
[[a,a[1].replace(')','')] for a in newcon]
[a,a[1].replace(')','') for a in newcon]
[(a,a[1].replace(')','')) for a in newcon]
[(a,a[1]) for a in newcon]
[(a,a[1].replace('(','')) for a in newcon]
[('xx',a[1].replace(')','')) for a in newcon]
[(a[0],a[1].replace(')','')) for a in newcon]
newcon=[(a[0],a[1].replace(')','')) for a in newcon]
    con=myaut.read().split('\n')
    con=myaut.read().split('\n').split('(')
con=con[1].split('(')
[a.split('(') for a in con]
con=[a.split('(') for a in con]
for a in newcon:
    mys= (None, a[0], 'blah','2023-10-26','', a[1])
    print(mys)
    mys= (None, a[0], '','2023-10-26','', a[1])
    cursor.execute(insert,mys)
    print(a[0].split())
    print(a[0].split()[1])
    print(a[0].split()[0])
    print(a,a[0].split()[0])
    print(a,a[0].split()[1])
        print(a,a[0].split()[1])
        print(f'!!!! {a}')
ms = 'bobby!hadz!com'
s='!'
ms.split(s)
ms.split(s)[:1]
ms.split(s)[1:]
" ".join(ms.split(s)[1:])
s='y'
" ".join(ms.split(s)[:1])
" ".join(ms.split(s)[1])
" ".join(ms.split(s))
ms[8]
ms[8:]
[(a,b) for a,b in enumerate('result')]
[[a,b] for a,b in enumerate('result')]
ms.split(s)[0:]
ms.split(s)[0]
ms.split(s,1)[0]
his
ms.split(s,1)
ms.rsplit(s,1)
ms.rsplit(s,1)[0]+s
ms.rsplit(s,1)[0]
ms.partition(s)
ms.partition(s)[0:2]
con[1][1].strip()
con[1][0].strip()
con[1][0].strip().find('a')
con[1][0].strip().find('c')
con[1][0].strip()[1]
n=con[1][0].strip()
n[0:n.find('r')]
n[n.find('r'):]
'jim'.find('x')
(a for a in con)
list((a for a in con))
str((a for a in con))
tuple((a for a in con))
tuple((a for a in con))[0]
'1'.isdigit()
'a'.isdigit()
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)
x = re.findall("ai", txt)
x = re.findall("ai.*", txt)
x = re.search("\s", txt)
x.start()
zdir(x)
x.end()
nn=con[1]
x=re.search(")",nn[1])
x=re.search("\)",nn[1])
x = re.search("Portugal", txt)
x = re.search("s", txt)
x = re.search("S", txt)
re.split('!',ms)
re.split('!',ms)[0]
re.split('!',ms,1)[0]
msq="delete from 'catalog_author'"
msq
cursor.execute(msq)
[(a[0].strip(), a[1]) for a in newcon]
newcon=[(a[0].strip(), a[1]) for a in newcon]
[len(a[0].split()) for a in newcond]
[len(a[0].split()) for a in newcon]
[(len(a[0].split()),a[0]) for a in newcon]
[(len(a[0].split()),a[0]) for a in newcon if not len(a[0])==2]
[(len(a[0].split()),a[0]) for a in newcon if not len(a[0].split())==2]
[(len(a[0].split()),a[0]) for a in newcon if a[0].find(',') ==-1]
[(len(a[0].split()),a[0]) for a in newcon if a[0].find(',') <>-1]
[(len(a[0].split()),a[0]) for a in newcon if a[0].find(',') !=-1]
[a[0]) for a in newcon if not len(a[0].split())==2]
[a[0] for a in newcon if not len(a[0].split())==2]
rem=[a[0] for a in newcon if not len(a[0].split())==2]
[a for a in newcon if a[0] not in rem]
newcon=[a for a in newcon if a[0] not in rem]
[list(a) for a in newcon]
newcon=[list(a) for a in newcon]
    myaut.write('\n'.join(newcon))
[": ".join(a) for a in newcon]
[" - ".join(a) for a in newcon]
newcon=[" - ".join(a) for a in newcon]
newcon[1]
newcon[1].split('-')
newcon[1].split('-')[0].split()
newcon[1].split('-')[0].split()[1]
newcon[1].split('-')[0].split()[1] + newcon[1].split('-')[0].split()[0]
newcon[1].split('-')[0].split()[1] + " '+ newcon[1].split('-')[0].split()[0]
newcon[1].split('-')[0].split()[1] + " "+ newcon[1].split('-')[0].split()[0]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + a.split[1:] for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + a.split()[1:] for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + str(a.split()[1:]) for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + str(a.split()[2:]) for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + join" "(a.split()[2:])) for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + join" ".(a.split()[2:]) for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + " ".join.(a.split()[2:]) for a in newcon]
[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + " ".join(a.split()[2:]) for a in newcon]
newcon=[a.split('-')[0].split()[1] + " "+ a.split('-')[0].split()[0] + " ".join(a.split()[2:]) for a in newcon]
[a.split('-',1) for a in newcon]
[a.split('-',1).split() for a in newcon]
[a.split('-',1)[0].split() for a in newcon]
[a.split('-',1)[0].split(), a[1:] for a in newcon]
[(a.split('-',1)[0].split(), a[1:]) for a in newcon]
[(a.split('-',1)[0].split(), a[1:]] for a in newcon]
[[a.split('-',1)[0].split(), a[1:]] for a in newcon]
[[a.split('-',1)[0].split(), a[1:]] for a in newcon][0]
[[a.split('-',1)[0].split(), a[1:]] for a in newcon][0][0]
[[a.split('-',1)[0].split(), a[1:]] for a in newcon][0][0][0]
[[a.split('-',1)[0].split(), a.split('-')[1] for a in newcon]]
[[a.split('-',1)[0].split(), a.split('-')[1]] for a in newcon]]
[[a.split('-',1)[0].split(), a.split('-')[1]] for a in newcon]
[[a.split('-',1)[0].split(), a.split('-')[1].strip()] for a in newcon]
nc=[[a.split('-',1)[0].split(), a.split('-')[1].strip()] for a in newcon]
[a[1] for a in nc]
[(a[0][0],a[0][1],a[1]) for a in nc]
[(None,a[0][0],a[0][1],a[1]) for a in nc]
[(None,a[0][0],a[0][1],'','',a[1]) for a in nc]
tup=[(None,a[0][0],a[0][1],'','',a[1]) for a in nc]
for a in tup:
    cursor.execute(insert,a)
tup=[(None,a[0][1],a[0][0],'','',a[1]) for a in nc]
tup
print(re.search('^From', 'From Here to Eternity'))
print(re.search('F.*m', 'From Here to Eternity'))
print(re.search('F.*t', 'From Here to Eternity'))
m = re.match(r'(?P<first>\w+) (?P<last>\w+)', 'Jane Doe')
m.groupdict()
def mytrace(frame, event, arg):
        if event == "call":
            print("call", frame.f_code.co_name, frame.f_locals)
        elif event == "return":
            print("return", frame.f_code.co_name, arg)
        return mytrace
sys.settrace(mytrace)
def in_(s, other):
    return other in s
def contains(s, other):
    return s.__contains__(other)
def find(s, other):
    return s.find(other) != -1
def index(s, other):
        s.index(other)
    except ValueError:
perf_dict = {
'in:True': min(timeit.repeat(lambda: in_('superstring', 'str'))),
'in:False': min(timeit.repeat(lambda: in_('superstring', 'not'))),
'__contains__:True': min(timeit.repeat(lambda: contains('superstring', 'str'))),
'__contains__:False': min(timeit.repeat(lambda: contains('superstring', 'not'))),
'find:True': min(timeit.repeat(lambda: find('superstring', 'str'))),
'find:False': min(timeit.repeat(lambda: find('superstring', 'not'))),
'index:True': min(timeit.repeat(lambda: index('superstring', 'str'))),
'index:False': min(timeit.repeat(lambda: index('superstring', 'not'))),
perf_dict
in_('x','xx')
in_('xx','xx')
'x' in 'jim'
with open('myaut','f') as myaut:
[a for a in con if 'Scot' in a]
[a for a in con if re.match('Scot',a)]
[a for a in con if re.match('P',a)]
[a for a in con if re.match('p',a)]
[a for a in con if re.match(r'p',a)]
[a for a in con if re.search(r'p',a)]
[a for a in con if re.search(r'x',a)]
[a for a in con if re.search(r'z|x',a)]
re.sub('i','x','jim')
re.sub('i','x','jimi')
re.sub('i','x','jimi',1)
def rg(s, other):
    return re.search(s,other)
rg('xxxx','x')
re.search('a','aa')
re.match('a','aa')
re.match('a','aa')==True
bool(re.match('a','aa'))==True
bool(re.match('af','aa'))==True
    return bool(re.search(s,other))
rg('x','x')
rg('superstring', 'str')
    return bool(re.search(other,s))
min(timeit.repeat(lambda: rg('superstring', 'not')))
min(timeit.repeat(lambda: rg('superstring', 'str')))
min(timeit.repeat(lambda: in_('superstring', 'str')))
min(timeit.repeat(lambda: find('superstring', 'str')))
min(timeit.repeat(lambda: contains('superstring', 'str')))
min(timeit.repeat(lambda: rg('superstring', 's')))
rg('superstring', 's')
find('superstring', 's')
find('superstring', 'x')
from .models import Author, Genre, Book, BookInstance, Language
from .models import Author
from models import Author
localslibrary
files=os.scandir('.')
[a for a in files]
[a.name for a in files]
INSTALLED_APPS
W
from catalog.models import *
zdir(Book.objects)
Book.objects.all
Book.objects.all()
Book.objects.count()
Book.objects
[a for a in Book.objects]
def add(a,b,c):
    print(a,b,c)
add('l', 2, 3)
def add():
    l=[1,2,3]
    return l
l=add()
l
print(l)
print(*l)
type(*l)
def add(*args):
    print(args)
l=add(1,2,3)
def add(**args):
l=add(1)
l=add(a=1,b=2)
    return(args)
[a for a in l]
[a for a in l.index]
[a for a in l.index()]
zdir(l)
[a for a in l.items]
[a for a in l.items()]
[a for a in l.keys()]
[a for a in l.values()]
def greet_people(number, *people):
    for person in people:
        print(f"Hello {person}! How are you doing today?\n" * number)
[a for a in 'jim']
greet_people(2,[a for a in 'jim'])
greet_people(2,'jim')
greet_people(3, "James", "Stephen", "Kate")
greet_people(1, "James", "Stephen", "Kate")
    print(people)
    print(type(people))
def greet_people(**people):
    for person, number in people.items():
greet_people(James=5, Mark=2, Ishaan=1)
exitr
context ={
    'name': 'joe'
context['name']
context['names']
[a for a in context.items()]
[a for a in context.items()][0]
from music21 import stream, note, midi
# Create a stream object to store the musical elements
score = stream.Score()
# Create a music part
part = stream.Part()
# Create a measure
measure = stream.Measure()
# Create a note
n = note.Note()
n.pitch.midi = 60  # Set the MIDI pitch number (60 is middle C)
n.duration.type = 'quarter'  # Set the duration of the note
# Add the note to the measure
measure.append(n)
# Add the measure to the part
part.append(measure)
# Add the part to the score
score.insert(0, part)
# Save the score as a MuseScore file
file_path = 'myscore.mscx'
midi.translate.streamToMidiFile(score).open(file_path, 'wb')
measure
score
stream1.write("midi", "blah.mid")
score.write("midi", "blah.mid")
n.duration.Duration(1.5)
n.duration(1.5)
n.duration
phrase=""
result = wikipedia.search("Nobel laureates by sex")
result = wikipedia.search("Church_cantata_(Bach)")
type(pc)
with open('bach','w') as myaut:
    myaut.write(pc)
result = wikipedia.search("list of us presidents")
result = wikipedia.search("us constituion")
result = wikipedia.search("text us constituion")
result = wikipedia.search("text united states constituion")
result = wikipedia.search("Church_cantata_(Bach)#Easter_Sunday")
page = wikipedia.page(result[1])
with open('bach','w') as myaut: myaut.write(pc)
from bs4 import BeautifulSoup
# Specify url of the web page
source = urlopen('https://en.wikipedia.org/wiki/John_D._Hunter').read()
# Make a soup 
soup = BeautifulSoup(source,'lxml')
# Extract the plain text content from paragraphs
paras = []
for paragraph in soup.find_all('p'):
    paras.append(str(paragraph.text))
# Extract text from paragraph headers
heads = []
for head in soup.find_all('span', attrs={'mw-headline'}):
    heads.append(str(head.text))
# Interleave paragraphs & headers
text = [val for pair in zip(paras, heads) for val in pair]
text = ' '.join(text)
# Drop footnote superscripts in brackets
text = re.sub(r"\[.*?\]+", '', text)
# Replace '\n' (a new line) with '' and end the string at $1000.
text = text.replace('\n', '')[:-11]
print(text)
wiki = wikipedia.page('John D. Hunter')
# Extract the plain text content of the page, excluding images, tables, and other data.
text = wiki.content
# Replace '==' with '' (an empty string)
text = text.replace('==', '')
wiki = wikipedia.page('Richard Nixon')
wiki
zdir(wiki)
wiki.summary
wiki.pageid
wiki.sections
wiki.url
wiki.coordinates
dbName="/mnt/c/projects/django/myMdn/locallibrary/bm.db"
dbName="/mnt/c/projects/django/myMdn/locallibrary/db.sqlite3"
type(mm)
schem.write("\n".join(mm))
    schem.write("\n".join(mm))
schemaSql='''
SELECT sql FROM sqlite_master where sql like '%catalog%' and sql like '%table%';
cursor.execute(schemaSql)
records = cursor.fetchall()
print("Error while working with SQLite", error)
if sqliteConnection:
    sqliteConnection.close()
    print("sqlite connection is closed")
    return records
    sqliteConnection = sqlite3.connect(dbName)
    cursor = sqliteConnection.cursor()
    print("Connected to SQLite")
    # insert developer detail
    schemaSql='''
    cursor.execute(schemaSql)
    records = cursor.fetchall()
except sqlite3.Error as error:
    print("Error while working with SQLite", error)
    if sqliteConnection:
        sqliteConnection.close()
        print("sqlite connection is closed")
        return records
    schem.write("\n".join(nn))
mm=[s[0] for s in nn if isinstance(s[0],str)  ]
pc=pc.split('\n')
pc[1]
with open('www','w') as w: w.write('\n'.join(pc))
source = urlopen('https://en.wikipedia.org/wiki/List_of_presidents_of_the_United_States').read()
paras
wikipedia.set_lang('en')
page = wikipedia.page('Artificial intelligence')
query = 'Google LLC'
 
# Which parameters to use
params = {
        'action': 'wbsearchentities',
        'format': 'json',
        'search': query,
        'language': 'en'
# Fetch API
data = fetch_wikidata(params)
#show response as JSON
data = data.json()
data['search'][0]
[a for a in data.items()]
[list(map(str,a)) for a in data.items()]
[list(map(str,a)) for a in data.items()][1]
ll=[list(map(str,a)) for a in data.items()][1]
with open('ll','w') as w: w.write('\n'.join(ll))
ll=[list(map(str,a)) for a in data.items()]
type(ll)
ll[:3]
ll[:2]
[a for a in ll]
data.keys()
[a for a in data.keys()]
data.entities
data['entities']
data['entities'][id]['claims'].keys()
data['entities'][id]['claims'].['P1278']
data['entities'][id]['claims']['P1278']
2
3
4
5
6
7
8
9
10
11
12
13
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
    title = data['entities'][id]['labels']['en']['value']
    title = 'not_found'
    alternate_names = [v['value'] for v in data['entities'][id]['aliases']['en']]
    alternate_names = 'not_found'
    description = data['entities'][id]['descriptions']['en']['value'] 
    description = 'not_found'
    twitter = data['entities'][id]['claims']['P2002'][0]['mainsnak']['datavalue']['value']
    twitter = 'not_found'
    facebook = data['entities'][id]['claims']['P2013'][0]['mainsnak']['datavalue']['value']
    facebook = 'not_found'
    linkedin = data['entities'][id]['claims']['P4264'][0]['mainsnak']['datavalue']['value']
    linkedin = 'not_found'
    youtube = data['entities'][id]['claims']['P2397'][0]['mainsnak']['datavalue']['value']
    youtube = 'not_found'
    instagram = data['entities'][id]['claims']['P2003'][0]['mainsnak']['datavalue']['value']
    instagram = 'not_found'
    subreddit = data['entities'][id]['claims']['P3984'][0]['mainsnak']['datavalue']['value']
    subreddit = 'not_found'
    instance_of = [v['mainsnak']['datavalue']['value']['numeric-id'] for v in data['entities'][id]['claims']['P31']]
    instance_of = 'not_found'
    part_of = [v['mainsnak']['datavalue']['value']['id'] for v in data['entities'][id]['claims']['P361']]
    part_of = 'not_found'
    founded_by = [v['mainsnak']['datavalue']['value']['numeric-id'] for v in data['entities'][id]['claims']['P112']]
    founded_by = 'not_found'
    nick_names = [v['mainsnak']['datavalue']['value']['text'] for v in data['entities'][id]['claims']['P1449']]
    nick_names = 'not_found'
    official_websites = [v['mainsnak']['datavalue']['value']for v in data['entities'][id]['claims']['P856']]
    official_websites = 'not_found'
    categories = [v['mainsnak']['datavalue']['value']['numeric-id'] for v in data['entities'][id]['claims']['P910']]
    categories = 'not_found'
    inception = data['entities'][id]['claims']['P571'][0]['mainsnak']['datavalue']['value']['time']
    inception = 'not_found'
    latitude = data['entities'][id]['claims']['P625'][0]['mainsnak']['datavalue']['value']['latitude']
    longitude = data['entities'][id]['claims']['P625'][0]['mainsnak']['datavalue']['value']['longitude']
    latitude = 'not_found'
    longitude = 'not_found'
soup.title
soup.find_all('table')
table_soup = soup.find_all('table')
filtered_table_soup = [table for table in table_soup if table.caption is not None]
required_table = None
for table in filtered_table_soup:
    if str(table.caption.string).strip() == 'Tropical cyclones formed in February 2020':
        required_table = table
        break    
required_table 
headers = [header.text.strip() for header in required_table.find_all('th')]
headers
rows = []
# Find all `tr` tags
data_rows = required_table.find_all('tr')
for row in data_rows:
    value = row.find_all('td')
    beautified_value = [ele.text.strip() for ele in value]
    # Remove data arrays that are empty
    if len(beautified_value) == 0:
        continue
    rows.append(beautified_value)
rows
[(a.split('-',1)[0].split(), a[1:]) for a in con]
[len(a.split('-',1)[0].split(), a[1:]) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a[1:]) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0][0].split(), a[1:]) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a[0:]) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a) for a in con][:3]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a.split('-',1)[0]) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a.split('-',1)[1]) for a in con]
[(len(a.split('-',1)),a.split('-',1)[0].split(), a.split('-',1)[1]) for a in con if not len(a.split('-',1))==2]
con[:8]
[a.split('-',1)[0].split(), a[1:] for a in con]
[(a.split('-',1)[0].split(), a.split('-',1[1])) for a in con]
[(a.split('-',1)[0].split(), a.split('-',1)[1]) for a in con]
[(a.split('-',1)[0].split(), a.split('-',1)[1].strip()) for a in con]
newcon=[(a.split('-',1)[0].split(), a.split('-',1)[1].strip()) for a in con]
records=cursor.fetchall()
records[1]
records[1][0]
[a[0] for a in records]
[a[0] for a in records][0]
[a[0] for a in records if 'CREATE TABLE "catalog' in a[0]]
[a[0] for a in records if 'CREATE TABLE "catalog_author"' in a[0]]
[a[0] for a in records if 'CREATE TABLE "catalog_author"' in a[0]][0]
cps([a[0] for a in records if 'CREATE TABLE "catalog_author"' in a[0]][0])
    mys= (None, a[0][0], '','2023-10-26','', a[1])
    mys= (None, a[0][0], a[0][1],'','', a[1])
newcon=newcon[:3]
insert=''' insert into 'catalog_author' ('id', 'first_name', 'last_name', 'date_of_birth', 'date_of_death', 'myinfo') VALUES(?,?,?,?,?, ?)'''
soup = BeautifulSoup(wiki_page_text, 'html.parser')
[a for a in table_soup]
len(filtered_table_soup)
table_soup
table_soup[1]
table_soup[0]
type(table_soup[1])
table_soup[1][3]
soup.title.string
len(soup.find_all('table'))
table_soup[1].caption
table_soup[1].string
len(table_soup[1])
len(table_soup[1][1])
table_soup[1][0]
table_soup[10]
len(table_soup[10])
str(table_soup[10])
print(str(table_soup[10]))
[a for a in range(10,1,2)]
[a for a in range(1,10,2)]
[a for a in range(1,100,19)]
max([a for a in range(1,100,19)])
min([a for a in range(1,100,19)])
min([a for a in range(1,10)])
[a for a in range(1,10)]
len([a for a in range(1,10)])
[a for a in dir()]
what=[a for a in dir()]
print(what)
'jim'[:-1]
'jim'[2:]
''.join([a for a in range(10)])
''.join([str(a) for a in range(10)])
mm=''.join([str(a) for a in range(10)])
mm[:-1]
mm[:-3]
mm[:3]
mm[3:]
my=[a.name for a in scandir('.')]
my=[a.name for a in os.scandir('.')]
my=[a.name for a in os.scandir('mnt/c/you/alb')][0]]
my=[a.name for a in os.scandir('mnt/c/you/alb')[0]]
my=[a.name for a in os.scandir('/mnt/c/you/alb')[0]]
my=[a for a in os.scandir('/mnt/c/you/alb')[0]]
my=[a for a in os.scandir('/mnt/c/you/alb')][0]
my=[a.name for a in os.scandir('/mnt/c/you/alb')][0]
save_location
mp3_url
response
[a.name for a in os.scandir('.') if '929' in a]
[a.name for a in os.scandir('.') if '929' in a.name]
audiofile='twit929.mp3'
audiofile.tag.title='twit5-28'
audiofile.tag.save()
rfile='twit929.mp3'
audiofile = eyed3.load(rfile)
zdir(audiofile)
[a for a in audiofile.tag]
audiofile.tag
audiofile.tag.title
audiofile.tag.RecordingDates
audiofile.tag.artist
zdir(audiofile.tag)
audiofile.tag.original_release_date
audiofile.tag.file_info
print(*dir())
[a.name for a in os.scandir('.') if 'mp' in a]
[a.name for a in os.scandir('.') if 'mp' in a.name]
fi=[a.name for a in os.scandir('.') if 'mp' in a.name]
zdir(eyed2)
zdir(eyed3)
with open(fi[0], "r+b") as f:
    fourbytes = [ord(b) for b in f.read(4)]
fi[0]
with open('ww0831.mp3', "r+b") as f:
f= open('ww0831.mp3', "r+b")
f.read(4)
ord(f.read(4))
ord(f.read(0))
fr=f.read(4)
print(fr)
fr=f.read(14)
fr=f.read(34)
fr=f.read(234)
fr=f.read(434)
fr=f.read(1034)
len(fr)
fr[1]
fr[1:4]
fr[0]
chr(fr[0])
chr(fr[0:3])
[chr(a) for a in fr]
[chr(a) for a in fr[:4]]
[chr(a) for a in fr[:14]]
" ".join([chr(a) for a in fr[:14]])
" ".join([chr(a) for a in fr])
"".join([chr(a) for a in fr])
fr=f.read()
[chr(a) for a in fr[:104]]
[chr(a) for a in fr[104:]]
[chr(a) for a in fr[len(fr)-300:]]
eyefile = eyed3.load(fi[1])
zdir(eyefile)
eyefile.info
eyefile.tag
eyefile.tag()
f=open(fi[0],mode='rb')
fc=f.read()
len(fc)
fc[22]
[
fc[:22]
fc[:122]
f=open(fi[2],mode='rb')
len(f)
[chr(a) for a in fc[len(fc)-300:]]
fc
[chr(a) for a in fc]
print([chr(a) for a in fc])
print([chr(a) for a in fc] if chr(a)='o')
print([chr(a) for a in fc if chr(a)='o'] )
print([chr(a) for a in fc if chr(a)='o'])
print([chr(a) for a in fc if chr(a)=='o'])
" ".join([chr(a) for a] )
" ".join([chr(a) for a in fc] )
" ".join([chr(a) for a in fc[:30]] )
" ".join([chr(a) for a in fc[:130]] )
" ".join([chr(a) for a in fc[:230]] )
" ".join([chr(a) for a in fc[:-230]] )
" ".join([chr(a) for a in fc[-230]] )
fc[1]
fc[-2]
sl=[a for a in range(5)]
sl[:2]
sl[2:]
sl[-2:]
" ".join([chr(a) for a in fc[-230:]] )
" ".join([chr(a) for a in fc[-1230:]] )
" ".join([chr(a) for a in fc[1230:]] )
" ".join([chr(a) for a in fc[:1230]] )
" ".join([chr(a) for a in fc[:630]] )
zdir(eyefile.tag)
eyefile.tag.artist
eyefile.tag.title
eyefile.tag.album
[(a,b) for a,b in enumerate(fi)]
eyefile = eyed3.load(fi[3])
[a for a in eyefile.tag]
fi[3]
eyefile = eyed3.load('weightBand.mp3')
eyefile=fi[6]
type(eyefile)
eyefile
eyefile=eyed3.load(fi[6])
nn=zdir(eyefile.tag)
nn=dir(eyefile.tag)
nn=[a for a in nn if not '_' in a]
eyefile.tag.comments
eyefile.tag.comments()
ti.artist
ti.ablum
nn=dir(ti)
tia=[]
tia
tia[3:]
tia[:1]
tia[:3]
[(a,b) for a,b in enumerate(tia[:3])]
[(a,b) for a,b in enumerate(tia[4:8])]
[(a,b) for a,b in enumerate(tia[4:12])]
en=[(a,b) for a,b in enumerate(tia[4:12])]
en
en[1]
"\n".join(en[1])
"\n".join([a for a in en[1]))
"\n".join([a for a in en[1]])
list_of_tuples = [(1, 'bobby'), (2, 'hadz'), (3, 'com')]
with open('example.txt', 'w', encoding='utf-8') as f:
    f.write('\n'.join(f'{tup[0]} {tup[1]}' for tup in list_of_tuples))
"\n".join(f'{a[0]}' for a in en[1]])
'\n'.join(f'{tup[0]} {tup[1]}' for tup in en)
print('\n'.join(f'{tup[0]} {tup[1]}' for tup in en))
en=[(a,b) for a,b in enumerate(tia)]
with open('tiny.txt', 'w', encoding='utf-i') as f:
    f.write('\n'.join(f'{tup[0]} {tup[1]}' for tup in en))
with open('tiny.txt', 'w', encoding='utf-8') as f:
list_of_integers = [7, 21, 44]
(str(item) for item in list_of_integers)
list((str(item) for item in list_of_integers))
" ".join((str(item) for item in list_of_integers))
my_dict = {
    'name': 'Borislav Hadzhiev',
    'fruit': 'apple',
    'number': 5,
    'website': 'bobbyhadz.com',
    'topic': 'Python'
firstN = list(my_dict.items())[:2]
# 👇️ [('name', 'Borislav Hadzhiev'), ('fruit', 'apple')]
print(firstN)
for key, value in firstN:
    # name Borislav Hadzhiev
    # fruit apple
    print(key, value)
files=[a for a in os.scandir('.')]
files=[a.name for a in os.scandir('.')]
me=files[0]
path=files[0]
m_time
print(os.stat(me))
k=os.stat(me)
zdir(k)
k.count
k.count()
k.index
k.index()
k.st_atime
f=dir(k)
f=[a for a in f if not '__' in a]
mytimestamp = datetime.datetime.fromtimestamp(k.st_atime)
mytimestamp
datetime_str = mytimestamp.strftime( "%m - %d - %y  %H : %M : %S")
print(datetime_str)
datetime_str=mytimestamp.strftime("%m-%d-%y%H:%M:%S")
datetime_str=mytimestamp.strftime("%M-%d-%y%H:%M:%S")
datetime_str=mytimestamp.strftime("%month-%d-%y%H:%M:%S")
def mytime(x):
    mytimestamp = datetime.datetime.fromtimestamp(x)
    datetime_str=mytimestamp.strftime("%m-%d-%y%H:%M:%S")
    retrun datetime_str
    return datetime_str
os.stat(me)
os.stat(me).st_atime
mytime(os.stat(me).st_atime)
    datetime_str=mytimestamp.strftime("%m-%d-%y%-H:%M:%S")
    datetime_str=mytimestamp.strftime("%m-%d-%y-%H:%M:%S")
kk=os.stat(me)
from sh import ifconfig
print(ifconfig("eth0"))
import sh
print(sh.awk('{print $9}', _in=sh.ls('-la')))
def GCD(x , y):
    """This is used to calculate the GCD of the given two numbers.
    You remember the farm land problem where we need to find the 
    largest , equal size , square plots of a given plot?"""
    if y == 0:
    r = int(x % y)
    return GCD(y , r)
GCD(2333,44)
GCD(2334,44)
GCD(49,35)
path=r'/mnt/c/you/folkmix '
os.chdir(path)
files=[a.name for a in os.scandir('.') if 'mp' in a.name]
os.chdir(path.trim())
trim(path)
os.chdir(path.strip())
files=[a.name for a in os.scandir('.') if 'mp' in a.nameh]
os.stat(files[0]])
os.stat(files[0])
os.stat(files[0]).st_ctime
    ms=datetime.fromtimestamp(x)
    ms2=ms.strftime('%m-%d-%y-%H:%M:%S')
    print(f'ctime {mytime(a.ctime)}')
    print(f'st_ctime {mytime(a.st_ctime)}')
    print(f'st_ctime {mytime(os.stat(a).st_ctime)}')
print(mytime(os.stat(me).st_atime))
    return ms2
cps(me)
    print(f'st_atime {mytime(os.stat(a).st_atime)}')
    print(f'st_mtime {mytime(os.stat(a).st_mtime)}')
for a in files[:2]:
from mutagen.mp3 import MP3  
import numpy as np   
import numpy as np  
filez=[a.name for a in os.scandir('.') if 'mp' in a.name]
filez
mp3file = MP3(filez[0], ID3=EasyID3)
mp3file
from mutagen.id3 import ID3, TIT2
mutagen.File(filez[0])
mutagen.File(filez[0]).key()
mutagen.File(filez[0]).keys()
print(mutagen.File(filez[0]))
print(mutagen.File(filez[0]).keys())
mutagen.File(filez[0]).comment
from mutagen.easyid3 import EasyID3
print(EasyID3.valid_keys.keys())
audio = MP3(filez[0])
audio.pprint()
audio
zdir(audio)
audio.filename
audio.info
audio.info()
audio.keys()
audio.tags
path=r'/mnt/c/twit'
song=filez[0]
mp3file = MP3(song, ID3=EasyID3)  
print(mp3file)
song=filez[4]
mp3file = MP3(song, ID3=EasyID3)
mp3file['title']
mp3file['title']='nonsense'
mp3file.save()
filez[4]
mp3file['title']='LNL June 5'
os.rename(filez[0], 'lnl_june_5th.mp3')
for a in filez:
    mp3file = MP3(a, ID3=EasyID3)  
    print(mp3file['title'])
    print(mp3file['title'])path=r'/mnt/c/twit'
mp=MP3(filez[0],ID3=EasyID3)
mp['title']
mp['title']='lnl June 5'
mp.save()
    print(mp3file['album'])
com4=datetime.now().strftime("%m-%d-%y")
com4
com4=datetime.now().strftime("%b-%d-%y")
df
    a=a
    at='st_atime {mytime(os.stat(a).st_atime)}'
    ct=f'st_ctime {mytime(os.stat(a).st_ctime)}'
    mt='st_mtime {mytime(os.stat(a).st_mtime)}'
    print(f'{a} {at} {ct} {mt}') 
    at=f'st_atime {mytime(os.stat(a).st_atime)}'
    mt=f'st_mtime {mytime(os.stat(a).st_mtime)}'
    print(f'{a} \n') 
    print(f'{at} {ct} {mt}\n') 
    print(f'{at} {ct} {mt}\n')
.strftime('%m-%d-%y-%H:%M:%S').strftime('%m-%d-%y-%H:%M:%S')
datetime.now().strftime('%m-%d-%y-%H:%M:%S')
    ms2=ms.strftime('%m-%d-%y  -  %H:%M:%S')
datetime.now().strftime('%m-%d-%y-    %H:%M:%S')
fdh
NUM = 100
my_list = list(range(NUM))
my_list
my_dict = {item: item for item in my_list}
my_dict
pathlib_cwd
print(pathlib_cwd)
Path(file[0]).exists()
Path(files[0]).exists()
Path('delete').mkdir()
[a for a in Path('.').iterdir]
[a for a in Path('.').iterdir()]
[str(a) for a in Path('.').iterdir()]
list(Path('.').iterdir())
[str(a) for a in Path('.').iterdir() if 'del' in a]
[str(a) for a in Path('.').iterdir() ]
[str(a) for a in Path('.').iterdir() if 'x' in a]
for (root, dirs, file) in os.walk('/mnt/c/you'):
    for filename in file:
        if '.mp3' in filename:
            print(filename)
        if not '.mp3' in filename:
dir_path = pathlib.Path("/mnt/c/you")
for file in dir_path.iterdir():
    if file.is_file():
def run_fast_scandir(dir, ext):    # dir: str, ext: list
    subfolders, files = [], []
    for f in os.scandir(dir):
        if f.is_dir():
            subfolders.append(f.path)
        if f.is_file():
            if os.path.splitext(f.name)[1].lower() in ext:
                files.append(f.path)
    for dir in list(subfolders):
        sf, f = run_fast_scandir(dir, ext)
        subfolders.extend(sf)
        files.extend(f)
    return subfolders, files
folder='mnt/c/you'
subfolders, files = run_fast_scandir(folder, [".jpg"])
folder='/mnt/c/you'
subfolders, files = run_fast_scandir(folder, [".mp3"])
subfolders
print(subfolders)
{ 1,2}
kk={ 1,2}
kk.keys()
kk={ 1:2}
[(len(a),a) for a in 'jim']
dict([(len(a),a) for a in 'jim'])
chr('m')
ord('m')
dict([(ord(a),a) for a in 'jim'])
chr(1)
str(chr(1))
int(chr(1))
ord(chr(22))
chr('a')
chr(97)
[chr(a) for a in range(100)]
[(a,chr(a)) for a in range(1000)]
print([(a,chr(a)) for a in range(1000)])
print([(a,chr(a)) for a in range(300)])
n=list(range(10)]
n=list(range(10))
o=[]
for a in n:
    o.append(n**2)
    o.append(a**2)
[a**2 for a in list(range(10))]
[a**2 
for a in list(range(10))]
with open('example.txt', 'w', encoding='utf-8') as my_file:
    a_list = ['bobby', 'hadz', 'com']
    a_str = '\n'.join(a_list)
    my_file.write(f'{a_str}\n')
import pyclip
help('modules')
import clipboard
zdir(clipboard)
dir
import jedi
dir(jedi)
sheet('cards')
rootdir = 'path/to/dir'
for path in Path(rootdir).iterdir():
    if path.is_dir():
        print(path)
e 1
rootdir = '.'
a=[]
        a.append(path)
[n for b in a]
[b= for b in a]
[b for b in a]
a[2]
zdir(a[2])
a[2].rename('xx')
a[2].name
[b.name for b in a]
[b.name for b in a if not '.' in b.name]
[b for b in a if not '.' in b.name]
[a for a in Path('.')]
[a.name for a in Path('.').iterdir()]
[a for a in Path('.').iterdir() if a.is_dir()]
[a for a in Path('.').iterdir() if a.is_dir() and re.match('\d', a.name)]
my=[a for a in Path('.').iterdir() if a.is_dir() and re.match('\d', a.name)]
[a.name for a in my]
for b in my:
    print(b.name)
    print(re.sub(r'[^a-zA-Z0-9]','',b.name))
my[1]
    newname=re.sub(r'[^a-zA-Z0-9]','',b.name)
    b.rename(newname)
1_500_000/20
1_500_000/200
1_500_000/40
1_500_000/50
'abc'.split()
[a for a in 'abc']
st='https://picsum.photos/600/400/\?random'
ar=[a for a in 'abc']
ar[1]
st='https://picsum.photos/600/400/\?random -O '
[st+ a for a in ar]
with open('a.sh' ,'w') as f:
    f.write(ss)
ar=[a for a in 'abcdefghi']
    f.write("\n".join([st + a + '.jpg' for a in ar]))
[a for a in os.scandir('.') if 'jpg' in a]
[a for a in os.scandir('.') if 'jpg' in a.name]
[a.name for a in os.scandir('.') if 'jpg' in a.name]
f=[a.name for a in os.scandir('.') if 'jpg' in a.name]
k=[f'<img src="{a}" alt="" width="100px" height="100px">'' for a in f]
k=[f'<img src="{a}" alt="" width="100px" height="100px">' for a in f]
with open('pic','w') as x:
    x.write('\n'.join(k))
image = Image.open(f[1])
zdir(image)
image.format
image.mode
image.size
os.stat(f[1])
os.stat(f[1]).st_size
f[1]
os.stat(f[9]).st_size
os.stat(f[8]).st_size
image.info
20/16
200/16
200/12
url = 'http://127.0.0.1:8000/api/tutorials'
r = requests.post(url, json={"title": "from python", "description":"not hard"})
print(r.json())
r = requests.post(url, json={"title": "from python 7-10", "description":"not hard"})
[a for a in files if 'spoken' in a]
[a for a in files if not 'spoken' in a]
len([a for a in files if not 'spoken' in a])
files=[a for a in files if not 'spoken' in a]
random.shuffle(files)
#!/home/steff007/p11/Python-3.11.3/python
#https://stackoverflow.com/questions/18394147/how-to-do-a-recursive-sub-folder-search-and-return-files-in-a-list
#!/usr/bin/env python
psScript="/mnt/c/all/ps/son.ps1"
with open(psScript,'r') as f:
    lines = f.readlines()
lines
lines[3]
lines[2]
    lines[2]=f'vlc -Z ${fn} '
    myaut.write('\n'.join(lines))
    linest=[line for line in lines if line.strip() != '']
linest
linest[2]
    linest[2]=f'vlc -Z ${fn} '
    myaut.write('\n'.join(linest))
    myaut.write(linest)
    myaut.write(str(linest))
    myaut.write(''.join(linest))
from sqlalchemy import create_engine
engine = create_engine("sqlite+pysqlite:///:memory:", echo=True, future=True)
dir(sqlalchemy)
import sqlalchemy
sqlalchemy.__version__
from sqlalchemy import text
with engine.connect() as conn:
    result = conn.execute(text("select 'hello world'"))
    print(result.all())
    conn.execute(text("CREATE TABLE some_table (x int, y int)"))
    conn.execute(
        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
        [{"x": 1, "y": 1}, {"x": 2, "y": 4}],
    conn.commit()
with engine.begin() as conn:
        [{"x": 6, "y": 8}, {"x": 9, "y": 10}],
    result = conn.execute(text("SELECT x, y FROM some_table"))
    for row in result:
        print(f"x: {row.x}  y: {row.y}")
result = conn.execute(text("select x, y from some_table"))
for x, y in result:
    print(x,y)
from sqlalchemy import create_engine,text
engine=create_engine("sqlite:////sample.db")
with engine.connect() as connection:
    result=connection.execute(text('select "hello"'))
import sqlalchemy as db
engine = db.create_engine('sqlite:///census.sqlite')
connection = engine.connect()
metadata = db.MetaData()
census = db.Table('census', metadata, autoload=True, autoload_with=engine)
engine = db.create_engine('dialect+driver://user:pass@host:port/db')
file=r'/mnt/c/projects/alchemy/sample.db'
os.stat(file)
db_uri = f"SQLite:///file"
db_uri
db_uri = f"SQLite:///{file}"
from SQLAlchemy import create_engine
eng = create_engine(db_uri)
import sqlalchemy.dialects.sqlite
import sqlalchemy.dialects.SWLite
import sqlalchemy.dialects.SQLite
dir( sqlalchemy.dialects.sqlite )
dir(context)
uri
[a for a in dir() not if a='a']
[a for a in dir() if not a='a']
[a for a in dir() if not a=='a']
[a for a in dir() if not a.startswith('_')]
import pyperclip
db_uri='SQLite:///mnt/c/projects/alchemy/sample.db'
engine=create_engine(db_uri)
db_uri='sqlite:////mnt/c/projects/alchemy/sample.db'
db_uri = f"sqlite:///file"
# db_uri='sqlite:////mnt/c/projects/alchemy/sample.db'
eng.execute('CREATE TABLE "March12" ('
'id INTEGER NOT NULL,'
'first VARCHAR, '
'second VARCHAR, '
'third VARCHAR, '
'PRIMARY KEY (id));')
eng.execute('INSERT INTO "March12" '
'(id, first,second,third) '
'VALUES (1,"Sivaraman","Welcome To My Domain its the second example","Thanks for your spenting time")')
outs = eng.execute('SELECT * FROM '
'"March12"')
for r1 in outs:
    print(r1)
outs = eng.execute('SELECT * FROM "March12"')
print(outs.fetchall())
eng=create_engine(db_uri)
with eng.connect() as connection:
eng
db_uri = f"sqlite:///{file}"
print(dir(eng))
ct='''
'CREATE TABLE "March12" ('
ct
    result=connection.execute(text(ct))
ct=''' 
CREATE TABLE "react" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "text" varchar(70) NOT NULL, "day" varchar(200) NOT NULL, "reminder" bool NOT NULL);
from main import engine
from models.base import Model
from models.user import *
Model.metadata.create_all(engine)
from sqlalchemy import desc
from models.user import User, Role
all_users = User.query.all()
all_users
User.query.first()
User.query.count()
from main import session
from models.user import Preference, User
user_preference = (
    Preference.query
    .join(Preference.user)
    .filter(User.email == "johndoe@gmail.com")
    .first()
user_preference.currency = "GBP"
session.commit()
import psycopg2
conn = psycopg2.connect(database="testdb",
                        host="localhost",
                        user="steff007",
                        password="stars1",
                        port="5432")
cursor.execute("select * from product;")
print(cursor.fetchone())
print(cursor.fetcall())
print(cursor.fethcall())
print(cursor.fetchall())
from sqlalchemy.engine import URL
url = psycopg2.connect(database="testdb",
url = URL.create(
    drivername="postgresql",
    database="testdb",
                        username="steff007",
engine = create_engine(url)
from sqlalchemy import Column, Integer, String, DateTime, Text
from sqlalchemy.orm import declarative_base
Base = declarative_base()
class Article(Base):
    __tablename__ = 'articles'
    id = Column(Integer(), primary_key=True)
    slug = Column(String(100), nullable=False, unique=True)
    title = Column(String(100), nullable=False)
    created_on = Column(DateTime(), default=datetime.now)
    updated_on = Column(DateTime(), default=datetime.now, onupdate=datetime.now)
    content = Column(Text)
    author_id = Column(Integer(), ForeignKey('authors.id'))
from sqlalchemy import Column, Integer, String, DateTime, Text,ForeignKey
Article.__table__
from sqlalchemy.orm import relationship, backref
class Author(Base):
    __tablename__ = 'authors'
    firstname = Column(String(100))
    lastname = Column(String(100))
    email = Column(String(255), nullable=False)
    joined = Column(DateTime(), default=datetime.now)
    articles = relationship('Article', backref='author')
Base.metadata.create_all(engine)
from sqlalchemy.orm import sessionmaker
Session = sessionmaker(bind=engine)
session = Session()
ezz = Author(
    firstname="Ezzeddin",
    lastname="Abdullah",
    email="ezz_email@gmail.com"
ahmed = Author(
    firstname="Ahmed",
    lastname="Mohammed",
    email="ahmed_email@gmail.com"
article1 = Article(
    slug="clean-python",
    title="How to Write Clean Python",
    content="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    author=ezz
session.add(article1)
new=cursor.execute("select * from product;")
[a for a in new]
dir(new)
ff=cursor.fetchall()
cursor.execute("SELECT * FROM pg_catalog.pg_tables;")
tables=cursor.fetchall()
tables
tables[1]
tables[0]
print(rj)
urlOpenAi=' http://127.0.0.1:8000/openapi.json'
myReq(urlOpenAi)
stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
stuff.insert(0, stuff[:])
pp = pprint.PrettyPrinter(indent=4)
pp.pprint(stuff)
import asyncio
async def main():
    print('Hello ...')
    await asyncio.sleep(1)
    print('... World!')
asyncio.run(main())
items = {
    0: Item(name="Hammer", price=9.99, count=20, id=0, category=Category.TOOLS),
    1: Item(name="Pliers", price=5.99, count=20, id=1, category=Category.TOOLS),
    2: Item(name="Nails", price=1.99, count=100, id=2, category=Category.CONSUMABLES),
class Item(BaseModel):
    name: str
    price: float
    count: int
    id: int
    category: Category
from pydantic import BaseModel
class Category(Enum):
    TOOLS = 'tools'
    CONSUMABLES = 'consumables'
from enum import Enum
from fastapi import FastAPI, HTTPException
app = FastAPI()
items[1]
type(items[1])
type(items[1])[1]
sh=sheet('cards')
    print(dd)
    #return dd
cps('jim')
sh
sh=sheet('data')
sh.values
sh.values()
type(sh.values)
sh('values')
sh('range')
type(sh)
sh[1]
sh.keys()
sh.keys(1)
sh.keys()[1]
[a for a in sh.keys()]
sh([a for a in sh.keys()][1])
[a for a in sh.keys()][1]
list(sh.items())
list(sh.items())[2]
list(sh.items())[3]
print(sh)
len(sh)
sh['range']
sh['values']
v=sh['values']
v=sh['values'][0]
sh=sh['values']
start=r'/home/steff007/.ipython/profile_default/startup/start.py'
from start import sheet
with open(start,'r') as myaut:
    console.log(myaut)
    print(myaut)
    print(myaut.readlines())
from export import sheet
from export.py import sheet
start=r'/home/steff007/.ipython/profile_default/startup/start'
start=r'/home/steff007/.ipython/profile_default/startup/st'
    myaut.readlines()
from '/home/steff007/.ipython/profile_default/startup/start.py' import sheet
from r'/home/steff007/.ipython/profile_default/startup/start.py' import sheet
for p in sys.path:
    print( p )
sys.path.append('/mnt/c/projects')
sh=sheet('data')['values']
int('2')
42*40*52
def a():
    v=input()
a()
    v=input() 'enter'
n=22
n,x=[22,33]
n/(n+x)
n,x=[1,2]
from sqlalchemy_utils import database_exists, create_database
from local_settings import postgresql as settings
engine.url.database
    # author_id = Column(Integer(), ForeignKey('authors.id'))
    __tablename__ = 'aaaarticles'
    #
print('aaaaaaaaaaaaaaaaaa')
from psycopg2 import connect
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
def show_query(title, qry):
    print('%s' % (title))
    cur.execute(qry)
    for row in cur.fetchall():
        print(row)
    print('')
dbname = 'tempdb'
print('connecting to default database ...')
con = connect(user ='steff007', host = 'localhost', password = 'stars1', port=5492)
con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
cur = con.cursor()
show_query('current database', 'SELECT current_database()')
cur.execute('CREATE DATABASE ' + dbname)
show_query('available databases', 'SELECT * FROM pg_database')
cur.close()
con.close()
con = connect(user ='steff007', host = 'localhost', password = 'stars1', port=5432)
    cursor.execute(qry)
    for row in cursor.fetchall():
from sqlalchemy.dialects.sqlite import *
SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args = {"check_same_thread": False})
from sqlalchemy.orm import sessionmaker, Session
session = sessionmaker(autocommit=False, autoflush=False, bind=engine)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
class Books(Base):
   __tablename__ = 'book'
   id = Column(Integer, primary_key=True, nullable=False)
   title = Column(String(50), unique=True)
   author = Column(String(50))
   publisher = Column(String(50))
   Base.metadata.create_all(bind=engine)
1616-1564
myq='''
CREATE TABLE IF NOT EXISTS public.stuff
(
    id integer NOT NULL DEFAULT nextval('author_id_seq'::regclass),
    name character varying COLLATE pg_catalog."default",
    age integer,
    time_created timestamp with time zone DEFAULT now(),
    time_updated timestamp with time zone,
    CONSTRAINT author_pkey PRIMARY KEY (id)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.stuff
    OWNER to postgres;
cursor.execute(myq)
conn.COMMIT()
    id integer,
    name character ,
import con
from con import conn
con.cursor
    word character,
    name string ,
    word string,
insert into stuff  (name, word)
VALUES ('first','word');
DROP TABLE stuff;
    id serial,
    name varchar(260) ,
    word varchar(260),
from con import cursor
cursor.execute("select * from stuff")
test='''
cursor.execute(test)
sqq='''
VALUES ('lbaaa','blah');
cursor.execute(sqq)
def myfun(x,y):
    sql=f'insert into stuff(name,word)
    VALUES ({x},{y})'
    print(sql)
    sql=f'insert into stuff(name,word) VALUES ({x},{y})'
myfun('jo','jo')
    cursor.execute(sql)
    sql=f"insert into stuff(name,word) VALUES ('{x}','{y}')"
sql
conn.rollback()
        cursor.execute(sql)
        conn.commit()
        print(f'Error {e}')
        print('Anything else that you feel is useful')
        conn.rollback()
myfun('jimbo','jones')
myfun('jones')
myfun('jones',333)
from con import cursors
myfun('Friday','August')
    sql=f"insert into author(name,age) VALUES ('{x}','{y}')"
myfun('Friday','Au')
myfun('Friday',44)
myfun('shakespear','52')
myfun('turgenev','52')
(1,2)==(1,2)
(1,2)==(2,1)
type((1,2))
type{1,2}
type({1,2})
{1,2}=={2,1}
{1:3}
type({1:3})
t = ('foo', 'bar', 'baz', 'qux')
t[1]
[1,3]=t
['a','b']=t
('a','b')=t
(a,b)=t
len(t)
(a,b,c,d)=t
b,c='jim','steffes'
(b,c)='jim','steffes'
(b,c)=('jim','steffes')
(b,c)=('tom','steffes')
(b,c)=['tom','steffes']
[b,c]=['tom','steffes']
[b,c]='jim steffes'.split()
def bulkInsert(records):
        sql_insert_query = """ INSERT INTO author (name, age) 
                           VALUES (%s,%s) """
        # executemany() to insert multiple rows
        result = cursor.executemany(sql_insert_query, records)
        print(cursor.rowcount, "Record inserted successfully into author table")
    except (Exception, psycopg2.Error) as error:
        print("Failed inserting record into mobile table {}".format(error))
        # closing database connection.
        if conn:
            cursor.close()
            conn.close()
            print("PostgreSQL connection is closed")
records_to_insert = [('jim','steffes'), ('george','orwell')]
bulkInsert(records_to_insert)
t=('jim',1)
type(t)
t.append(3)
zdir(t)
[a,b]=t
t=t+5
t=t+(5)
t=t+(5,)
t[:2]
t=t+t
t[-1]
t=t+[1,2,3]
t=t+tuple([1,2,3])
from pydantic import BaseModel, validator
class User(BaseModel):
    username: str
    password: str
    age: int
    @validator('password')
    def password_must_be_strong(cls, v):
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters long.')
        return v
# Validate incoming data
user_data = {'username': 'johndoe', 'password': 'password', 'age': 30}
user = User(**user_data)
# Raises a ValueError: Password must be at least 8 characters long.
    @field_validator('password')
from pydantic import BaseModel, validator, field_validator
user_data = {'username': 'johndoe', 'password': 'word', 'age': 30}
from pydantic import BaseModel,  field_validator
#https://errors.pydantic.dev/2.0.2/migration/
user_data = {'username': 'johndoe', 'password': '123456word', 'age': 30}
user_data
type(user_data)
import asyncpg
conn = await asyncpg.connect(
    user=steff007,
    password=stars1,
    database=fastapi,
    host=localhost,
    port=5432)
    user='steff007',
    password='stars1',
    database='fastapi',
    host='localhost',
conn.execute(
            f'CREATE DATABASE xxx"'
            f'CREATE DATABASE vvvv"'
import psycopg
cstring=(
cstring='''    
user='steff007',
password='stars1',
database='fastapi',
host='localhost',
port=5432)
cstring
conn=psycopg.connect(cstring)
conn=psycopg.connect(
conn = pycopg.connect(database="xxx",
conn = psycopg.connect(database="xxx",
conn = psycopg.connect(dbname="xxx",
sql='''
SELECT datname as "Name"
FROM pg_catalog.pg_database 
ORDER BY 1;
cursor.execute(sql)
print(list(cursor.fetchall()))
ml=list(cursor.fetchall())
ml
list(ml[1])
[a for a in ml]
[map(a,list) for a in ml]
#[list(map(str,a)) for a in data.items()]
[list(map(str,a)) for a in ml]
[list(map(str,a)) for a in cursor.fetchall()]
[list(map(str,a)) for a in cursor.fetchall()][1]
ml=[list(map(str,a)) for a in cursor.fetchall()]
print(ml)
[str(a) for a in ml]
[str(map(str,a)) for a in ml]
[a[0] for a in ml]
from databases import Database
conn = Database(dbname="xxx",
                    host="localhost",
                    user="steff007",
                    password="stars1",
                    port="5432")
                        url="localhost",
conn = database.connect(dbname="xxx",
DATABASE_URL
cps(DATABASE_URL)
database = Database(postgresql://steff007:stars1@localhost:5432/fastapi?sslmode=prefer)
string='''postgresql://steff007:stars1@localhost:5432/fastapi?sslmode=prefer'''
database = Database(string)
await database.connect()
query = """CREATE TABLE HighScores (id INTEGER PRIMARY KEY, name VARCHAR(100), score INTEGER)"""
await database.execute(query=query)
# Insert some data.
query = "INSERT INTO HighScores(name, score) VALUES (:name, :score)"
values = [
    {"name": "Daisy", "score": 92},
    {"name": "Neil", "score": 87},
    {"name": "Carol", "score": 43},
await database.execute_many(query=query, values=values)
# Run a database query.
query = "SELECT * FROM HighScores"
rows = await database.fetch_all(query=query)
print('High Scores:', rows)
query = "INSERT INTO HighScores(id,name, score) VALUES (:name, :score)"
    {1,"name": "Daisy", "score": 92},
    {2,"name": "Neil", "score": 87},
    {3,"name": "Carol", "score": 43},
query = "INSERT INTO HighScores(id,name, score) VALUES (id,:name, :score)"
query = """CREATE TABLE HighScores (id SERIAL PRIMARY KEY, name VARCHAR(100), score INTEGER)"""
await database.commit()
query
values
#postgresql://steff007:stars1@localhost:5432/fastapi?sslmode=prefer
string
query = "INSERT INTO highscores(name, score) VALUES (:name, :score)"
query = "SELECT * FROM highscores"
[a for a in rows]
rows[1]
print(rows[1])
zdir(rows)
zdir(rows[1])
rows[1].values
rows[1].values()
async for row in database.iterate(query=query):
    print(row)
rows[1]()
rows[1].count
rows[1].count()
rows[1].count(value)
rows[1].count('a')
[a for a in rows[1].values()]
for a in rows:
    print(rows.values())
    print(a.values())
    print(a[1].values())
    a[1]
    print(a[1])
    print(a[1], a[2])
row[1][1]
row[1]
conn_string = "host='localhost' dbname='my_database' user='postgres' password='secret'"
conn_string
conn_string = "host='localhost' dbname='fastapi' user='steff007' password='stars1'"
string = "host='localhost' dbname='fastapi' user='steff007' password='stars1'"
database
rows[1][1]
rows[2][1]
[a[1] for a in rows]
rows[1][:]
[a[:] for a in rows]
query = "delete * FROM highscores"
query = "delete  FROM highscores"
query = "select *  FROM highscores"
# Create a table.
query = """CREATE TABLE todo (id SERIAL PRIMARY KEY, name VARCHAR(100), score INTEGER)"""
query = "INSERT INTO todo(name, score) VALUES (:name, :score)"
    {"name": "learn golang", "score": 92},
with open(works,'r') as f:
    for line in f:
        print(f)
with open(works.py,'r') as f:
with open('works.py','r') as f:
        print(line)
        print(type(line))
        print(len(line))
        print(len(line), line)
        print(line.trim())
        print(line.strip())
values2=[
    ('peter',2),
    ('peter',2)
values2
values2[0]
query = "INSERT INTO todo(name, score) VALUES (0, 1)"
query = "INSERT INTO todo(name, score) VALUES (values2[0], values2[1])"
await database.execute_many(query=query, values=values2)
stmt = table.insert().returning(
    (table.c.first_name + " " + table.c.last_name).label("fullname")
print(stmt)
table='x'
values=('jim',2)
values=(name:'jim',score:2)
values={name:'jim',score:2}
values=('name':'jim','score':2)
values={'name':'jim','score':2}
values=[
{'name':'jim','score':2}
import csv
data = ['Afghanistan', 652090, 'AF', 'AFG']
header = ['name', 'score']
data = ['Afghanistan', 652090']
with open('countries.csv', 'w', encoding='UTF8') as f:
    writer = csv.writer(f)
    # write the header
    writer.writerow(header)
    # write the data
    writer.writerow(data)
data = ['Afghanistan', 652090]
data = ['Afghanistan', 'kabul']
data = ['This ? is , the coutry:;', 'kabul']
data = [['This ? is , the coutry:;', 'kabul']
['This ? is , the coutry:;', 'kabul']]
data = [['This ? is , the coutry:;', 'kabul']]
data = [['This ? is , the coutry:;', 'kabul'],
['This ? is , the coutry:;', 'kabul']
header = ['word', 'mean']
data = [
    ['Albania', 28748, 'AL', 'ALB'],
    ['Algeria', 2381741, 'DZ', 'DZA'],
    ['American Samoa', 199, 'AS', 'ASM'],
    ['Andorra', 468, 'AD', 'AND'],
    ['Angola', 1246700, 'AO', 'AGO']
with open('countries.csv', 'w', encoding='UTF8', newline='') as f:
    # write multiple rows
    writer.writerows(data)
    ['nothin','from the, word nothin']
    ['nothin','from the, word nothin'],
records_to_insert = [('fill','peters'), ('frank','churche')]
ll['values']
ll['values'][1]
tuple(ll['values'][1])
ll=ll['values']
[tuple(a) for a in ll]
bulkInsert([tuple(a) for a in ll])
    except (Exception, psycopg.Error) as error:
[tuple(a) for a in ll][0]
bi=[tuple(a) for a in ll]
print(bi)
myt = [('fill','peters'), ('frank','churche')]
bulkInsert(myt)
            # cursor.close()
            # conn.close()
bi
records_to_insert
bulkInsert(bi)
bi[:2]
bulkInsert(bi[:2])
bulkInsert(bi[:8])
bi[8:]
bi[8]
bulkInsert(bi[:9])
bulkInsert(bi[8])
bi[8:9]
bi[8:10]
[(a,b) for a,b in enumerate(bi)]
sql='delete from authors'
sql='delete from author'
sql='select * from author'
fet=cursor.execute(sql)
fet
fet.fetchall()
sql='select name,author from author'
sql='select name,age from author'
ml=[list(map(str,a)) for a in fet.fetchall()]
print([a[0] for a in ml])
print([a[0],a[1] for a in ml])
print(([a[0],a[1]) for a in ml])
print([(a[0],a[1]) for a in ml])
r.headers
r.body
r.text
[a for a in r.headers]
[a for r.headers[a] in r.headers]
[r.headers[a] for in in r.headers]
[r.headers[a] for a in r.headers]
[(a,r.headers[a]) for a in r.headers]
[list((a,r.headers[a])) for a in r.headers]
[list((a,r.headers[a])) for a in r.text]
r
url = 'http://httpbin.org/post'
payload = {
    'website':'dataquest.io',
    'courses':['Python','SQL']
r = requests.post(url, data=payload)
print('Response Content:\n',r.text)
url='http://127.0.0.1:8000/notes/?skip=0&take=5'
url='https://jsonplaceholder.typicode.com/todos'
r=requests(url)
r=request(url)
r.headers['Content-Type']
r.headers['Content-Type'].json()
r.content
r.json()
type(r)
r.json()[3:]
r.json()[:3]
zdir(r)
r.connection
r.connection()
r.encoding
r.history
r.url
r.json
r.raw()
r.raw
r.raw.read(10)
r.raw.read(100)
s.raw
s.raw.read(10)
s.raw.read(100)
with open('stream', 'wb') as fd:
    for chunk in s.iter_content(chunk_size=128):
        fd.write(chunk)
r.headers['server']
server('https://www.nytimes.com/')
url='https://www.nytimes.com/'
server('https://wikipedia.org/')
m=server('https://wikipedia.org/')
m.headers
zdir(data)
data.text
data.raw
data.headers
s.headers
[a for a in s.headers]
s=server('https://startribune.com')
[[a, s.hearders[a]] for a in s.headers]
[[a, s.headers[a]] for a in s.headers]
s=server('https://startribunexxxxxx.com')
s=server(http://localhost:8000/notes/)
s=server('http://localhost:8000/notes/')
s.text
payload={"text": "monnnnnnnnnnnnn", "word": "xxxxxxxxxxxxxxxxxx"}
payload
url='http://localhost:8000/notes/' 
type(payload)
[a for a in payload]
payload={"text": "m", "word": "o"}
payload={"text": "pp", "word": "qq"}
payload={text: "pp", word: "qq"}
json.dumps(payload)
import JSON
r = requests.post(url, json.dumps(payload))
payload={"text": "something", "word": "Good"}
with open('/home/steff007/xd', 'r' ) as xd:
    content =xd.read()
    print(content)
    for line in xd:
        line=line.split(' ')
'jim is'.split(' ')
        # line=line.split(' ')
        ll=line.split(' ')
        print(ll)
        # print(line.strip())
        ll=xd.readlines()
pp=open('/home/steff007/xd', 'r' )
pp.readlines()
pp.readlines().replace('\n','')
xx=pp.readlines()
[a.strip() for a in xx]
[a for a in xx]
[a.strip() for a in pp]
url='http://localhost:8000/notes/'
r.json()[:-3]
r.json()[-3:]
url = 'https://api.github.com/users/kennethreitz/repos?page=1&per_page=10'
r = requests.head(url=url)
r.headers['link']
d=requests.delete('http://localhost:8000/notes/21/')
d.text
d=requests.delete('http://localhost:8000/notes/3/')
cps(r.json())
len(r.json())
type(r.json())
r.json()[2]
[a for a in r.json]
[a for a in r.json()]
r.json()[1][1]
r.json()[1]
[a for a in r.json()[1]]
print([a for a in r.json()[1]])
url='http://httpbin.org/'
r.text.json()
r.status_code
r.json()['Host']
r.json()['origin']
js=r.jsoon()
js=r.json()
js
del js['origin']
params={
    "name": "mike",
    "age" : 22
r.args
[a for a in r]
r['args']
print(r)
print(r.url)
data={
r=requests.post(url,data=data)
url='http://httpbin.org/post'
request.codes
requests.codes
zdir(request.codes)
zdir(requests.codes)
requests.codes.not_found
response.text
with open('ima.png', 'rb') as img:
    img.write(r.content)
with open('ima.png', 'wb') as img:
proxies={
"http": "139.99.237.62:80",
"https": "139.99.237.62:80",
proxies
c=[4,8,82,4]
for a in c:
    if a in all:
    all.append(a)
    return all
all=[]
t='''
Confucius's teachings and philosophy underpin East Asian culture and society, remaining influential across China and East Asia to this day.[2] His philosophical teachings, called Confucianism, emphasized personal and governmental morality, correctness of social relationships, justice, kindness, and sincerity.
c=t.split(' ')
    print(all) 
    print(all)
print(c)
len(c)
len(all)
[a for a in all if not '\n' in a]
c[0].strip()
[a for a in t.split(' ')]
'jim'.lower()
[a.lower for a in t.split(' ')]
[a.lower() for a in t.split(' ')]
[a.lower().strip() for a in t.split(' ')]
re.sub('^[a-z]','','jim23')
re.sub(r'^[a-z]','','jim23')
re.sub(r'[^a-z]','','jim23')
re.sub(r'[^a-zA-Z]','','jim23')
re.sub(r'[^a-zA-Z]','','jimStee23')
b=[a.lower().strip() for a in t.split(' ')]
c=[re.sub(r'[^a-zA-Z]','',a) for a in b)]
c=[re.sub(r'[^a-zA-Z]','',a) for a in b]
' '.join(c)
' '.join(all)
c=[re.sub(r'[^a-zA-Z]','',_) for _ in b]
[_ for _ in b]
nums = [random.randint(0, 2 << 32) for _ in range(n)]
n=100
print(nums)
[f'{a:,} for a in nums]
[f'{a:,}' for a in nums]
print([f'{a:_}' for a in nums])
2 << 32
2 << 5
2 << 100
2 ** 32
f'{2**32:,}'
f'{2<<32:_}'
random()
random.Random
random.Random()
random.randomint
random.randint(4,2)
random.randint(0, 2 << 32)
random.randint(0, 24)
random.randint(0, 10**10)
[random.randint(2<<32) for _ in range(10)]
[random.randint(0,2<<32) for _ in range(10)]
[f'{random.randint(0,2<<32:_)} for _ in range(10)]
[f'{random.randint(0,2<<32:_):_} for _ in range(10)]
[f'{random.randint(0,2<<32:_):_}' for _ in range(10)]
[f'{random.randint(0,2<<32:_)}' for _ in range(10)]
f'{random.randint(0, 10**10):_}'
[f'{random.randint(0,2<<32):_}' for _ in range(10)]
[f'{random.randint(0,2<<2):_}' for _ in range(10)]
n=[f'{random.randint(0,2<<2):_}' for _ in range(10)]
type(n[1])
def uni(g):
    all=[]
    for a in g:
        if a in all:
        all.append(a)
uni(n)
start = time.perf_counter()
total = uni(n)
elapsed = time.perf_counter() - start
print(f"{unique_sum.__name__}: {elapsed * 1000:.2f}")
print(f"{uni}: {elapsed * 1000:.2f}")
n=[f'{random.randint(0,2<<2):_}' for _ in range(10000)]
uni
n=[random.randint(0,2<<32) for _ in range(100)]
n=[random.randint(0,2<<32) for _ in range(2<<8)]
len(n)
2<<9
2<<64
n=[random.randint(0,2<<32) for _ in range(2<<64)]
set(c)
" ".join(c)
" ".join(set(c))
len(set(c))
from sortedcollections import OrderedSet
iterable = "hello-educative"
ordr_set = OrderedSet(iterable)
print(ordr_set)
def sets(nums):
    seen = set()
    for n in nums:
        if n in seen:
        seen.add(n)
    return seen
sets(c)
def dic(nums):
    seen = {}
        seen[n] = None
    print(seen)
    return total
dic(c)
ss=dic(c)
[_ for _ in ss]
total = dic(n)
print(f"{dic}: {elapsed * 1000:.2f}")
print(f"uni: {elapsed * 1000:.2f}")
total
    return [_ for _ in seen]
len(total)
n=[random.randint(0,7) for _ in range(2<<8)]
len(dic(c))
" ".join(dic(c))
import time,random
print(f"dic: {elapsed * 1000:.2f}")
dtotal = dic(n)
utotal = uni(n)
utotal
dtotal
n=[re.sub(r'[^a-zA-Z]','',_) for _ in b]
print(len(utotal), len(dtotal))
n=[random.randint(0,7) for _ in range(2<<10)]
n=[random.randint(0,2**100) for _ in range(2<<10)]
n[1]
n=[random.randint(0,2**100) for _ in range(2<<20)]
n=[random.randint(0,2**100) for _ in range(2<<12)]
dtotal[:-4]
dtotal[-4:]
utotal[-4:]
f'2>>10:_'
f'{2>>10:_}'
f'{2<<10:_}'
f'{2<<100:_}'
f'{2<<100:,}'
f'{2<<1:,}'
from pydantic import BaseModel, PositiveInt
    id: int  
    name: str = 'John Doe'  
    signup_ts: datetime | None  
    tastes: dict[str, PositiveInt]  
external_data = {
    'id': 123,
    'signup_ts': '2019-06-01 12:22',  
    'tastes': {
        'wine': 9,
        b'cheese': 7,  
        'cabbage': '1',  
external_data
[_ for _ in external_data]
external_data['tastes']
user = User(**external_data)
user
zdir(user)
user.json
user.json()
user.model_dump()
a = 1 + '0'
a = 1 + str('0')
a = 1 + int('0')
a = 1 + int('2')
def sum_xy(x: 'an integer', y: 'another integer') -> int:
    return x + y
sum(2,3)
sum_xy(3,8)
sum_xy('3',8)
sum_xy(2,3)
name: int
age: int
name = input("Your name?")
name
from typing import Dict, Optional, Union
dict_of_users: Dict[int, Union[int,str]] = {
    1: "Jerome",
    2: "Lewis",
    3: 32
user_id: Optional[int]
user_id = None # valid
user_id = 3 # also vald
user_id = "Hello" # not valid!
user_id
dict_of_users
dict_of_users.3
dict_of_users['3']
dict_of_users[3]
dict_of_users[3]='x'
todos=r.json()[:3]
todos
[a for a in todos]
[a for a in todos[1]]
cps([a for a in todos[1]])
rss
rss=rs.json()[-3:]
data= {
  "userId": 10,
  "id": 200,
  "title": "ipsam aperiam voluptates qui",
  "completed": False
 }
x`
r = requests.post(url, json.dumps(data))
url='http://localhost:8000/todos/'
rr.json()
r=requests.post(url,json.dumps(data))
json.dumps(data)
data['title']="something new"
url = 'http://localhost:8000/todos'
url = 'http://localhost:8000/'
r.raw.read(1000)
data={ "id": 2, "name": "string", "secret_name": "string", "age": 0}
url='http://localhost:8000/heroes/'
curl -X 'POST' \
  'http://localhost:8000/notes/' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "text": "monnnnnnnnnnnnn", "word": "xxxxxxxxxxxxxxxxxx"
}'
cps(r.json()[1])
data={'text': 'from fpython', 'word': 'Saturday'}
        sql_insert_query = """ INSERT INTO notes (text, word) 
        print("Failed inserting record into  table {}".format(error))
        breakpoint()
            print("PostgreSQL connection is commented")
60/65
60/125
65/125
60*60*24
60*60*24*30
60*60*24*30*365
from sqlalchemy import Column, DateTime, ForeignKey, Integer, String, Float
from typing import List
import databases
from fastapi import FastAPI, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.sql import func
notes = sqlalchemy.Table(
    "notes",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("text", sqlalchemy.String),
    sqlalchemy.Column("word", sqlalchemy.String),
    sqlalchemy.Column("score", sqlalchemy.String, server_default="abc"),
    sqlalchemy.Column('date_entered', sqlalchemy.DateTime, server_default=func.now())
engine = sqlalchemy.create_engine(
    DATABASE_URL, pool_size=3, max_overflow=0
metadata.create_all(engine)
class NoteIn(BaseModel):
    text: str
    word: str
    score: str
class Note(BaseModel):
    date_entered: DateTime
lalchemy.create_engine(
        text: str
            word: str
score: str
        id: int
            text: str
word: str
date_entered: DateTime
import pydantic
import pydantic.utils
from sqlmodel import SQLModel, Field
class Article(SQLModel, table=True):
    created_at: datetime.datetime = Field(
        default_factory=datetime.datetime.utcnow,
from sqlite3 import Error
def create_connection(db_file):
    """ create a database connection to a SQLite database """
    conn = None
        conn = sqlite3.connect(db_file)
        print(sqlite3.version)
    except Error as e:
        print(e)
create_connection(r"/mnt/c/projects/MyFast/sql_app.db")
db_file=r"/mnt/c/projects/MyFast/sql_app.db"
    """ create a database connection to the SQLite database
        specified by db_file
    :param db_file: database file
    :return: Connection object or None
    """
        return conn
    return conn
xx=create_connection(db_file)
sql_create_projects_table = """ CREATE TABLE IF NOT EXISTS projects (
                                    id integer PRIMARY KEY,
                                    name text NOT NULL,
                                    begin_date text,
                                    end_date text
                                ); """
cc=xx.cursor()
cc.execute(sql_create_projects_table)
conn=create_connection(db_file)
    # except (Exception, psycopg.Error) as error:
    #     print("Failed inserting record into  table {}".format(error))
    #     breakpoint()
conn.cursor
cursor=conn.cursor
dir(cursor)
con = sqlite3.connect(db_file)
cur=con.cursor()
cur.execute("CREATE TABLE movie(title, year, score)")
cursor=con.cursor()
        con.commit()
        if con:
sql_insert_query = """ INSERT INTO notes (text, word) 
                   VALUES (%s,%s) """
sql_insert_query
bl
bi[2]
bi=bi[:3]
cursor.executemany("INSERT INTO notes VALUES(?, ?)", bi)
cursor.executemany("INSERT INTO notes VALUES('text', 'word')", bi)
cursor.executemany("INSERT INTO notes VALUES('','text', 'word')", bi)
cursor.executemany("INSERT INTO notes VALUES('','text', 'word','','')", bi)
sel='''
select * from notes
p=cursor.execute(sel)
[a for a in p]
t=cursor.execute("""INSERT INTO notes (word, text) values ('one' 'three') """)
t=cursor.execute("""INSERT INTO notes (word, text) values ('one', 'three') """)
con.commit()
cursor.executemany("INSERT INTO notes VALUES(word, text)", bi)
bi[1]
print(sql_insert_query,bi)
cursor.executemany(sql_insert_query,bi)
                   VALUES (?,? """
'%s is smaller than %s' % ('one', 'two')
                   VALUES ('x','y') """
cursor.execute(sql_insert_query)
p=(sql_insert_query,bi)
sqlite_insert_with_param = """INSERT INTO notes
                  (word, text) 
                  VALUES (?, ?);"""
data_tuple = ('myword', 'mytext')
cursor.execute(sqlite_insert_with_param, data_tuple)
for a in bi:
    cursor.execute(sqlite_insert_with_param, a )
bod
parsedData
with open('data', 'w') as file:
    file.write(parsedData)
    file.write(str(parsedData))
parsedData.h1
tags = parsedData.find_all("div", class_="card")
tags
type(tags)
a for a in tags:
for a in tags:
tags[1]
str(tags)
with open('tags','w') as t:
    t.write(str(tags))
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility
regex = r"\s{2,}"
test_str = ("\n"
	"                \n"
	"                                    \n"
	"                                                    \n"
	"                                                \n"
	"                                \n\n\n"
	"                    $3 -  One Word Crossword (1968)\n"
	"                    \n"
	"                        \n"
	"                                                        \n"
	"                                Prize\n"
	"                                Claimed\n"
	"                                Remaining\n"
	"                            \n"
	"              \\t                                              																									                                \n"
	"                                    $1,000\n"
	"                                    3\n"
	"                                    15\n"
	"                                \n"
	"                                                            																									                                \n"
	"                                    $30,000\n"
	"                                    2\n"
	"                                    5\n"
	"            ")
subst = "\\n"
# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 0, re.MULTILINE)
if result:
    print (result)
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
tags = bod.find_all("div", class_="card")
bod = soup.body
print(tags.prettify())
print(str(tags.prettify()))
tags[1].text
test_str = tags[1].text
print(result)
[a for a in tags]
tags1
[a.text for a in tags]
def ns (s):
    regex = r"\s{2,}"
    subst = "\\n"
    result = re.sub(regex, subst, s, 0, re.MULTILINE)
[ns(a.text) for a in tags]
w=[ns(a.text) for a in tags]
with open('w','w') as f:
    f.write(w)
    f.write(str(w))
    f.write(w[1])
    for a in tags:
        f.write(a)
        f.write(str(a))
b=[a.text for a in tags]
    for a in b:
b=[ns(a.text) for a in tags]
split('\n')(b)
b.split('\n')
b[:10]
b[1]
b[1].replace('\n','')
b[1].replace('\n',' ')
[c.replace('\n',' ') for c in b]
[c.replace('\n',' ').trim() for c in b]
trim(' jim ')
b[1].replace('\n',' ').strip()
b[1].replace('\n',' ').strip().replace('Claimed Remaining','')
b[1].replace('\n',' ').strip().replace('Prize Claimed Remaining','')
c=[a.strip().replace('Prize Claimed Remaining','') for a in b]
with open('w', 'w') as f:
    for a in c:
c=[a.strip().replace('\nPrize\nClaimed\nRemaining\n','') for a in b]
d[1]
        w.write(a)
b[0]
print(b[1])
print(c[1])
        print(c)
c[-1]
c[-2]
print(c[-2])
with open('f', 'w') as f:
    f.write(c[-2])
        print(a, file=f)
[a, b for a,b in enumerate(c)]
[(a, b) for a,b in enumerate(c)]
import datetime as datetime
print(datetime.now().strftime("%a %m/%d/%Y, %H:%M:%S"))
print ("Current date and time : ")
print (now.strftime("%Y-%m-%d %H:%M:%S"))
d[39].split('\n')
d[39]
split('\n')d[39]
c[39].split('\n')
c[39].split('\n')[3:5]
c[39].split('\n')[3:6]
c[39].split('\n')[7:10]
c[39].split('\n')[6:9]
c[39].split('\n')[9:12]
d=[(a, b) for a,b in enumerate(c)]
larr = [lambda: i for i in range(10)]
larr
[a for a in larr]
larr()
x='''
Domain
Popularity
pinterest.com	
pinterest.co.uk	
pinterest.ca	
pinterest.de	
pinterest.fr	
pinterest.com.au	
pinterest.es	
facebook.com	
foxnews.com	
tiktok.com	
quora.com	
w3schools.com	
breitbart.com	
dailymail.co.uk	
appsloveworld.com	
instagram.com	
githubplus.com	
geeksforgeeks.org	
libhunt.com	
twitter.com	
msn.com	
healthline.com	
solveforum.com	
9to5answer.com	
alternativeto.net	
giters.com	
wikihow.com	
nypost.com	
codegrepper.com	
issuehint.com	
cnn.com	
coder.social	
educba.com	
linkedin.com	
geekrepos.com	
kknews.cc	
bleepcoder.com	
programcreek.com	
amazon.com	
forbes.com	
newbedev.com	
drivereasy.com	
medium.com	
lightrun.com	
you.com	
reddit.com	
webmd.com	
blog.csdn.net	
nytimes.com	
washingtonpost.com	
with open('kagiBlock', 'w') as f:
# Import libraries to deploy into scraper 
import asyncio 
from playwright.async_api import Playwright, async_playwright 
# Start with playwright scraping here: 
async def scrape_data(page): 
	scraped_elements = [] 
	items = await page.query_selector_all("li.product") 
	# Pick the scraping item 
	for i in items: 
		scraped_element = {} 
		# Product name 
		el_title = await i.query_selector("h2") 
		scraped_element["product"] = await el_title.inner_text() 
		# Product price 
		el_price = await i.query_selector("span.woocommerce-Price-amount") 
		scraped_element["price"] = await el_price.text_content() 
		scraped_elements.append(scraped_element) 
	return scraped_elements 
async def run(playwright: Playwright) -> None: 
	# Launch the headed browser instance (headless=False) 
	# To see the process of playwright scraping 
	# chromium.launch - opens a Chromium browser 
	browser = await playwright.chromium.launch(headless=False) 
	# Creates a new browser context 
	context = await browser.new_context() 
	# Open new page 
	page = await context.new_page() 
	# Go to the chosen website 
	await page.goto("https://scrapeme.live/shop/") 
	data = await scrape_data(page) 
	print(data) 
	await context.close() 
	# Turn off the browser once you finished 
	await browser.close() 
async def main() -> None: 
	async with async_playwright() as playwright: 
		await run(playwright) 
e3
h3
str(60*60*24*30*365)
regex = r"(\d{1,2})(\d{2})(\d{2})"
test_str = ("50221\n"
	"060521")
subst = "\\1:\\2:\\3"
test_str = str(60*60*24*30*365)
regex
regex = r"(\d{3})(\d{3})(\{3})"
regex = r"(\d{1,2})(\d{3})(\d{3})"
num=60*60*24*30*365
print("Result : {:,.2f}".format(num))
print(f"{str:,}")
def format_int_with_commas(x):
    Formats an integer with commas as thousand separators.
    return f"{x:,}"
def fc(x):
fc(str)
fc(num)
with open("ex.js", "r") as file:
  lines = [line.strip() for line in file]
  print(lines)
lines.split(',')
type(lines)
lines[1]
'\n'.join(lines)
[a for a in lines]
for a in lines:
    if 'require' in a:
lines[1].replace('const', 'import')
lines[0].replace('const', 'import')
lines[0].replace('const', 'import').replace('=', 'from')
lines[0].replace('const', 'import').replace('= require', 'from')
lines[0].replace('const', 'import').replace('= require', 'from ')
lines[0].replace('const', 'import').replace('= require', 'from ').replace('= require', 'from ').replace('(',' ').replace(')', ' ')
x=[]
        x.append(a.replace('const', 'import').replace('= require', 'from ').replace('= require', 'from ').replace('(',' ').replace(')', ' '))
        x.append(a)
with open("exI.js", "w") as file:
    file.write('\n',.join(x))
    file.write('\n'.join(x))
file='ex.js'
ofile='exIm.js'
with open(file, "r") as file:
17/40
7/40
7/4
file =open('h', "r")
[a for a in file lines]
[a for a in file print(a)]
file.readlines()
file.readlines().split('\t')
ss=file.readlines()
[a for a in ss a.split('\t')]
[a for a in ss a]
for a in ss:
    print(a.split('\t'))
[a for a in ss print(a)]
[a for a in ss ]
[a.split('\t') for a in ss ]
[a.split('\t')[0] for a in ss ]
[a.split('\t')[0] for a in ss if a=='3' ]
[a.split('\t')[0] for a in ss if a=='343M' ]
t='368 343 312 122 107 59 37 26 21 21 15 8.6 7.4 2.8 2.8 2.7 1.9 1.9 1.5 1.1'.split()
sum(t)
float('22')
int('22')
[int(a) for a in t]
[float(a) for a in t]
sum([float(a) for a in t])
bs4
print(dir(soup))
cps(soup)
soup.head
fileRan='soup.html'
    print(soup.head, file=tex)
url.replace('https://','')
url="https://www.mnlottery.com/"
fileRan=url.replace('https://','')+'.head'
fileRan
fileRan=url.replace('https://','')[:-1]
fileRan=url.replace('https://','')[:-1]+'.head')
fileRan=url.replace('https://','')[:-1]+'.head'
import scrapy
class QuotesSpider(scrapy.Spider):
    name = "quotes"
    start_urls = [
        "https://quotes.toscrape.com/page/1/",
        "https://quotes.toscrape.com/page/2/",
    ]
    def parse(self, response):
        page = response.url.split("/")[-2]
        filename = f"quotes-{page}.html"
        Path(filename).write_bytes(response.body)
response.css("title")
response.css("body")
response.css("head")
class ChocolateProduct(scrapy.Item):
   name = scrapy.Field()
   price = scrapy.Field()
   url = scrapy.Field()
response.css('title')
response.css('p::text').re(r'scraping')
response.css('p::text').re(r'a')
response.css('p::text').re(r'b')
response.css('p::text').re(r's\w+')
response.css('p::text').re(r's.*')
response.css('p::text').re(r's.*')[1]
response.css('p::text').re(r's.*')[0]
response.css('p::text').re(r'(\w+) and')
response.css('p::text').re(r'(\w+)and')
response.css('.card')
response.css('.card::text')
response.css('.card').[0]
response.css('.card')[0]
response.css('.card::text')[0]
response.css('p::text').
1,533,939.00/20
str(1,533,939.00)
int(1,533,939.00)
'1,533,939.00'.replace
'1,533,939.00'.replace(',','')
'1,533,939.00'.replace(',','')/20
int('1,533,939.00'.replace(',',''))
1533939.00/20
1533939.00/40
1533939.00/60
1533939.00/100
int('1')
int('100000000000000')
int('100000000000000000000')
int('100000000000000000000.00')
float('100000000000000000000.00')
float('100000000000000000000.00')/20
float('10000000000000000000230.00')/20
resonse
a[1]
response.css("html")
response.css("html::text")
response.css("body::text")
with open('your.html', "r", encoding="utf-8") as tex:
    lines=[]
    for line in tex:
        line=line.strip()
        lines.append(line)
with open('pyour.html', "r", encoding="utf-8") as tex:
lines.join('\n')
with open('pyour.html', "r", encoding="utf-8") as f:
    ff=f.readlines()
with open('x.html', "w", encoding="utf-8") as f:
    f.write(ff)
    f.write(str(ff))
    f.write('\n'.join(ff))
ff[1:4]
[strip(a) for a in ff]
[a.strip() for a in ff]
ee=[a.strip() for a in ff]
ee[:-10]
ee[:-1]
ee[-1]
type(ee)
ee[-1][0]
ee[1:10][0]
ee[-1:10][0]
ee[-4]
ee[-14]
ee[-14:-1]
ee[-14:0]
    f.write('\n'.join(ee))
ee=[a.lstrip() for a in ff]
ee=[a.rstrip() for a in ff]
[x for x in ee if x=='']
[x for x in ee if x!=='']
[x for x in ee if !x=='']
[x for x in ee if x!='']
ee=[x for x in ee if x!='']
len(ee)
str(ee)
soup = soup(str(ee), "html.parser")
soup.body
for a for a in soup["script"]:
for a in soup["script"]:
[a for a in soup('script')]
[a for a in soup('script')][1]
[a for a in soup('script')][1:3]
for a in soup["head"]:
soup('head')
[a for a in soup('head')]
print([a for a in soup('head')])
for a for a in soup('head'):
    a
for a in soup('head'):
    print(type(a))
for a in soup('script'):
for script in soup(["script", "style"]):
    script.extract()
with open('youT.html', encoding="utf-8") as f:
     read_data = f.read()
read_data
soup = soup(read_date, "html.parser")
soup = soup(read_data, "html.parser")
    print(script)
    print(len(script))
f=[]
    f.append(script)
f[q]
length(f)
f.len
    jsf.writelines(f)
type(f[1])
f[1].text
dir(f[1])
f[1].string
print(dir(f[1]))
f[1].contents
f[1].prettify
[a.text for a in f]
fff=[a.text for a in f]
fff[1]
    jsf.writelines(fff)
with open('news.html') as file:
    lines = [line.strip() for line in file]
len(lines)
print(lines.join('\n'))
print(join('\n').lines)
join
print('\n'.join.lines)
print('\n'.join(lines))
print('\n\n'.join(lines))
data = open('classes', 'r', encoding='utf-8').read()
data = open('youT.html', 'r', encoding='utf-8').read()
data[0:800]
soup = soup(data, "html.parser")
ss = soup(data, "html.parser")
ss.body
s.head
ss.head
[a for a in ss]
ss['script']
[a for a in soup(["script", "style"])]
[a for a in ss(["script", "style"])]
[a for a in ss(["style"])]
response.css("a")
response.css("yDmH0d")
response.css("#yDmH0d")
response.xpath('//body/')
response.css('a')
response.xpath('/html/body')
response.xpath('/html/body::text')
response.xpath('//*[@id="div-01"]/text()')
os.chdir('./..')
url='http://localhost:3000/'
mysoup=soup(page, "html.parser")
mysoup
str(mysoup)
with open('local.html') as file:
    file.write(str(soup))
with open('local.html', 'w') as file:
    file.write(str(mysoup))
for a in mysoup:
for a in mysoup['script']:
for a in mysoup(['script']):
[a for a in mysoup(["style"])]
[a for a in mysoup(["style"])][0]
b=[a for a in mysoup(["style"])][0]
b.extract()
mysoup[1]
mysoup[0]
type(mysoup)
str(mysoup)[:20]
str(mysoup)[:220]
str(mysoup)[:520]
with open('nostyle.html', 'w') as file:
b=[a for a in mysoup(["script"])]
b=[a for a in mysoup(["script"])][0]
mysoup('head')
he=mysoup('head').extract()
mysoup('head')[0]
he=mysoup('head')[0].extract()
he
with open('head.html', 'w') as file:
head
with open('myhead.html', 'w') as file:
    file.write(str(he))
#data = open('youT.html', 'r', encoding='utf-8').read()
data=open('curl.html','r', encoding='utf-8').read()
mysoup=soup(data, "html.parser")
len(mysoup('head'))
len(mysoup('style'))
mysoup('a')
[a for a in mysoup('a')]
[a for a in mysoup('a') a.extract()]
[a for a in mysoup('a') print(a)]
[a.extract() for a in mysoup('a') ]
aa=[a.extract() for a in mysoup('a') ]
sc=[a.extract() for a in mysoup('script') ]
mysoup('.poem')
mysoup.title
mysoup.title.parent
mysoup.title.parent.parent
mysoup.title.parent.parent.parent
soup('div')
soup('a')
soup.div
mysoup.a
mysoup.div
mysoup.div.nextsibling
mysoup.div.next_sibling
mysoup.find_all('a')
mysoup.find_all('div')
mysoup.find_all('div')[0]
mysoup.find_all('nav')[0]
ms=soup(data,"html.parser")
ms.find_all('a')
soup(['a'])
ms(['a'])
ms(['div'])
ms(['.poem'])
ms.find_all(class_='poem')
ms.find_all(class_='*')
ms.select('.poem')
ms.select('body')
ms.select('head')
ms.select('head').extract()
ms.select('head')[0].extract()
ms.head
ms.html
ms.html[:200]
ms.html[200]
str(ms.html)[200]
str(ms.html)[:200]
len(new)
ne=soup(new, "html.parser")
ne(["script"])
ne(["style"])
len(ne(["style"]))
ne
str(ne)
with open('new.html', 'w') as file:
    file.write(str(ne))
ne.prettify()
type(ne.prettify())
with open('pnew.html', 'w') as file:
    file.write(str(ne.prettify))
data=open('new.html','r', encoding='utf-8').read()
nw=soup(data, "html.parser")
nw("[script]")
nw(["script"])
[a.extract() for a in nw(["script"])]
[a.extract() for a in nw(["style"])]
with open('nn.html', 'w') as file:
    file.write(str(ne.nw))
nw
    file.write(str(nw))
nw(["head"])
len(nw(["head"]))
nw(["head"])[0]
nw(["head"])[0].extract()
nw(["a"])
nw(["a"])[0]
nw(["a"])[0].text()
nw(["a"])[0].text
[a.text for a in nw]
[a.href for a in nw]
nw(["a"])[3]
nw(["a"])[3].text
len(nw(["a"]))
[a.text for a in nw][4]
nw(["a"])[6].text
[a.text for a in nw(["a"])]
cps([a.text for a in nw(["a"])])
type(espn)
e=soup(espn, "html.parser")
e.head
e.body
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
espn.head
type(e.head)
with open('head.html', 'w') as f:
    f.write(str(e.head))
n=soup(new,'html.parser')
n.head
n("[a]")
n("[script]")
n.body
n(['script'])
type(page)
data=open('curl.html','w', encoding='utf-8').write(page)
data=open('curl.html','w', encoding='utf-8').read()
Path.home()
Path("/")
dir_path = r'\'
d = Path(dir_path)
dir_path = r'\\'
dir_path = r'/'
from os import walk
dir_path = r'E:\\account\\'
# list to store files name
for (dir_path, dir_names, file_names) in walk(dir_path):
    res.extend(file_names)
p = pathlib.Path('Lot.py')
athlib.PurePath('Lot.py')
pathlib.PurePath('Lot.py')
pathlib.PurePath('Lot.py').parent
pathlib.PurePath('/mnt').parent
pathlib.PurePath('~').parent
pathlib.PurePath('~').name
pathlib.PurePath('/').name
pathlib.PurePath('Lot.py').suffix
print([a.name for a in os.scandir('.')])
int('1,533,939.00')
int(2)
float('1,533,939.00')
float('1,533,939.00'.replace(',',''))
f'{float('1,533,939.00'.replace(',','')):_}'
f=float('1,533,939.00'.replace(',',''))
f'{f}:+}'
f'{f}:_}'
f'{f:_}'
f/20
f/40
f'{f/40:_}'
f'{f/80:_}'
req
data=soup('req','html.parser')
data['script']
data=soup(req,'html.parser')
data(['script'])
len(data(['script']))
data(['script'])[1]
data(['style'])
data(['link'])
for a in data(['link']):
data.head
data.body
data.script
data.link
data.find(text=re.compile('a'))
data.find(text=re.compile('gentle'))
xx=data.find(text=re.compile('gentle'))
xx.attrs
xx.name
xx.tagName
dir(xx)
print(dir(xx))
data.p
data.find('p')
data.find('div')
data.find_all('div')
d=[(a, b) for a,b in enumerate(gg)]
d=[[a, b] for a,b in enumerate(gg)]
data.prettify
#data=open('curl.html','w', encoding='utf-8').write(page)
open('local.html','w').write(data.prettify)
open('local.html','w').write(str(data.prettify))
from bs4 import SoupStrainer
only_tables = SoupStrainer("div")
s = BeautifulSoup(req, parse_only=only_tables)
s = soup(req, parse_only=only_tables)
movies
movies[:10]
movies[10:]
print(movies)
hs=soup(h,'html.parser')
[tag.name for tag in hs.findall()]
hs.prettify
[tag.name for tag in hs.find_all()]
set([tag.name for tag in hs.find_all()])
xx=set([tag.name for tag in hs.find_all()])
xx=[a for a in xx]
with open('tags','w').write('\n'.join(xx))
'\n'.join(xx)
with open('tags','w').write('x')
open('tags','w').write('\n'.join(xx))
type(hs.pretty)
open('auto','w').write(hs.pretty)
str(h.pretty)
str(h.prettify)
str(hs.prettify)
open('auto','w').write(hs.prettifyy)
open('auto','w').write(str(hs.prettify))
hs
str(hs)
open('auto','w').write(str(hs))
import polars as pl
df = pl.DataFrame(
        "a": ["a", "b", "a", "b", "c"],
        "b": [1, 2, 1, 3, 3],
        "c": [5, 4, 3, 2, 1],
df.group_by("a").agg(pl.col("b").sum())
df.group_by("a")
df.group_by("a").agg(pl.col("b"))
data=open('tet.html','r', encoding='utf-8').read()
so=soup(data,'html'.parse)
so=soup(data,'html.parse')
so=soup(data,'html.parser')
alltags=[tag.name for tag in so.find_all()]
alltags
print(alltags)
        "a": ["apple", "apple", "orange"],
        "b": [1, None, 2],
df.group_by("a").count()
        "a": alltags,
        "a": alltags
print(df.group_by("a").count())
pl.Config.set_tbl_rows(1000)
jj=df.group_by("a").count()
jj.rows
pl.Config.set_tbl_hide_dataframe_shape(False)
df = pl.DataFrame({'col1': range(3), 'col2': ['a', 'b', 'c']})
print(df)
df.head
df.describe
df.to_arrow
df.to_arrow()
dir(pl.Config)
print(dir(pl.Config))
    print(dir(pl.Config), file=f)
df.rows
df.rows()
jj.rows()
print(jj.rows())
xx=jj.rows()
sorted(xx,key=lambda x:x[1])
xx=sorted(xx,key=lambda x:x[1])
xx=sorted(xx,key=lambda x:x[1],reverse=True)
[a[1] for a in xx]
[a[0] for a in xx]
[f'{a[0]}' for a in xx]
[f'{a[0]} {a[1]}' for a in xx]
print([f'{a[0]} {a[1]}' for a in xx])
print('\n'.join([f'{a[0]} {a[1]}' for a in xx]))
print(' - '.join([f'{a[0]} {a[1]}' for a in xx]))
'‎7.43'
‎7.43*10e8
‎7.43*10**9
2*2
‎7.43*1
7.43*10**9
f'{7.43*10**9}
f'{7.43*10**9}'
f'{7.43*10**9:,}'
f'{7.43*10**9*372:,}'
strs = ['34.60B', '18.66M']
nums = []
for str in strs:
    rep = str.replace('B', 'e9')
    rep = rep.replace('M', 'e6')
    nums.append(float(rep))
[f'{a:_}' for a in nums]
rep
type(rep)
float(rep)
url="https://news.google.com/home?hl=en-US&gl=US&ceid=US:en"
open('ht','w').write(ht)
len(nt)
nt
type(nt)
open('out.html', 'w').write(nt)
nts=soup(nt,'html.parser')
nts.find_all('a')
len(nts.find_all('a'))
nts.find_all('a')[3]
nts.find_all('a')[5:8]
nts.find_all('a')[10]
n=nts.find_all('a')[10]
dir(n)
print(dir(n))
[a.text for a in nts.find_all('a')[10]]
[a.text.strip() for a in nts.find_all('a')[10]]
[a.text.strip() for a in nts.find_all('a')]
len([a.text.strip() for a in nts.find_all('a')])
[a.text.strip() for a in nts.find_all('a') if len(a.text)>0]
n=nts.find_all('a')
[a.text.strip() for a in nts.find_all('a') ]
with open('anc','w').writelines([a.text.strip() for a in nts.find_all('a') ])
with open('anc','w').write([a.text.strip() for a in nts.find_all('a') ])
kk=[a.text.strip() for a in nts.find_all('a') ]
with open('anc','w').writelines(kk)
open('anc','w').writelines([a.text.strip() for a in nts.find_all('a') ])
nts.find_all('p')[10]
nts.find_all('p')
nts
len(nts)
ss.find_all('a')
len(ss.find_all('a'))
kk=[a.text.strip() for a in ss.find_all('a') ]
kk[:10]
kk[:20]
kk[:30]
ss(["a'])
ss(['a'])
len(ss(['a']))
ss.pretty
ss.prettify
len(ss.prettify)
len(ss.prettify())
open('new','w').write(ss.prettify)
open('new','w').write(str(ss.prettify))
ss(['script'])
len(ss(['script']))
url='https://www.sacbee.com/health-wellness/cannabis/article270746947.html'
spr
sps=soup(spr,'html.parser')
sps.find_all()
sps.find_all('script')
sps.find_all('a')
sps(['a'])
sps(['button'])
sps(['.poem'])
sps.find_all('.poem')
sps.find_all(attrs={'class': 'poem'})
sps.find_all(attrs={'class': 'poem'})[10:]
sps.find_all(attrs={'class': 'poem'})[0]
sps.find_all(attrs={'class': 'poem'})[0][20]
sps.find_all(attrs={'class': 'poem'})[0].text
type(sps.find_all(attrs={'class': 'poem'})[0].text)
sps.find_all(attrs={'class': 'poem'})[0].html
sps.head
sps.head.link
sps.find_all('link')
for a in sps.find_all('a'):
    print(anchor['href'])
    print(a['href'])
[a['href'] for a in sps.find_all('a')]
[[a.text,a['href']] for a in sps.find_all('a')]
''.join([[a.text,a['href']] for a in sps.find_all('a')])
pp=[[a.text,a['href']] for a in sps.find_all('a')]
[a for a in pp for a in pp]
[' '.join(a) for a in pp]
def flatten_list(nested_list):
    return [item for sublist in nested_list for item in sublist]
flatten_list(pp)
[a for b in pp for a in b]
[a for b in pp ]
[a for a in pp ]
[xx for a in pp ]
[xx for xx in pp ]
[xx for yy in pp for xx in yy ]
' '.join([' '.join(a) for a in pp])
'-  '.join([' '.join(a) for a in pp])
' -  '.join([' '.join(a) for a in pp])
for a in xx:
    for xx in a:
        print(xx)
gg=[]
        gg.append(xx)
sps
sps.find_all('div')
[a.text.strip() for a in sps.find_all('a') ]
[a.content.strip() for a in sps.find_all('a') ]
[a.content for a in sps.find_all('a') ]
[a.contents for a in sps.find_all('a') ]
[a.text for a in sps.find_all('a') ]
[a.contents.name for a in sps.find_all('a') ]
ht=soup.head
ht=sps.head
ht.contents
ht.contents[0]
def innerHTML(html_tag):
    text = ""
    for c in html_tag.contents:
        text+=str(c)
    return text
ht[1]
innerHTML(ht)
' '.join(ht.contents)
' '.join(str(ht.contents))
''.join(str(ht.contents))
duh=open('d','r').read()
duh
print(duh)
duh.split('\t')
duh.split('\n')
l=duh.split('\n')
l[1]
l[1].split('\t')
m=[]
[a.split('\t') for a in l ]
m[a.split('\t') for a in l ]
m=[a.split('\t') for a in l ]
for a in m:
    print(a[0])
[[a,b] for a, b in enumerate(m)]
m[11]
m.pop(11)
m.pop(-1)
sorted(m)
'1.1m'.replace('m','000')
[a[0].replace('m','000') for a in m]
[a[0].replace('M','000') for a in m]
def m(x):
    x.replace('M','000')
    return x.replace('M','000')
[m(a[0]) for a in m]
[a for a in duh.split('\n')]
[a.split('\t') for a in duh.split('\n')]
dd=[a.split('\t') for a in duh.split('\n')]
[a for a in dd if len(a[0]) > 1]
[a for a in dd if len(a[0]) > 1 and len(a[1])> 1]
dd=[a for a in dd if len(a[0]) > 1 and len(a[1])> 1]
thelines
dd[1]
dd[1][1]
dd[1][0]
dd[1][0][-1]
[a[1][0][-1] for a in dd]
[a[0][0][-1] for a in dd]
[a[0][-1] for a in dd]
f'{2**30:,}'
f'${2**30:,}'
mult = dict(K=2**10, M=2**20, G=2**30)
mult
[a for a in duh if len(a[0]) > 1 and len(a[1])> 1]
duh1=[a.split('\t') for a in duh.split('\n')]
duh1
[a for a in duh1 if len(a[0]) > 1 and len(a[1])> 1]
duh=[a for a in duh1 if len(a[0]) > 1 and len(a[1])> 1]
duh[1]
duh.sort()
duh.sort(reverse=True)
mult['K']
mult[duh[1][0][-1]]
duh.sort(key=a[0])
duh.sort(key=duh[0])
duh.sort(key=duh[0][0])
duh[0]
duh[0][0]
sorted(duh)
sorted(duh, key=lamda x:x[1])
sorted(duh, key=lambda x:x[1])
sorted(duh, key=lambda x:x[0])
sorted(duh, key=lambda x:mult[x[0]])
sorted(duh, key=lambda x:mult[x[0][-1]])
[mult[a[0][-1]] for a in duh]
sorted([mult[a[0][-1]] for a in duh])
sorted([float(a[0]),[mult[a[0][-1]]] for a in duh])
duh[0][:-1]
duh[0][:-2]
'22'[1]
'22'[-2]
'32'[-2]
'32'[:-2]
'32'[:-1]
'asdf32'[:-1]
'asdf32k'[:-1]
duh[0][0][-1]
duh[0][0][:-1]
sorted([float(a[0][-1]),[mult[a[0][-1]]] for a in duh])
sorted([float(a[0][-1],[mult[a[0][-1]]]) for a in duh])
[float(a[0]) for a in duh)
[float(a[0]) for a in duh]
[float(a[0][-1]) for a in duh]
[float(a[0][:-1]) for a in duh]
[a[0][-1] for a in duh]
[float(a[0][:-1])*3 for a in duh]
[float(a[0][:-1])*mult[a[0][-1]] for a in duh]
sorted([float(a[0][:-1])*mult[a[0][-1]] for a in duh])
sorted((a[1],[float(a[0][:-1])*mult[a[0][-1]]) for a in duh])
sorted([a[1],[float(a[0][:-1])*mult[a[0][-1]]) for a in duh])
sorted([a[1],[float(a[0][:-1])*mult[a[0][-1]]] for a in duh])
[(a[1],float(a[0][:-1])*mult[a[0][-1]]) for a in duh]
xx=[(a[1],float(a[0][:-1])*mult[a[0][-1]]) for a in duh]
sorted(xx)
[a for a in sorted(xx,key=lambda x:x[1])]
[a[1] for a in sorted(xx,key=lambda x:x[1])]
[f'{a[1:,]} for a in sorted(xx,key=lambda x:x[1])]
[f'{a[1]:,}' for a in sorted(xx,key=lambda x:x[1])]
[(f'{a[1]:,}',a[0]) for a in sorted(xx,key=lambda x:x[1])]
soup = BeautifulSoup(response.text, 'html.parser')
print(str(soup.body))
print(str(soup.head))
print(str(soup.head.prettify))
he=str(soup.head.prettify)
with open('im','w').writelines(he)
with open('anc','w').writelines(he)
open('im.head','w').writelines(he)
url = "http://localhost:3000"
soup.findall('script')
soup.find_all('script')
soup.find_all('head')
soup=BeautifulSoup(response, 'html.parse')
soup.find_all('a')
webpage
headers = {
    'authority': 'www.google.com',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'accept-language': 'en-US,en;q=0.9',
    'cache-control': 'max-age=0',
    'cookie': 'SID=ZAjX93QUU1NMI2Ztt_dmL9YRSRW84IvHQwRrSe1lYhIZncwY4QYs0J60X1WvNumDBjmqCA.; __Secure- 
    #..,
    'sec-ch-ua': '"Not/A)Brand";v="99", "Google Chrome";v="115", "Chromium";v="115"',
    'sec-ch-ua-arch': '"x86"',
    'sec-ch-ua-bitness': '"64"',
    'sec-ch-ua-full-version': '"115.0.5790.110"',
    'sec-ch-ua-full-version-list': '"Not/A)Brand";v="99.0.0.0", "Google Chrome";v="115.0.5790.110", "Chromium";v="115.0.5790.110"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-model': '""',
    'sec-ch-ua-platform': 'Windows',
    'sec-ch-ua-platform-version': '15.0.0',
    'sec-ch-ua-wow64': '?0',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-user': '?1',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
    'x-client-data': '#..',
    # Add more headers as needed
data = open('mb.html', 'r', encoding='utf-8').read()
soup = BeautifulSoup (page, "html.parser")
soup = BeautifulSoup (data, "html.parser")
for script in soup(["img", "style"]):
str(soup)
str(soup.pretty)
    print(datetime.now().strftime("%a %m/%d/%Y, %H:%M:%S"), file=tex)
fileRan='moby'
print([a.name for a in os.scan('.')])
print([a.name for a in os.scan('.') if a.name.endswith('json')])
print([a.name for a in os.scandir('.') if a.name.endswith('json')])
data = open('har.json', 'r', encoding='utf-8').read()
data=open('har.json', 'r', encoding='utf-8').read().strip().split('\n')
json
on=json.load(data)
with open("har.json", "r") as file:
    data = json.load(file)
dj=json.dumps(data, indent=2)
dj
type(dj)
print(dj)
with open("lh.har", "r") as file:
data['log']
data.items()
for key, value in data.items():
    print(f"key : {key} and value : {value} ")
    for key,value in value.items():
        print(f"Inside key : {key} and value: {value}")
data['log']['creator']
data['log'].keys()
data['log']['entries'].keys()
data['log']['entries']
data['log']['entries'][:40]
data['log']['entries'][:4]
data['log']['entries'][:2]
data['log']['entries'][:1]
cps(data['log']['entries'][:1])
dd=data['log']['entries']
type(dd)
dd[:3]
dd[:1]
dd[:0]
dd[2]
type(dd[2])
dd[2].keys()
[a for a in dd[1]]
dd[1]['response']
dd[1]['response'].keys()
[a['response'] for a in dd]
[a['response'] for a in dd if  len(a['response'])<100]
[a['response'] for a in dd if  len(a['response'])<10]
[a['response'] for a in dd if  len(a['response'])<20]
[a['response']['headerSize'] for a in dd if  len(a['response'])<20]
[a['response']['headersSize'] for a in dd if  len(a['response'])<20]
dd[1]['response']['content']
[a['response']['headersSize'] for a in dd if  len(a['response']['content'])<20]
[a['response'] for a in dd if  len(a['response']['content'])<20]
dd[1].keys()
dd[1].values()
dd[1]['response']['content']['mimeType']
[a['response']['content']['mimeType'] for a in dd]
dd.keys()
data['log']['entries'][1]
data['log']['entries'][1].keys()
data['log']['entries']['response].keys()
data['log']['entries']['response'].keys()
data['log']['entries']['response']
data['log']['entries'][1]['response']
[a['response']['content']['content'] for a in dd]
[a['response']['content']['text'] for a in dd]
[a['response']['content'] for a in dd]
[len(a) for a in data['log']]
[len(a) for a in data['log'].keys()]
[a.values() for a in data.keys()]
[a.values() for a in data]
str(data)
len(str(data))
[a for a in data['logs']]
type(data['logs'])
[a for a in data['log']]
[a for a in data['log']['entries']]
[len(a) for a in data['log']['entries']]
[a.keys() for a in data['log']['entries']]
[a.['response'] for a in data['log']['entries']]
[a['response'] for a in data['log']['entries']]
[a['response']['text'] for a in data['log']['entries']]
[a['response'].keys() for a in data['log']['entries']]
[a['response']['content'] for a in data['log']['entries']]
[a['response']['encoding'] for a in data['log']['entries']]
[a['response']['bodySize'] for a in data['log']['entries']]
[a['response']['bodySize'] for a in data['log']['entries'][1]]
data['log']['entries']['content'][1].keys()
data['log']['entries']['content'].keys()
type(data['log']['entries'][1])
type(data['log']['entries']['content'])
data['log']['entries']['content'][1]
data['log']['entries']['content']
data['log']['entries'][1]['response']['text']
data['log']['entries'][1]['response']['content']
data['log']['entries'][1]['response']['content']['size']
[a['log']['entries'][1]['response']['content']['size'] for a in data]
[a['log']['entries']['response']['content']['size'] for a in data]
[a['log'] for a in data]
[a for a['log']['entries']['response']['content']['size']  in data]
[a for a['log']['entries']['response']['content']['size']  in data.items]
[a for a['log']['entries']['response']['content']['size']  in data.items()]
[a['logs'] for a in data]
[a for a  in data['log']['entries']['response']['content']['size']]
[a for a  in data['log']['entries']]
[a for a  in data['log']['entries']['response']]
[len(a) for a  in data['log']['entries']]
for a in data['log']:
    print(a['entries'])
    print(data['log'])
    print(data['log'][a])
    print(data['log'][a].keys())
    x=input()
    print(a,data['log'][a])
    print(a,data['log'][a][:30])
    print(a,str(data['log'][a])[:30])
    print(a,str(data['log'][a])[:130])
for a in data['log']['entries']:
    print(a,str(a)[:130])
    print(a,str(a)[:30])
    print(str(a)[:30])
[type(a) for a in data['log']['entries'])
[type(a) for a in data['log']['entries']]
[a['response'] for a in data['log']['entries']][1]
[a['response']['mimeType'] for a in data['log']['entries']][1]
kk=data['log']['entries']
type(kk[1])
kk[1].keys()
kk[1]['request']
kk[1]['response']
[a['response'] for a in kk]
[type(a['response']) for a in kk]
[a['response']) for a in kk]
[a['response'].keys() for a in kk]
kk[1]['response']['content']
kk[1]['response']['content']['text']
[a['response']['content']['text'] for a in kk]
[a['response']['content']['text'][:30] for a in kk]
sp(kk)
sp
def sp(x):
    return a['response']['content']['text'][:30]
[sp(a) for a in kk]
[a.filename for a in os.scandir('.')]
[a.fileName for a in os.scandir('.')]
data = np.loadtxt('zod.py')
[a.name for a in os.scandir('.') if 'har' in a.name]
data = json.loads('lh.har')
print(pl.__version__)
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv")
type(df)
df.filter(pl.col('sepal_length')>5)
df.filter(pl.col('sepal_length')=5.1)
df.filter(pl.col('sepal_length')==5.1)
df.filter(pl.col('sepal_length')<5.1)
.lazy()
df=''
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv").filter(pl.col('sepal_length')>5)
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv").filter(pl.col('sepal_length')==5)
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv").filter(pl.col('sepal_length')==5).groupby('species')
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv").filter(pl.col('sepal_length')==5).groupby('species').collect()
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv").filter(pl.col('sepal_length')==5).groupby('species').agg(pl.all().sum()).collect()
df=pl.read_csv("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv").filter(pl.col('sepal_length')==5).groupby('species').agg(pl.all().sum())
dj=pl.read_json('har.json')
dj=pl.read_json('employees.json')
dj.describe
dj=pl.read_json('lh.har')
dj.head
dj.head()
dj.tail()
dj.sample(4)
dj.rows()
df = pl.read_ndjson('lh.har')
template = {
    "a": ["A", "AA"],
    "b": ["B", "BB"],
    "c": ["C", "CC"],
    "d": [{"D1": "D2", "DD1": None}, {"D1": None, "DD1": "DD2"}],
pl.DataFrame(template)
import pandas as pd
template = {    'a':['A', 'AA'],
                'b':['B', 'BB'],
                'c':['C', 'CC'],
                'd':[{'D1':'D2'}, {'DD1':'DD2'}]}
df_pandas = pd.DataFrame(template)
print(df_pandas)
df_polars = pl.DataFrame(template)
print(df_polars)
df_polars
[a.name for a in os.scandir('.') if 'gif' in a.name]
gi=open('gifs','r').read().strip().split('\n'))
gi=open('gifs','r').read().strip().split('\n')
gi
with open("py.gif", "wb").write(response.content)
open("py.gif", "wb").write(response.content)
characters = [chr(num) for num in range(32, 127)]
for ch in characters:
    print(ch)
print(characters)
characters = [(num, chr(num)) for num in range(32, 127)]
characters = [(num, chr(num)) for num in range(65, 90)]
characters = [(num, chr(num)) for num in range(65, 91)]
characters = [chr(num) for num in range(65, 91)]
characters
def (x,y):
    open(x, "wb").write(response.content)
def ww(x,y):
f=open('gifs','r').read().strip().split('\n')
f[:-1]
f[-1:]
f=f[-1:]
for x in f:
    response=request(x)
    open('jim','wb').write(request.content)
    response=requests(x)
    open('jim','wb').write(resonse.content)
f[0]
ch = [chr(num) for num in range(65, 91)]
f'{ch[count]}'
f'{ch[count]}.gif'
ht=open("hgif","r").read().strip().split('\n')
[a for a in ht]
[f'<img src="{a}">' for a in ht]
'\n'.join([f'<img src="{a}">' for a in ht])
cps('\n'.join([f'<img src="{a}">' for a in ht]))
data=open('lh.har','r').read().strip().split('\n')
numbers = [25, 36, 48, 54]
json_numbers = json.dumps(numbers)
json_numbers
json.dumps(str(data))
js=json.dumps(str(data))
type(js)
js=json.dumps(data)
'\n'.join(data)
''.join(data)
type(''.join(data))
js=json.dumps(''.join(data))
tt = open("har.json", "r").json.load()
tt = open("har.json", "r").read().json.load()
[line.strip() for line in open('lh.har')]
''.join([line.strip() for line in open('lh.har')])
json.load(''.join([line.strip() for line in open('lh.har')]))
data['log'][:8]
print(data['log'])
print(data['log']['entries'])
[a.keys() for a in data['log']]
f= open("guru99.txt","w+")
[i for i in range(10)]
[i for i in range(10) f.write(i)]
i for in in range(1):
    f.write(i)
for i in range(10):
    f.write(str(i))
with open("guru99.txt", "a") as file:
    for a in range(20):
        file.write(f'{a}\n')
with open('lh.har', 'r') as json_file:
cps(jo)
str(jo)
cps(str(jo))
for a in jo:
        print(jo[b])
    print(jo[a])
    print(f'{a} {jo[a]}')
    p=input()
    print(f'{a} {type(jo[a]})')
    print(f'{a} {type(jo[a])}')
[a for a in jo['log']]
[jo[x] for x in [a for a in jo['log']]]
[jo['log'][x] for x in [a for a in jo['log']]]
        for b in a:
            print(jo[a][b])
        print(jo[a][b])
const data = {
  "name": "John",
  "age": 30,
  "address": {
    "street": "123 Main St",
    "city": "Anytown",
    "state": "CA"
  }
};
const dd = {
print(json.dumps(jo))
print(json.dumps(jo, indent=2))
list(pairs(jo))
print(list(pairs(jo)))
jo[[a for a in jo.keys()]]
for a in jo.keys():
    print(jo[a].keys())
s=jo['log'].keys()
jo['log'][s[1]]
    1: ['alice', 29],
    2: ['bobbyhadz', 30],
    3: ['carl', 31],
headers = ['ID', 'Name', 'Age']
print(f'{headers[0]: <10}{headers[1]: <15}{headers[2]}')
# ID        Name           Age
# 1         alice          29
# 2         bobbyhadz      30
# 3         carl           31
for key, value in my_dict.items():
    print(f'{key: <10}{value[0]: <15}{value[1]}')
mydict
my_dict.keys()
my_dict[1]
[a.name for a in os.scandir('.') if 'json' in a.name]
with open('w.json','r') as j:
    data = json.load(j)
pprint(data)
pprint
pprint.PrettyPrinter(data)
[a for a in data['projects']]
[type(a) for a in data['projects']]
[type(a) for a in data]
type(data.('projects'))
type(data('projects'))
type(data['projects'])
data.values()
for a in data.keys():
for x in [a for a in data.keys()]:
    print(data[x])
    print(type(data[x]),data[x])
with open('lh.har','r') as j:
    har=json.load(j)
har
j.keys()
har.keys()
[a for a in har.keys()]
[har[b] for b in [a for a in har.keys()]]
[har[b].keys() for b in [a for a in har.keys()]]
[(b, har[b].keys()] for b in [a for a in har.keys()]]
[(b, har[b].keys()) for b in [a for a in har.keys()]]
[a for a in har.values()]
print([a for a in har.values()])
print([a for a in har.values()][1])
print([a for a in har.values()][0])
har.values()
len(har.values())
pprint.PrettyPrinter(har.values())
pprint.PrettyPrinter(str(har.values()))
for a in har.values():
for k, v in har.items():
    print(k,"--->", v)
    print(k,"--->", len(v))
    print(k,"--->", len(v), type(v))
har.items()
len(har.items())
har.items()[0]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
print(d)
d.keys()
d.values()
colors = {'Red': 1, 'Green': 3, 'Black': 5, 'White': 2, 'Pink': 4}
colors.keys()
colors.values()
colors.items()
[a for a in colors.items()]
[a[1] for a in colors.items()]
[[a[0],a[1]] for a in colors.items()]
har['log'].keys()
har['log']['entries'].keys()
har['log']['entries'][0].keys()
har['log']['entries'][0]['response'].keys()
har['log']['entries'][0]['response'].items()
print(har['log']['entries'][0]['response'].items())
my_dict = {"key1": "value1", "key2": {"nested_key1": "nested_value1", "nested_key2": "nested_value2"}}
pprint(my_dict, width=40)
pprint(har, widthe=40)
pprint(har, width=40)
tex=open('pp','w')
pprint(har, width=40, file=tex)
print(har, file=tex)
tex.close()
from pprint import pformat
ps=pformat(har)
cps(ps)
print(ps)
import pprint;pprint.pprint(zip(('Byte', 'KByte', 'MByte', 'GByte', 'TByte'), (1 << 10*i for i in range(5))))
print([line.strip() for line in open("bsp2.py")])
myfile=[line.strip() for line in open("bsp2.py")]
'\n'.join(myfile)
open('zz','w').write('\n'.join(myfile))
n={0: 10, 1: 20}
n.keys()
[a for a n]
[a.values for a in n]
[a.values() for a in n]
[a for a in n.values()]
[(a,b) for a,b in n.items()]
n['2']=30
n[3]=30
    one=json.load(j)
[a for a in one]
[(a,b) for a,b in one.items()]
[(a,b) for a,b in one.items()][0]
one.items()
type(one.items())
one.keys()
one.values()
[len(a) for a in one.values()]
two=one['log']
tow
two.keys()
[type(a) for a in two.keys()]
[type(two[a]) for a in two.keys()]
two['creator']
two['pages']
tk=[a for a in two.keys()]
tk
for a in tk:
    print(two[a])
    print(a,two[a])
for a in two('entries'):
two('entries')
for a in two['entries']:
print('*'*20)
    print('*'*20)
one['log']
one['log']['entries'][0]
one['log']['entries'][0].response
one['log']['entries'][0]['response']
one['log']['entries'][0]['response'].keys()
one['log']['entries'][0]['response']['content']
one['log']['entries'][0]['response']['size']
one['log']['entries'][0]['response']['content'].keys()
one['log']['entries'][0]['response']['content']['size']
for a in one['log']['entries']:
    print(a['response']['content']['size'])
    print((a,a['response']['content']['size']))
    print((a['response'],a['response']['content']['size']))
len(one)
one['log']['entries']
nd = {
    'person1': {'name': 'Alice', 'age': 30},
    'person2': {'name': 'Bob', 'age': 25},
    'person3': {'name': 'Charlie', 'age': 40}
nd
json.dumps(nd)
open('nd','w').write(json.dumps(nd))
json.load(line for line in open('lh.har')]))
json.load([line for line in open('lh.har')]))
json.load([line for line in open('lh.har')])
[a for a in open('lh.har')]
type([a for a in open('lh.har')])
[a for a in open('lh.har')][:3]
[a.strip() for a in open('lh.har')][:3]
'\n'.join([a.strip() for a in open('lh.har')][:3])
mm='\n'.join([a.strip() for a in open('lh.har')][:3])
json.loads(mm)
data = {'name': 'John', 'age': 30}
json.loads(str(data))
with open('data.json','w') as d:
    json.dump(data,d)
data=json.dumps(data)
json.dumps(json.loads(data))
books = {'Fluent Python':50,
         'Learning Python':58}
books
json.dumps(books)
d=open('books','re').read()
d=open('books','r').read()
json.loads(d)
d.replace('"','')
d.replace('\'','"')
json.loads(d.replace('\'','"'))
[a.name for a in os.scandir('.') if 'har' in a.name][0]
# %load 
e 0
e 6
    w=json.load(j)
[a for a in w]
[(a,b) for a,b in w.items()]
[(a,b) for a,b in w.keys()]
[a for a,b in w.keys()]
[a for a in w.keys()]
[a for a in w.values()]
w['projects']
w['projects']['project 1']
del w['name']
[a for a in w['projects']]
[a for a in w['projects'].values()]
[a for a in my_dict]
for a in my_dict:
for a in w:
    print(w[a])
    print(f'{a} {w[a]}')
def add(a: int, b:int) -> int:
  pdb.set_trace()  # pause here and enter the debugger
  return a + b
print(add(1, 2))
def factorial(number: int) -> int:
  if number < 0:
    raise ValueError("`n` must be non-negative.")
  elif number <= 1:
    return 1
  else:
    breakpoint()  # pause here and enter the debugger
    return number * factorial(number - 1)
# factorial(5) is: 5 * 4 * 3 * 2 * 1 = 120
print(factorial(5))
import ipdb
x = 10
y = 20
# Set a breakpoint here
ipdb.set_trace()
result = x + y
# Output:
# > <stdin>(6)<module>()->None
# ipdb> p x
# 10
# ipdb> p y
# 20
# ipdb> c
# 30
        for b win w[a]:
            print(b)
    for b win w[a]:
    for b in w[a]:
    print(f'{a} {w[a]} {type(w[a])}')
from collections.abc import Iterable
isInstance(3, iterable)
integer = 23454
if isinstance(integer, Iterable):
    print("Given object is iterable")
else:	
    print("Given object is not iterable")
integer = [1,2,3]
isintance(3,Iterable)
isinstance(3,Iterable)
    print(f'{a} {w[a]} {type(w[a])} {isinstance(w[a], Iterable)}')
    if isinstance(w[a], Iterable):
        print(w[a])
        print(f'{w[a]} is iterable')
    print('\n\n')
        for b in w[a]:
iter([1,3])
iter(33)
    # print(f'{a} {w[a]} {type(w[a])} {isinstance(w[a], Iterable)}')
isinstance('a',Iterable)
isinstance([],Iterable)
isinstance(1,Iterable)
[a for a in 'w']
x = isinstance("Hello", (str, float, int, str, list, dict, tuple))
isinstance(1,str)
isinstance(1,int)
type('jim')
iter('jim')
iter('jim')[1]
f=iter('jim')
w.keys()
w.values()
w.items()
w['languages']
iter(w['languages'])
type(w['languages'])
type(w['projects'])
md= {'x': 500, 'y': 5874, 'z': 560}
[a for a in md]
md[z]=200
md['z']=200
[a for a in md.values()]
md['f']=200
md['f']='jim'
md[3]='joe'
md[8]=w
md[8]
type(md[8])
md[8][1]='jjjj'
md[8][1][3]=w
md[8][1][3]=2
md[8][1][3]='kkk'
md[8][1]
md[8][3]=w
md[8][3]
md[8][3][3]
md[8][3][3].keys()
md[8][3][3][3]
md[8][3][3][3][3]
md[8][3][3][3][3][3]
json.dumps(md)
a_dict = {}
a_dict['site'] = 'bobbyhadz.com'
# 👇️ this adds a circular reference
a_dict['nested'] = a_dict
a_dict
json.dumps(a_dict)
a_dict['nested']
a_dict['nested'] is a_dict
a_dict['nested'] =[]
a_dict['n'] =a_dict
a_dict['n'] =a_dict.copy()
a_dict['n'] 
del a_dict['n']
a_dict['n']
a_dict['n']=w
json.dumps(w)
w[3]
del w[3]
cps(json.dumps(w))
w['h']=har
sheets
sheet
[a for a in sheet('data')]
[a for a in sheet('data')['values']]
[a for a in sheet('data')['values'][1]]
del [a for a in sheet('data')['values'][1]]
json.dumps(sheet('data'))
s=sheet('data')
s['range']
s['range']='new'
id(s)
id(sheet('data'))
a = 1
b = 1
c = b + 1
d = 2
print(id(a), id(b), id(c), id(d))
id(a)==id(b)
a=22
a=1
print("int(123.23) is:", int(123.23))
k='jim'
id(k)
boo='jim'
id(boo)
boo.__hash__
1 is 1
a is b
b=3
id(b)
b.__hash__
b='ok'
s.pop()
s.popitem()
s.pop('range')
s.pop('values[1]')
s['values']
s['values'][1]
for [a in s]:
for [a for a in s]:
for a in s:
s.clear()
p:list[str]=['a','b']
users:dict=dict.fromkeys(p)
users
dict.fromkeys(p)
dict.p
s.setdefault('range',22)
s['range']=22
squares = {x: x**2 for x in range(6)}
print(squares)
{x: for x in 'jim'}
numbers_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
even_numbers = []
for x in numbers_list:
    if (x % 2 == 0):
        even_numbers.append(x)
print(even_numbers)
def is_even(x):
    return x % 2 == 0
even_numbers_functional = list(filter(is_even, numbers_list))
print(even_numbers_functional)
numbers_list = list(range(3))
numbers_list
numbers_list = list(range(30))
' '.join(numbers_list)
sorted(1,2,30)
sorted([1,2,30])
sorted([100,2,30])
s['values'][1][1]
s['values'][1][0]
str(s['values'])
str(s['values'])[2]
str(s['values'])[:2]
str(s['values'])[:30]
[a for a in s['values']]
[str(a) for a in s['values']]
[str(map(a,str)) for a in s['values']]
[map(a,str)) for a in s['values']]
[map(a,str) for a in s['values']]
' '.join(s['values'])
[a for a in s['values']][0]
' '.join([a for a in s['values']][0])
[' '.join(a) for a in s['values']]
st=[' '.join(a) for a in s['values']]
sorted(st)
sorted(st,key=str.lower)
'jim'[-1]
'jim'[1]
def x(y):
    return y[1]
x('jim')
sorted(st,key=x)
d=sheets('data')
d=sheet('data')
st=[' '.join(a) for a in d['values']]
s['new']=s.copy()
s.keys()
j="Maxwell's Equations are critical in understanding Antennas and Electromagnetics"
j.replace("'","")
j=j.replace("'","")
j.split()
j=j.split()
j[:3]
j[3:4]
j[1:4]
j[0:4]
len(j)
[(a,b) for a,b in enumerate(j)]
j[0:3]
j[4:]
j[-1]
j[:-1]
j[-2:]
j[-3:]
[range(3)]
zip([a for a in range(3)],j[-3:])
list(zip([a for a in range(3)],j[-3:]))
dict(zip([a for a in range(3)],j[-3:]))
n=dict(zip([a for a in range(3)],j[-3:]))
n.values()
    "Spider": "photographer", 
    "Bat": "philanthropist", 
    "Wonder Wo": "nurse"
{key+"man":val for (key,val) in my_dict.items()}
{key:val for (key,val) in my_dict.items()}
{a:b for (a,b) in my_dict.items()}
{a+"man":b for (a,b) in my_dict.items()}
{a.upper():b for (a,b) in my_dict.items()}
{a.upper():b for (a,b) in my_dict.items() if 'a' in a}
{a.upper():b for (a,b) in my_dict.items() if 'i' in a}
zip([a for a in range(3)],[a for a in 'jim])
zip([a for a in range(3)],[a for a in 'jim'])
list(zip([a for a in range(3)],[a for a in 'jim']))
{zip([a for a in range(3)],[a for a in 'jim'])}
dict(zip([a for a in range(3)],[a for a in 'jim']))
dict(zip([a for a in range(3)],[a for a in 'jimss']))
s['values'][-1]
s['values'][-1][1]
s['values'][-1][1].split()
s['values'][-1][1].replace("'","").split()
def rep(x):
    return re.sub(r'[^a-zA-Z0-9]','',x)
rep('jim')
rep('jim,is')
t=s['values'][-1][1].replace("'","").split()
[rep(a) for a in t]
[rep(a) for a in st]
    return re.sub(r'[^a-zA-Z0-9]',' ',x)
{a,b for a,b in my_dict.items()}
{a+'man':b for (a,b) in my_dict.items()}
{(a+'man' if a=='s'):b for (a,b) in my_dict.items()}
{(a+'man' if a=='s' else "none"):b for (a,b) in my_dict.items()}
def xx(x):
    return x+'super'
{xx(key):val for (key,val) in my_dict.items()}
{key:xx(val) for (key,val) in my_dict.items()}
    return x+' myfun '
    return ' myfun '+x
{key:val for (key,val) in s.items()}
ins(rep)
{key:rep(val) for (key,val) in s.items()}
{key:rep for (key,val) in s.items()}
rep(s['values'][-1][1])
re.sub
ns('jim    is')
    subst = " "
    one=re.sub(r'[^a-zA-Z0-9]','',x)
    return ns(one)
    one=re.sub(r'[^a-zA-Z0-9]',' ',x)
rep(s['values'][-1][1]).split()
bases=rep(s['values'][-1][1]).split()
bases
[a[1].upper() for a in bases]
[a[0].upper() for a in bases]
bases=[a[0].upper() for a in bases]
strand1=random.choices(bases,k=10)
strand1
{key:val for (key,val) in enumerate(strand1)}
def ss():
    return randon.choices(bases,k=10)
    return random.choices(bases,k=10)
enumerate(ss)
strand1=ss()
dna={key:[] for (key,value) in enumerate(strand1)}
dna
dna={key:[val,None] for (key,value) in enumerate(strand1)}
dna={key:[val,None] for (key,val) in enumerate(strand1)}
[{} for a in range(3)]
[{key:None for key in bases} for a in range(3)]
import string
string.printable()
print(string.printable)
print(random.choices(string.printable, k=3))
print("".join(random.choices(string.printable, k=3)))
print("".join(random.choices(string.printable, k=10)))
"".join(random.choices(string.printable, k=10))
p=data('eliot')
p=sheet('eliot')
p[3]
rep(p['values'][-1].split())
p['values']
p['values'][1]
str(p['values'][1])
map(p['values'][1],str)
mystr=p['values']
mystr
my2=mystr
id(my2)
id(mystr)
[list(a) for a in my3]
[str(a) for a in my3]
[tuple(a) for a in my3]
print([tuple(a) for a in my3])
my3=[list(map(str,a)) for a in my2]
my3[1]
''.join(my3[1])
[''.join(a) for a in my3]
[resp(''.join(a)) for a in my3]
[rep(''.join(a)) for a in my3]
    result = re.sub(regex, subst, s, 0, re.MULTILINE).strip()
m=[rep(''.join(a)) for a in my3]
{key:val for (key,val) in enumerate(m)}
me={key:val for (key,val) in enumerate(m)}
me[3]
for a in list(me.keys()):
    print(me[a])
    if a >4:
        print(me[a])
        del me([a])
        del me[a]
for a in 'cat':
{key:None for key in 'cat'}
{key:0 for key in 'cat'}
dd={key:0 for key in 'cat'}
dd['c']
dd['c']=dd['c']+1
list(dd.keys())
inp='ccattt'
dd={key:0 for key in inp}
for l in inp:
    if l in list(inp.keys()):
        dd[l]=dd[l]+1
l in list(dd.keys())
dd[l]
    if l in list(dd.keys()):
inp='google.com'
def counts(inp):
    dd={key:0 for key in inp}
    for l in inp:
        if l in list(dd.keys()):
            dd[l]=dd[l]+1
counts('google.com')
sorted(dd)
sorted(dd, key=lambda x: x[1])
sorted(dd, key=lambda x: x[0])
print(sorted(dd, key=lambda x: x[0]))
employees = [("Max", 27), ("Jonathan", 35), ("David", 32), ("Ashley", 28)]
sorted(employees)
sorted(employees, key=lambda: x[1])
sorted(employees, key=lambda x: x[1])
employees
sorted(employees, key=lambda x: x[0][2])
sorted(employees, key=lambda x: x[0][-1])
employees.extend('xxx')
sorted(employees, key=lambda x: x[0])
employees[0]
employees[0][0]
employees[0][0]='aaaMax'
employees[0][0]=('aaaMax',300)
employees[0]=('aaaMax',300)
sorted(employees,key=lambda x: x[0])
sorted(employees,key=lambda x: x[0][0])
employees[0]=('AAAMax',300)
counts('Define a function named char_frequency that takes one argument, str1.')
f'{24*60:_}'
f'{24*60*60:_}'
f'{24*60*60*14:_}'
f'{24*60*60*11:_}'
f'{24*60*60*365:_}'
f'{24*60*60*365*10:_}'
f'{24*60*60*365*20:_}'
f'{24*60*60*365*40:_}'
f'{24*60*60*365*37:_}'
f'{24*60*60*365*32:_}'
thelines = ['hello:3.1 GB', 'world:1.2 MB', 'foo:956.2 KB']
''hello:3.1 GB'
'hello:3.1 GB'
'hello:3.1 GB'.split(':')
'hello:3.1 GB'.split(':',1)
help(split)
help()
alines=open('duh.txt', 'r').read()
alines
alines.split('\n')
[a.strip() for a in alines.split('\n')]
[a.strip() for a in alines.split('\n') if len(a)>0]
du=[a.strip() for a in alines.split('\n') if len(a)>0]
du
du[1]
du[1].split('\t')
[a[1],a[0] for a in du[1].split('\t')]
[(a[1],a[0]) for a in du[1].split('\t')]
du[1].split('\t')[1]
[a for a in du[1].split('\t')]
[a for a in du[1].split('\t')][1]
[x for x in [a for a in du[1].split('\t')]]
[x[1] for x[0] in [a for a in du[1].split('\t')]]
[x[1] for x[0] x in [a for a in du[1].split('\t')]]
[(x[1], x[0]) x in [a for a in du[1].split('\t')]]
[(x[1], x[0]) for x in [a for a in du[1].split('\t')]]
a,b=[x for x in [a for a in du[1].split('\t')]]
b,a
[b,a]
':'.join([b,a])
b,a =du[1].split('\t')
[a,b]
mult = dict(KB=2**10, MB=2**20, GB=2**30)
gitsize('10kb')
sorted(thelines)
rd=random.random()
rd
def rd():
    return random.random()
rd()
sorted(thelines,key=rd)
def rd(x):
for a in range(3):
    print(sorted(thelines,key=rd))
for a in range(13):
re.search('\d','234')
f=re.search('\d','234')
f.group(0)
f=re.search('\d+','234')
f=re.search('\d+','jim is 234 mb')
k=sheet('eliot')
v=k['values']
sorted(v)
def k(x):
    return len(x)
sorted(v,key=k)
[k(a) for a in v]
k('jim')
k(v[1])
v[1]
k(str(v[1]))
    return len(str(x))
sorted(v,key=k, reverse=True)
print(Path.cwd())
zdir(Path)
list(Path('.').iterdir())[1]
zdir(list(Path('.').iterdir())[1])
list(Path('.').iterdir().name)[1]
list(Path('.').iterdir().name)
[a.name for a in Path('.').iterdir())
[a.name for a in Path('.').iterdir() if 'j' in a.name]
my_list = [line.strip() for line in open('duh.txt', 'r')]
    return random.randint(1,20)
[ri() for a in range(20)]
s=[ri() for a in range(20)]
sum(s)
    a*=a
b+=2
b*=2
g=(ri() for a in range(20))
[a for a in g]
g()
    print(a*s[count])
    print(f'{a} {s[count]}')
max(s)
min(s)
tot=1
    print(f'{tot}  {a} ')
    tot*=a
print(tot)
3e10
f"{3e10:,}"
print(f'python_version={python_version}')
sys
type(sys.version)
type(sys.version_info)
print(sys.version_info)
zdir(platform)
platform.python_version
platform.python_version()
f"{3e10:.5f}"
f"{3e10:.0f}"
f"{3e10:,.0f}"
n=3
1/n
(1/n)^n
(1/n)**n
x=(1+(1/n))
x=(1+(1/n))^^n
x=(1+(1/n))**n
n=10000
n=100000000000
e=(1+(1/n))**n
    print(f'{tot:,.0f}  {a} ')
for a in li:
    if len(a)>=2:
li= ['abc', 'xyz', 'aba', '1221']
li= ['abc', 'bb' 'xyz', 'aba', '1221']
    if not len(a)>=2:
li= ['abc', 'b' 'xyz', 'aba', '1221']
li= ['abc', 'b', 'xyz', 'aba', '1221']
range(8,2,2)
print(range(8,2,2))
[a for a in range(8,2,2)]
[a for a in range(8,20,2)]
[a for a in range(10,120,10)]
r= range(10,120,10)
a=[a for a in range(10)]
a=[a for a in range(11)]
a[0:3]
a[-1:]
a[-3:]
a[3:2]
a[3:5]
a[:-1]
a[:-3]
a[-1:]==a[0]
a[0]
a='abba'
a[-1:]==a[0] and len(a)>2
a[-1:]==a[0] and len(a)>5
    if len(a)>=2 and a[0]==a[-1]:
v+=1
        o+=f' {a} '
print(f'total is {n} items {o}')
n=0
o=''
cs= [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
sorted(cs, key=lambda x:x[1])
sorted(cs, key=lambda x:x[1], reverse=True)
sorted(cs)
file='/mnt/c/projects/music/gut/script/clips.ps1'
clip=[line.strip() for line open(file)]
clip=[line.strip() for line in open(file)]
'\n'.join(line)
'\n'.join(clip)
open('pclip','w','utf-8').write('\n'.join(clip))
open('pclip','w','utf-8').write("\n".join(clip))
open('xx', 'w', encoding='utf-8').write("\n".join(clip))
[(a,b) for a,b in enumerate(clip)]
[[a,b] for a,b in enumerate(clip)]
clip[3]
clip[3].split(' ')
clip[3].split(' ').filter(a, len(a)>1)
clip[3].split(' ').filter(len(a)>1,a)
e 146
filter(a>2,[1,2,3])
def c(n):
    if n>2:
filter(c,[1,2,3])
list(filter(c,[1,2,3]))
[a>2 for a in [1,2,3,4]]
filter(lambda x:len(x)>1,clip[3].split(' '))
list(filter(lambda x:len(x)>1,clip[3].split(' ')))
'\n'.join(list(filter(lambda x:len(x)>1,clip[3].split(' '))))
c3='\n'.join(list(filter(lambda x:len(x)>1,clip[3].split(' '))))
open('xx', 'w', encoding='utf-8').write(c3)
clip[3]=c3
open('c.ps1', 'w', encoding='utf-8').write('\n'.join(clip))
open('c.ps1', 'w', encoding='utf-8').write('\n '.join(clip))
v=s[1]
v=3333
s[1]=333
open('d.ps1', 'w', encoding='utf-8').write('\n '.join(clip))
[a for a in clip[3].split(' ') if len(a) >1]
cps([a for a in clip[3].split(' ') if len(a) >1])
wr=[a for a in clip[3].split(' ') if len(a) >1]
wr
open('wr','w',encoding='utf-i').write('\n'.join(wr))
open('wr','w',encoding='utf-8').write('\n'.join(wr))
hex('a')
'a'.encode("utf-8").hex()
open('c2.ps1', 'w', encoding='utf-8').write("\n".join(clip))
0d0a
h="0d0a"
hex_string="0d0a"
byte_string = bytes.fromhex(hex_string)  
ascii_string = byte_string.decode("ASCII")  
print(ascii_string)  
print(ascii_string)
byte_string
so='''Sat_Jan_13_19:15:41.txt Jan 13 19:18
junk/vim/file.txt Jan 13 18:56
junk/vim/testing-ex.txt Jan 13 18:41
junk/vim/v Jan 13 18:59
junk/vim/xx Jan 13 18:53
music/gut/script/clips.ps1 Jan 13 12:37
music/gut/todo/FingerPatOne.mp4 Jan 13 22:11
music/gut/todo/FingerPatterns.mp4 Jan 13 21:45
music/mid/autumn_leaves_arpeggiated.midi Jan 14 01:08
music/mid/autumn_leaves_strummed.midi Jan 14 01:08
music/mid/example.midi Jan 14 01:08
music/mid/qmidi.py Jan 14 01:07
music/oc.ps1 Jan 14 01:13
music/vhis Jan 13 23:39
so
so.split('\n')
[a for a in so.split('\n') if len(a)>0]
soa=[a for a in so.split('\n') if len(a)>0]
soa[1]
soa[1].split('\s')
soa[1].split(' ')
soa[1].split(' ')[2]
sorted(soa)
sorted(soa, key=lambda x:x[2])
soa
sorted(soa, key=lambda x:x[0])
sorted(cs, key=lambda x:x[0])
[x[2] for x in soa]
[x[0] for x in soa]
soa.append('AAAAA')
[a for a in soa]
[a for a in soa if not 'A' in a]
soa.pop(-1)
[a for a in range(10,120,10)].pop()
[a for a in range(10,120,10)].pop(2:4)
r=[a for a in range(10,120,10)]
del r[1:3]
del r[0:3]
del r[0:len(r)]
r=[a for a in range(10,120,7)]
r[1][1]
sorted(r)
str(7)
[list(map(str,a)) for a in r]
[map(str,a) for a in r]
[str(a) for a in r]
sorted([str(a) for a in r])
sorted([str(a) for a in r],key=lambda x:int(x))
file='/mnt/c/projects/left.txt'
date=[line.strip() for line in open(file)]
def three(x):
    return x[3]
three(date)
three[1](date)
three(date[1])
    y=x.split(' ')
    return y[3]
    return y[2]
sorted(date)
sorted(date,key=lambda x:three(x))
sorted(date,key=lambda x:three(x), reverse=True)
left=[line.strip() for a in open(file)]
left=[line.strip() for line in open(file)]
left
left[1]
left[1].split(' ')
left[1].split(' ',1)
left[1].split(' ',1)[1]
a,b=left[1].split(' ',1)
b=left[1].split(' ',1)[1]
b=left[1].split(' ',1)[1].split(' ',1)
b=left[1].split(' ',1)[1].split(' ',1)[1]
[a for a in left]
def mk(x):
    return x.split(' ',1)[1].split(' ',1)[1]
[mk(a) for a in left]
sorted([mk(a) for a in left])
sorted(left)
sorted(left, key=lambda x: mk(x))
sorted(left, key=lambda x: mk(x), reverse=True)
print('jim'+'\t'+'ste')
list = ['UA2483', 'ORD', 'Jan 1', '09:00', 'LAS', 'Jan 1', '10:54', '0 Stop\n-', '3h 54m', 'BASIC ECONOMY', 'USD $230.90', 'UA1488', 'ORD', 'Jan 1', '13:00', 'LAS', 'Jan 1', '14:57', '0 Stop\n-', '3h 57m', 'BASIC ECONOMY', 'USD $230.90']
print(list)
print('\t'.join(list))
sl=sorted(left, key=lambda x: mk(x), reverse=True)
print('\t'.join(ls))
print('\t'.join(sl))
print(f'bobby{space * 5}hadz')  # 👉️ 'bobby     hadz'
space='x'*5
space
space=' '
print('-'*20)
for a in sl:
        print(a, sep=' ')
print(f'{headers[0]: <20}{headers[1]: <15}{headers[2]}')
st=sorted(left, key=lambda x: mk(x), reverse=True)
st[1].split(' ')
st[1].split(' ',1)
for a in st:
    print(a.split(' ',1))
[a.split(' ',1) for a in st]
[a.split(' ',1) for a in st][1]
spt=[a.split(' ',1) for a in st]
#https://bobbyhadz.com/blog/python-print-dictionary-in-table-format
spt
print('jim')
print('jim':<20)
k='foo'
print(f'{k}')
print(f'{k:<20}')
print(f'{k:<20} {k:50}')
ss=(f'{k:<20} {k:50}')
spt[1]
print(spt[1][1])
print(spt[1][0])
print(f'{spt[1][0]})
print(f'{spt[1][0]}')
print(f'{spt[1][0]<20}')
print(f'{spt[1][0]:<20}')
print(f'{spt[1][0]:<20} "foo"')
print(f'{spt[1][0]:<20} "foo":<30')
print(f'{spt[1][0]:<20} {k:<30}')
print(f'{spt[1][0]:<40} {k:<30}')
for a in spt:
    print(f'{a[0]:<40} {a[1]:<30}')
st[:3]
st[:1]
mk(str(st[:1]))
print(sorted([mk(a) for a in left]))
left[1].split(' ',1)[1].split(' ',1)
left[1].split(' ',1)[1].split(' ',1)[1]
[mk(a) for a in left][:10]
sorted([mk(a) for a in left][:10])
left[1].split(' ',1)[1].split(' ',1)[1][3]
left[1].split(' ',1)[1].split(' ',1)[1][3].replace(':','')
left[1].split(' ',1)[1].split(' ',1)[1].replace(':','')
left[1].split(' ',1)[1].split(' ',1)[1].replace(':','').replace(' ','')
int(left[1].split(' ',1)[1].split(' ',1)[1].replace(':','').replace(' ',''))
    # return x.split(' ',1)[1].split(' ',1)[1]
    return int(x.split(' ',1)[1].split(' ',1)[1].replace(':','').replace(' ',''))
mk(left[1])
st[:5]
st[5:]
    print(dir(datetime), file=f)
    print(f'{a[1]} {a[0]:<50} ')
    with open('recent.txt', 'w') as f:
        print(f'{a[1]} {a[0]:<50} ', file=f)
    with open('recent.txt', 'wa') as f:
    with open('recent.txt', 'a') as f:
#print(f'{spt[1][0]:<40} {k:<30}')
left=[line.strip() for line in open(file) if not line.strip().startswith('sql_') ]
left=[line.strip() for line in open(file) if not line.strip().contains('sql_') ]
left=[line.strip() for line in open(file) if not 'sq' in line.strip() ]
lef
left=[line.strip() for line in open(file) if not 'sql_' in line.strip() ]
5*60
5*60+16
316/60
316%60
int(316/60)
int(316/60) + 316%60
int(316/60) + int(316%60)
f'{int(316/60)}:{int(316%60)}'
def decTime(x):
    a,b=x.split(':')
    r= f'{int(x/60)}:{int(x%60)}'
decTime(60)
decTime(331)
def fime(x):
    return a*60+b
fime(3:31)
fime('3:31')
'3:31'.split(':')
a,b='3:31'.split(':')
    return int(a*60)+int(b)
a*60
    return int(a)*60+int(b)
decTime(211)
clips=open(file, 'r', encoding='utf-8').read().strip().split('\n')
clips
type(clips)
[[a,b] for a,b in enumerate(clips)]
clips[3]
type(clips[3])
clips[3].split(' ')
clips[3].split(' ')[1]
clips[3].split(' ')[1]='c:\\you\new'
clips[3]='not'
clips[3].replace('you','xxxxx')
clips[3].replaceAll('you','xxxxx')
c=clips[3]
s.split(' ')
c.split(' ')
[a.strip() for a in c.split(' ')]
[a for a in c.split(' ') if not len(a)==0]
[a for a in c.split(' ') if not len(a)==0][0]
join(' ')(c.split(' '))
' '.join(c.split(' '))
for a in c.split(' '):
c.split(' ')[:3]
' '.join(c.split(' ')[:3])
' '.join(c.split(' ')[:3])+'"'
d=' '.join(c.split(' ')[:3])+'"'
d=' '.join(c.split(' ')[:3])+' "'
clips[3]=d
open('c2.ps1', 'w', encoding='utf-8').write("\n".join(clips))
str(clips[3].split(' '))
open('c3.ps1', 'w', encoding='utf-8').write("\n".join(clips[3]))
open('c3.ps1', 'w', encoding='utf-8').write("\n".join(clips[3].split(' ')))
d=c.split(' ')
[a.upper() for a in d]
[a.lower() for a in d]
e=[a.lower() for a in d]
e=' '.join([a.lower() for a in d])
e.split(' ')
sorted(e.split(' '))
f=[a for a in sorted(e.split(' ')) if not a='"']
f=[a for a in sorted(e.split(' ')) if not a=='"']
#open('c3.ps1', 'w', encoding='utf-8').write("\n".join(clips[3].split(' ')))
open('list.txt', 'w', encoding='utf-8).write('\n''.join(f))
open('list.txt', 'w', encoding='utf-8).write('\n'.join(f))
open('list.txt', 'w', encoding='utf-8').write('\n'.join(f))
#clips=open(file, 'r', encoding='utf-8').read().strip().split('\n')
cnew=open('list.txt','r',encoding='utf-i').read().strip)
cnew=open('list.txt','r',encoding='utf-i').read().strip))
cnew=open('list.txt','r',encoding='utf-8').read().strip))
cnew=open('list.txt','r',encoding='utf-8').read().strip())
e 70
d[1:len(d)-1]
f('"{d[1:len(d)-1]}"')
qu=('"{d[1:len(d)-1]}"')
qu
qu=(f'"{d[1:len(d)-1]}"')
qu=(f'"' '.join({d[1:len(d)-1]})"')
qu=(f'"' '.join({d[1:len(d)-1])}')
qu=(f"' '.join({d[1:len(d)-1])}")
qu=(f"{' '.join(d[1:len(d)-1])}")
f{"'"}
f'{"'"}'
f'{"a"}'
f'{"\'"}'
f'''insert'''
f'''"insert'''
f'''"{c[3]}'''
f'''"{c}'''
f'''" {qu} " '''
f=[a for a in sorted(d.split(' ')) if not a=='"']
print('C:\Users\John')
print('C:\\Users\\John')
print(f'C:\Users\John')
print(r'C:\Users\John')
print(r'C:\Users\John'.replace('Us','them'))
a=dict(zip([a for a in range(3)],[a for a in 'jimss']))
a.items()
[a for a in a.items()]
def modify_list(my_list):
    my_list.append('new_item')
my_list = ['item1', 'item2']
modify_list(my_list)
print(my_list)
# ['item1', 'item2', 'new_item']
print(mylist)
[[a,b] for a,b in enumerate(mylist)]
[[a,b] for a,b in enumerate(my_list)]
k=my_list
my_list.pop()
k.pop()
b=a
a[0]='m'
c=a[0]
a[0]='t'
a[0]=c
sh=sheet('eliot')
[a for a in sh]
str(sh)
   def modify_value(my_val):
        my_val += 10
    my_val = 20
    modify_value(my_val)
    print(my_val)
def modify_value(my_val):
    my_val += 10
my_val = 20
modify_value(my_val)
print(my_val)
my_val=0
my_val
sh['values'][1]
' '.join(sh['values'][1])
li=sh['values']
li[1][1]
li[1]
def c(x):
    x[1]='noooo'
c(li)
    x[1]=['yes']
os.chdir('\mnt\c\projects')
os.chdir(r'\mnt\c\projects')
os.chdir(r'\\mnt\\c\\projects')
os.chdir(r'/mnt/c/projects')
list(Path.cwd().iterdir())
list(Path.cwd().iterdir())[1]
work_dir_content = list(Path.cwd().iterdir())
print(f"The '{Path.cwd()}' working directory has {len(work_dir_content)} items:")
# Loop over the paths in the working directory and print them
for path in work_dir_content:
    print(path)
work_dir_content
[a for a in work_dir_content]
work_dir_content[1]
print(work_dir_content[1])
[a.name for a in work_dir_content]
Path.cwd()
Path.cwd().name
script_directory = pathlib.Path(__file__).parent.resolve()
print(script_directory)
script_directory = pathlib.Path('recent.txt').parent.resolve()
Path('.')
Path('.').name
p=Path('.')
[x for x in p.iterdir() if x.is_dir()]
[x.name for x in p.iterdir() if x.is_dir()]
print([x.name for x in p.iterdir() if x.is_dir()])
#https://www.analyticsvidhya.com/blog/2024/01/mastering-f-strings-in-python/
sorted(d)
f=[a for a in sorted(d) if not a=='"']
qu=f'''" {qu} " '''
qu 
# qu=('"{d[1:len(d)-1]}"')
qu1=(f"{' '.join(d[1:len(d)-1])}")
qu=f'''" {qu1} " '''
clips[3]=qu
open('cll.ps1', 'w', encoding='utf-8').write('\n'.join(clips))
sorted[a.lower() for a in d])
sorted[a.lower() for a in d]
sorted([a.lower() for a in d])
c.replace('"','')
c=clips[3].replace('"', '')
d.strip()
d=[a for a in d if len(a)!=0]
f=[a.lower() for a in f]
d=[a.lower() for a in d if len(a)!=0]
qu1=(f"{' '.join(d[1:len(f)-1])}")
qu1=(f"{' '.join(f[1:len(f)-1])}")
qu.split(' ')
qu1=(f"{' '.join(f)}")
qu1
qu1.split(' ')
open('cll2.ps1', 'w', encoding='utf-8').write('\n'.join(clips))
'\n'.join(clips)
clips[4]
clips[4]=' ` '
open('cll3.ps1', 'w', encoding='utf-8').write('\n'.join(clips))
#tryin to fix backtick error
if len(sys.argv) > 1:
    print(f"Hello, {sys.argv[1]}!")
    print("Hello, world!")
ftime('3:30')
fime('3:30')
print(sys)
print(sys.__all__))
print(sys.__all__)
from convert import *
zdir(convert)
from convert import decTime, fime
dir(fime)
zdir(fime)
print(dir(fime))
fime.__code__
ins(ftime)
ins(fime)
import convert
convert.ftime('3:30')
convert.fime('3:30')
open('cllr.ps1', 'w', encoding='utf-8').write('\n'.join(clips))
del clips[5]
open('mylist','w',encoding='utf-8').write('\n'.join(f))
lfile='/mnt/c/projects/music/gut/script/mylist'
slist=open(lfile,'r', encoding='utf-8').read().strip().split('\n')
slist
slist=[a.lower() for a in slist if len(a)!=0]
g=[a for a in sorted(slist) if not a=='"']
qu1=(f"{' '.join(g)}")
f{'"{qu1}"'}
f('"{qu1}"')
f('{qu1}')
type(qu1)
f'"{qu1}"'
mystring='''
C:\projects\music\gut\script\iv.ps1
start-process "C:\Program Files (x86)\VideoLAN\VLC\vlc.exe" -ArgumentList `
"--no-video-title",
mystring
f'{mystring) "{qu1}"'
f'{mystring} "{qu1}"'
print(f'{mystring} "{qu1}"')
mystring.split('\n')
mystring=[a for a in mystring.split('\n') if len(a)!=0]
print(mystrin)
print(mystring)
mystring=r'''
mystring+'foo'
'\n'.join(mystring)
'\n'.join(mystring)+'foo'
'\n'.join(slist)
slistLow=[a.lower() for a in slist if len(a)!=0]
slistLow
listSort=[a for a in sorted(slistLow)]
listSort
mystring=
f'{'\n'.join(mystring)} {'\n'.join(listSort}'
f"{'\n'.join(mystring)} {'\n'.join(listSort}"
"\n".join(mystring)
print("\n".join(mystring))
f'{"\n".join(mystring)} {"\n".join(listSort}'
f'{"\n".join(mystring)}'
string1="\n".join(mystring)
string1
string2="\n".join(listSort)
f'{string1} {string2}'
print(f'{string1} {string2}')
print(f'{string1} {string2}  ` ')
print(f'{string1} {string2} \n ` ')
string2=" ".join(listSort)
cps(f'{string1} {string2} \n ` ')
[[a,b] for a,b in enumerate(slist)]
string3=f'{"string2"}'
string3
string3=f'"{string2}"'
string3=f'\n"{string2}"'
print(f'{string1} {string3} \n ` ')
cps(f'{string1} {string3} \n ` ')
final=f'{string1} {string3} \n ` '
open('more.ps1','w',encoding='utf-8').write(final)
open('/mnt/c/projects/music/gut/script/more.ps1','w',encoding='utf-8').write(final)
mysoup.body
str(mysoup.body)
open('winners.html','w',encoding='utf-8').write(str(mysoup.body))
data=open('pwik.html', 'r', encoding='utf-8').read().strip().split('\n')
mysoup = soup(data, "html.parser")
data=open('pwik.html', 'r', encoding='utf-8')
data=open('pwik.html', 'r', encoding='utf-8').read()
print(mysoup.head)
for a in mysoup('script'):
[a for a in mysoup('script')]
[a[:10] for a in mysoup('script')]
mysoup.li
mysoup.script
mysoup.style
data=open('/mnt/c/projects/bs/lot/curl.html','r', encoding='utf-8').read()
ms.script
links = []
for link in ms.find_all("a", href=True):
    links.append(link["href"])
classes = [
    value for element in ms.find_all(class_=True) for value in element["class"]
links
classes
ms.text
for child in ms.recursiveChildGenerator():
        if child.name:
            print(child.name)
ms.prettify
for script in ms(["script", "style"]):
for button in ms("button"):
    print(button)
    button.extract()
t=ms.prettify
str(ms.prettify)
with open('ind.html','w', encoding='utf-8').write(str(ms.prettify))
open('ind.html','w', encoding='utf-8').write(str(ms.prettify))
ms("style")
ms("div")
ms.title
ms.title.name
ms.title.name='kkkk'
for a in ms('head'):
    a.extract()
listSort=slistLow
type(string1)
string1.split(' ')
string1.split(' ')[1]
string1.split(' ')[0]
string1.split(' ')[:3]
string1.split(' ')[1:]
moreString='\n'.join(string1.split(' ')[:3])
moreString
finalMore=f'{moreString} {string3} \n ` '
finalMore
string1.split(' ')[:4]
string1.split(' ')[1:4]
string1.split(' ')[1:5]
string1.split(' ')[1:6]
moreString='\n'.join(string1.split(' ')[1:6])
open('/mnt/c/projects/music/gut/script/more.ps1','w',encoding='utf-8').write(finalMore)
string1.split('\n')
string1.split('\n')[1:]
moreString='\n'.join(string1.split('\n')[1:])
j=input()
#create my string with ps basic header
#read mylist from music script directory
#for info only
#[[a,b] for a,b in enumerate(slist)]
#lower and remove blanks for slist
#sorted not a good idea but if?
#listSort=[a for a in sorted(slistLow)]
#ps header
#string2=" ".join(listSort)
#ps play array
#print(f'{string1} {string3} \n ` ')
from bs4 import BeautifulSoup as bsoup
data=open('local','r', encoding='utf-8').read()
data=open('local.html','r', encoding='utf-8').read()
soup=bsoup(data, 'html-parser')
soup=bsoup(data, 'html.parser')
soup['style')
soup['style']
for a in soup['style']:
for a in soup['script']:
for a in soup(['script']):
for a in soup(['style']):
str(soup.prettify)
soup.prettify
cps(soup.prettify)
cps(soup.body)
cps(soup.html)
open('soup.html','w',encoding='utf-8').write(str(soup.html))
[a for a in os.scan('.')]
ll=open('image','r',encoding='utf-8').read().strip().split('\n'))
ll=open('image','r',encoding='utf-8').read().strip().split('\n')
[chr(a) for a in range(10)]
[chr(a) for a in range(50:60)]
[chr(a) for a in range(50,60)]
[chr(a) for a in range(50,120)]
print([chr(a) for a in range(50,120)])
print([(a,chr(a)) for a in range(50,120)])
print([[a,chr(a)] for a in range(50,120)])
print([[a,chr(a)] for a in range(50,120)].join('\n'))
print([[a,chr(a)] for a in range(50,140)])
chrs=[[a,chr(a)] for a in range(50,140)]
chrs
'\n'.join(chrs)
[' - '.join(a) for a in chrs)]
[' - '.join(a) for a in chrs]
chrs[1]
str(chrs[1])
chrs=[[str(a),chr(a)] for a in range(50,140)]
chrs[:10]
chrs[:20]
chrs[10:]
print(chrs)
chrs=[[str(a),chr(a)] for a in range(97,122)]
chrs=[[str(a),chr(a)] for a in range(97,123)]
data=open('image','r', encoding='utf-8').read()
data=open('image','r', encoding='utf-8').read().strip()
ds=data.split('\n')
m1('jim')
[m1(a) for a in ds]
[(a,b) for a,b in enumerate(ds)]
[(m1(a),b) for a,b in enumerate(ds)]
[(chrs[a],b) for a,b in enumerate(ds)]
[(chrs[a][1],b) for a,b in enumerate(ds)]
[f'{(chrs[a][1]}',b) for a,b in enumerate(ds)]
' '.join(chrs)
' '.join(f'{chrs[1]}')
''.join(f'{chrs[1]}')
[a[1] for a in chrs]
[f'{a[1]} for a in chrs]
[f'{a[1]}' for a in chrs]
[(f'{(chrs[a][1]}',b) for a,b in enumerate(ds)]
[(f'{a}',b) for a,b in enumerate(ds)]
chrs[23]
chrs[23][1]
[' '.join(a) for a in part1]
[' '.join(a) for a in part1][1]
cps([' '.join(a) for a in part1][1])
ds
for a in enumerate(ds):
    print(chrs[a[0]])
for a,b in enumerate(ds):
    print(b)
    print(f'{chrs[a]}')
    print(f'{chrs[a][1]}')
    print(f'{chrs[a][1]} {b}')
ds[1]
ds[1][:-3]
ds[1][-3]
ds[1][-3:]
    print(f'{chrs[a][1]} {b[-3:}')
    print(f'{chrs[a][1]} {b[-3:]}')
mm=[]
'\n'.join(mm)
open('final','w', encoding='utf-8').write('\n'.join(mm))
[a.name for a in os.scandir('.') if 'png' in a]
[a.name for a in os.scandir('.') if 'png' in a.name]
pic=[a.name for a in os.scandir('.') if 'png' in a.name]
pic
[img(a) for a in pics]
[img(a) for a in pic]
'\n'.join([img(a) for a in pic])
cps('\n'.join([img(a) for a in pic]))
    html=f'<img src="{x}" alt="">\n <div> {x} </div> '
    return html
    html=f' <div> {x} </div>\n <img src="{x}" alt="">\n  '
ds[4]
cps(ds[4])
img_url = 'https://blog.finxter.com/wp-content/uploads/2022/04/greenland_04a.jpg'
urllib.request.urlretrieve(img_url, "greenland_04a.png")
data=open('image','r', encoding='utf-8').read().strip().split('\n')
for a,b in enumerate(data):
    print(f'{a} ,{b}')
    print(f'{a} {b}')
f"greenland_04a.png"
f"{chrs[23][1]}greenland_04a.png"
    urllib.request.urlretrieve(b, f"{chrs[a][1]}greenland_04a.png")   
u='https://raw.githubusercontent.com/tg12/script-toolbox/main/fast_portscanner.py'
print(response.text)
with open('port.py', 'w', encoding='utf-8').write(response.text)
with open('port.py', 'w', encoding='utf-8').write(response.text))
open('port.py', 'w', encoding='utf-8').write(response.text))
open('port.py', 'w', encoding='utf-8').write(response.text)
import socket
from concurrent.futures import ThreadPoolExecutor
def scan_port(host, port):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.connect((host, port))
# Define a list of hosts and ports to scan
hosts = ['google.com', 'facebook.com', 'amazon.com']
ports = [80, 443, 8080]
# Scan the hosts and ports using multithreading
results = []
with ThreadPoolExecutor(max_workers=10) as executor:
    for host in hosts:
        for port in ports:
            results.append({'Host': host, 'Port': port, 'Open': executor.submit(scan_port, host, port).result()})
# Create a Pandas DataFrame from the results
df = pd.DataFrame(results)
# Print the results
from Wappalyzer import Wappalyzer, WebPage
webpage = WebPage.new_from_url('http://example.com')
wappalyzer = Wappalyzer.latest()
wappalyzer.analyze(webpage)
site="https://onlineservices.dps.mn.gov/EServices/_/"
webpage = WebPage.new_from_url(site)
webpage = WebPage.new_from_url(mysite)
mysite="https://onlineservices.dps.mn.gov/EServices/_/"
mysite
    #convert mm:ss to decimal
    if ':' in x:
        a,b=x.split(':')
        return int(a)*60+int(b)
        return 'no colon'
fime('330')
file_path = 'path/to/save/myscore.mscx'
print(os.environment)
print(os.environ)
import head.py
xx=[a for a in range(10)]
def f(x):
    return x>3
filter(f,xx)
list(filter(f,xx))
list(filter(lambda n:n>3,xx))
k='The lady doth protest too much, methinks'.split('')
k='The lady doth protest too much, methinks'.split(' ')
list(filter(lambda n:'0' in n,k))
list(filter(lambda n:'o' in n,k))
type(zdir(os))
type(dir(os))
dir(os)[:3]
import * from  head.py
import head
zdir(head)
head.response
head.response.text
head.BeautifulSoup
head.url
soup=bsoup(response, 'html.parser')
dir(head)
soup=head.bsoup(response, 'html.parser')
soup.pretty
str(soup.find_all('head'))
open('head','w',encoding='utf-i').write(str(soup.find_all('head')))
open('head','w',encoding='utf-8').write(str(soup.find_all('head')))
execfile('head.py')
exec('head.py')
exec('head')
exec(open('head.py').read())
'\n'.join(soup.find_all('head'))
'\n'.join(str(soup.find_all('head')))
''.join(str(soup.find_all('head')))
''.join(str(soup.find_all('head')[0]))
k=''.join(str(soup.find_all('head')[0]))
open('head','w',encoding='utf-8').write(k)
head_datas
[head for head in soup.find_all('head')]
soup.find_all('head')[1]
soup.find('head')
[a for a in soup.find('head')]
soup.input
str(soup.head)
soup.head.text
soup.head.html
soup.head.contents
print(soup.head.contents)
list(soup.head.children)
list(soup.head.children)[1]
list(soup.head.children)[3]
[a for a in list(soup.head.children)]
file='/mnt/c/projects/myr/left.txt'
left.split(' ')
left[0].split(' ')
calendar.month_abbr[2]
calendar.month_abbr[22]
[calendar.month_abbr[a] for a in range(1,23)]
[calendar.month_abbr[a] for a in range(1,12)]
[calendar.month_abbr[a] for a in range(1,13)]
[[a, calendar.month_abbr[a]] for a in range(1,13)]
[{a, calendar.month_abbr[a]} for a in range(1,13)]
mon=[{a, calendar.month_abbr[a]} for a in range(1,13)]
type(mon[1])
mult[1]
dict('jim'='steffes')
dict(jim='steffes')
dict(1='steffes')
dict(str(1)='steffes')
str(1)
dict('1'='steffes')
dict.fromkeys(range(1, 4))
dict([(1, 2), (3, 4)])
dict([1,'feb'])
dict([1,2])
dict((1,'feb']))
dict((1,'feb')])
dict([(1, 2), (3, 'jim')])
mo=[calendar.month_abbr[a] for a in range(1,13)]
mo
d=dict([(1, 2), (3, 'jim')])
d[4]='bob'
d=dict()
d.clear
d.clear()
c=1
for a in mo:
    d[1]=mo
    c+=1
    d[c]=a
    d[a]=c
[(a,b) for a,b in enumerate(mo, start=1)]
[(b,a) for a,b in enumerate(mo, start=1)]
[dict(b,a) for a,b in enumerate(mo, start=1)]
for a,b in enumerate(mo,start=1):
    d[a]=b
moN=dict()
    moN[a]=b
moN
    moN[b]=a
left[1].split(' ')[1]
moN[left[1].split(' ')[1]]
    # return int(x.split(' ',1)[1].split(' ',1)[1].replace(':','').replace(' ',''))
    return moN(x.split(' ')[1])
mk
    return moN[x.split(' ')[1]]
left[1].split(' ')[2]
    return moN[x.split(' ')[1]] + x.split(' ')[2]
    return moN[x.split(' ')[1]] + str(x.split(' ')[2])
moN(left[1].split(' ')[1])
str(moN[left[1].split(' ')[1]])
    return str(moN[x.split(' ')[1]]) + str(x.split(' ')[2])
left[1].split(' ')[3]
cps(moN)
left=[line.strip() for line in open(file) if not ['sql_'] in line.strip() ]
['sql_']
left=[line.strip() for line in open(file) if  line.strip() not in ['sql_'] ]
left=[line.strip() for line in open(file) if  line.strip() not in ['sql_', '.bhistory'] ]
left=[line.strip() for line in open(file) if  line.strip() not in ['sql_', '\.bhistory'] ]
left=[line.strip() for line in open(file) if  line.strip() not in ['sql_', '\.bhistory', 'left.py'] ]
'The lady doth protest too much, methinks'.split(' ')
l='The lady doth protest too much, methinks'.split(' ')
l[:2]
m=l[:2]
[a for a in l if not a in m]
[a for a in l if  a in m]
left=[line.strip() for line in open(file) if  line.strip() not in ['sql_', '.bhistory', 'left.txt'] ]
left=[line.strip() for line in open(file) if  line.strip() ]
left[0]
'b' in left[0]
'.b' in left[0]
'.c' in left[0]
'.c' not in left[0]
'.bhistory' not in left[0]
[a for a in left if not '.b' in a]
c=['a','b','c']
[a for a in left if not a in c]
'a' in c
c in 'bbb'
left=[line.strip() for line in open(file) if  line.strip() not in [x for x in['sql_', '.bhistory', 'left.txt']] ]
a='The lady doth protest too much, methinks'.split(' ')
b=a[:2]
a,b
[x for x in a]
[x for x in a if not x in b]
a[0]=' '+a[0]
[x for x in a if str.find('a')]
[x for x in a if x.find('a')]
[x for x in a if x.find('x')]
's'.find('x')
[x for x in a if x.find('x')>0]
[x for x in a if x.find('a')>0]
for a in x:
for x in a:
pa='The lady doth protest too much, methinks'.split(' ')
pb=['too', 'doth']
pa
pa='The lady doth protest too much methinks'.split(' ')
for a in pa:
    if a in pb:
    if not a in pb:
pa[1] in [a for a in pb]
pb
't' in [a for a in pb]
'too' in [a for a in pb]
'to' in [a for a in pb]
l1 = ['A', 'B', 'C', 'D', 'A', 'A', 'C']
s = 'A'
matched_indexes = []
i = 0
length = len(l1)
while i < length:
    if s in l1[i]:
        matched_indexes.append(i)
    i += 1
print(f'{s} is present in {l1} at indexes {matched_indexes}')
re.findall('a','ax')
re.findall('s','ax')
[a for a in pa if re.findall('s',a)]
[a for a in pa if re.findall('sest',a)]
[a for a in pa if re.findall('test',a)]
[a for a in pa if re.findall('st',a)]
    for y in pb:
        if re.findall(y,a):
            print(a)
        if not re.findall(y,a):
text = "Hello, codedamn coders! Welcome to codedamn community!"
new_text = re.sub("co.d.mn", "CODEDAMN", text)
print(new_text)
            print(f'word {a}')
not re.findall('a','ax')
        print(f'{a} {y}')
            pass
        print(f'pb loop {a} {y}')
pa,pb
    breakpoint()
adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]
for x in adj:
  for y in fruits:
    print(x, y)
    if y=='apple':
        print(x, y)
    if re.findall(y, 'apple'):
fruits = ["red", "apple", "banana", "cherry"]
    for y in fruits:
        if re.findall(y, 'apple'):
            print(x, y)
        if re.findall(y, x):
adj
fruits
        if not re.findall(y, x):
if not re.findall('j','tim'):
    print('t')
if not re.findall('t','tim'):
my_list = ["yes", "yes", "no", "yes", "no", "yes"]
logical = [item=='yes' for item in my_list]
logical
my_list = ["yes", "yes", "no", "yes", "no", "yes", "maybe"]
re.findall('t','ax')
re.findall('t','ax')=[]
re.findall('t','ax')==[]
re.findall('t','ax')!=[]
re.findall('a','ax')!=[]
        if not re.findall(y, x)!=[]:
        if re.findall(y, x)!=[]:
moN={'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
    #   not in [x for x in['sql_', '.bhistory', 'left.txt']] ]
    return str(moN[x.split(' ')[1]]) + str(x.split(' ')[2]) + str(x.split(' ')[3]) 
[a for a in st]
[a for a in st if 'bhistory' not in a]
[a for a in st if 'left' not in a]
def myex(x):
    ex=['bhistory', 'left.py']
    if x in x:
myex('left.py')
myex('looking left.py is ')
myex('looking lefty.py is ')
myex('looking  is ')
    if x in ex:
myex('c left.py')
'l' in 'cdeflg'
myex('.bhistory')
myex('bhistory')
ex
ex=['bhistory', 'left.py']
' '.join(ex)
'.bhis' in ' '.join(ex)
'bhis' in ' '.join(ex)
'history' in ' '.join(ex)
'historyd' in ' '.join(ex)
'bhistory' in ' '.join(ex)
'c:\bhistory' in ' '.join(ex)
ex=['.bhistory', 'left.py']
ex[0]
ex[0] in st [0]
ex[0] in st [1]
ex[1] in st [1]
ex[1]
ex=['.bhistory', 'left.txt']
    ex=['.bhistory', 'left.txt']
[myex(a) for a in st]
    ex=' '.join(['.bhistory', 'left.txt'])
st=st[:4]
ex=' '.join(['.bhistory', 'left.txt'])
'.bhis' in ex
myex('bbhistory')
    for y in ex:
        if y in x:
myex(st[0])
    #filter files out
[a for a in st if myex(a)]
[a for a in st if not myex(a)]
folder='/mnt/c/you/newMix'
foler
folder
folder='/mnt/c/you/'
open('allsongs','w', encoding='utf-8').write('/n'.join(files))
pwd
open('allsongs','w', encoding='utf-8').write('\n'.join(files))
    linest[1]=f'vlc -Z c:\you\{fn}.m3u'
scriptLine=f'vlc -Z c:\you\{fn}.m3u'
scriptLine
with open(psScript,'w') as myaut:
    myaut.write(scriptLine)
files[:100]
print('creates random m3u file in /you directory\nand updates all\ps\son.ps1 to play it')
print('\nCreates random m3u file in /you directory\nand updates all\ps\son.ps1 to play it')
mnt/c/projects/pillow()
import os, sys
infile='pill.png'
with Image.open(infile) as im:
    im.save('pill.jpg')
    im.convert('RGB')
    nim=im.convert('RGB')
    nim.save('pill.jpg')
size = (128, 128)
i=Image.open('pill.jpg')
im=Image.open('pill.jpg')
im.thumbnail(size)
im.save('xx', "JPEG")
myfile=[line.strip() for line in open("jpgs")]
import urllib.request
myfile=[line.strip() for line in open('jpgs')]
def download_image(url, file_path, file_name):
    full_path = file_path + file_name + '.jpg'
    urllib.urlretrieve(url, full_path)
url=myfile[1]
download_image(url, '.', 'url.jpg')
Fs = 8000
f = 5
sample = 8000
x = np.arange(sample)
y = np.sin(2 * np.pi * f * x / Fs)
plt.plot(x, y)
plt.xlabel('sample(n)')
plt.ylabel('voltage(V)')
plt.show()
sample = 9000
Fs = 9000
Fs = 10000
sample = 10000
[a.name for a in os.scandir('.') 'png' in a.name]
    return f'<div class="grid-item"><img src="{x}" alt=""> <p>girlPart1</p></div>'
[img(a.name) for a in os.scandir('.') if 'png' in a.name]
    return f'<div class="grid-item"><img src="{x}" alt=""> <p>{x}</p></div>'
a=[img(a.name) for a in os.scandir('.') if 'png' in a.name]
cps('\n'.join(a))
print('my first')
s='''origin	git@github.com:JamesSteffes/jamessteffes.github.io.git (push)'''
s.split('@')
s.split('@').split(':')
s.split('@').split(':',1)
s.split('@',1)
s.split('@')[1]
s.split('@')[1].split(' ')
s.split('@')[1].split(' ',0)
s.split('@')[1].split(' ')[1]
s.split('@')[1].split(' ')[0]
s.split('@')[1].split(' ')[0].replace('github.com:','https://github')
s.split('@')[1].split(' ')[0].replace('github.com:','https://github.com/')
    print(5 / 0)
except ZeroDivisionError:
    print("You can't divide by zero!")
cps(s)
import camelot
[a for a in os.scandir('.') ]
[a.name for a in os.scandir('.') ]
tables=camelot.read_pdf('bridges.pdf')
tables.export('foo.csv', f='csv', compress=True)
tables.export('foo.csv', f='csv', compress=False)
tables[0].parsing_report
tables[0].to_csv('foo.csv')
tables=camelot.read_pdf('bridges.pdf', pages='all')
tables=camelot.read_pdf('bridges.pdf', pages='1,2,3')
df = pd.read_csv('allfiles.csv')
print(df.loc[[0, 1]])
df.shape
data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
#load data into a DataFrame object:
df = pd.DataFrame(data)
print(df) 
print(df.loc[0])
pd.set_option('max_columns', 50)
pd.set_option('max_rows', 100)
pd.set_option('display.expand_frame_repr', True)
df = pd.read_csv(sales2.csv, index_col='month')
df = pd.read_csv('sales2.csv', index_col='month')
df=pd.read_csv('sales.csv', index_col='month')
df.iloc[4, 2]
df.iloc[4, 1]
df.iloc[2, 2]
df_new = df[['salt','eggs']]
df_new
df.head()
vals_sr = pd.Series(["Val_1", "Val_2", "Val_3", "Val_4", "Val_5"]) 
print(vals_sr) 
import pandas as pd 
vals_sr = pd.Series(["Val_1", "Val_2", "Val_3", "Val_4", "Val_5"], index=["A", "B", "C", "D", "E"]) 
ct_data = { 
'client_id': ['C34P', 'C35S', 'C35P', 'C97S', 'C58S'], 
'card_transactions': [11, 244, 31, 458, 63] 
} 
client_transaction_df = pd.DataFrame(ct_data) 
print(client_transaction_df) 
'count': [11, 244, 31, 458, 63] 
df = pd.DataFrame(ct_data) 
print(df['client_id'])
print(df.iloc[0])
df.sort_values('count')
df.columns
df.columns.tolist
df.columns.tolist()
col=df.columns.tolist()
col
df[cl[1]]
df[col[1]]
[a for a in df[col[1]]]
print([a for a in df[col[1]]])
df[col[1], col[5]]
col[1]
col[5]
df['Phone']
df[['Phone','City']]
dd=df[['Phone','City']]
df = pd.DataFrame(np.random.rand(1000, 50), columns=[f'col_{i}' for i in range(50)])
import np
pd.options.display.max_columns = None
print(df.columns)
df.info
df.info()
os.chdir('pandas')
os.chdir('panda')
print(df.info())
open('myaut','w') as myaut
mya=open('myaut','w')
print(df.info(),file=myaut)
print(df.info(),file=mya)
mya.close()
    print(df.info(), file=f)
n=df.info()
print(n)
pd.DataFrame(df.dtypes)
m=pd.DataFrame(df.dtypes)
print(m)
buffer
[a for a in buffer]
buffer = io.StringIO()
open('xx', 'w', encoding='utf-8').write(s)
df.dtypes
print(df.dtypes)
df.info(buf=buffer)
open('buf','w').write(s)
import panda as pd
df2 = pd.read_csv('/mnt/c/projects/jup/pds/countries of the world.txt')
df2
jim='steffes'
print(jim)
j='jojo'
print(j)
