print("saturday morning")
import my
len(f)
len(f)
from datetime import datetime
some_date = datetime(2021, 12, 9, 12, 12, 23)
some_date
print(some_date.strftime('%c'))
now = datetime.now()
now
formatted_datetime_now = f"{now:%d-%B-%Y}"
print(formatted_datetime_now)
data
data
for a in data:
    print(a)
    
data[1]
type(data)
a=next(data)
a=next(data)
next(data)
type(data)
dir(data)
data.__next__
for a in data:
    print(a)
    
data
for a in data:
    print(a)
    
len(data)
data
for a in data:
    print(a)
    
for a in data:
    print(a)
    
square_list = [n** 2 for n in range(5)]
square_list
square_list
square_list
square_list[1]
square_generator = (n** 2 for n in range(5))
square_generator
for a in square_generator:
    print(a)
    
for a in square_generator:
    print(a)
    
square_generator = (n** 2 for n in range(5))
list(square_generator)
list(square_generator)
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
a=list(square_generator)
a
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
exi
k
files
col_print(k)
col_print(files)
k
col_print(k)
type(k)
files
f1
data
m=list(data)
m
from my import *
col_print(m)
for a in m:
    print(a)
    
datal
datal[1]
time
time
time.year
type(type)
type(time)
time(time)
time(time)
time(12)
time.ctime(time=(os.stat(datal[1]).st_atime))
myTime(m[1])
myTime(m[1])
myTime(m[1])
m[1]
print(m[1],myTime(m[1]))
print(m[1],myTime(m[1]))
n
col_print(n)
g=[]
g.append([2,3])
g
g.append([2,3])
g
g.append(['tome',3])
g
n[1]
col_print(n)
n[1][1]
n
n[5]
for x in n:
    print(x)
    
for x in n:
    print(x[0])
    
cp=col_print
cp(m)
m
n
list(n)
cp(list(n))
v=list(n)
v
m
cp(m)
v=list(str(n))
v
v=list(list(n))
v
dir_name=r'.'
data = (os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
d=list(data)
d
data
data.next
data
d
[x for x in d not 'x' in x]
data
data
dir(data)
for n in data: print(n)
for n in data: print(n)
data
[x for x in data if not 'x' in x]
['j' +x for x in data if not 'x' in x]
'jim'.replace('i','x')
'\\'.replace('\\','/')
[x.replace('\\', '/') for x in data if not 'x' in x]
datal
with open(datal[1]) as f:
print(f)
with open(datal[1]) as f:
    print(f)
    
datal
sorted(datal)
datal
m
n = []
n
datal
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],8)
lnl(datal[1],8)
lnl(datal[1],18)
data[0:2]
datal[0:2]
lnl(datal[1],18)
lnl(datal[1])
list(lnl(datal[1]))
lnl(datal[1])
fname
data
datafiles=[x.replace('\\', '/') for x in data if 'x' in x]
datafiles
mn=[x.replace('\\', '/') for x in data if 'x' in x]
mn
mn[1]
lnl(mn[1])
lnl(mn[0])
files = glob.glob("*.py")
import glob
t=[]
t.append("*"*3)
t
t.append(f"*"*3)
t
t
t
t
files[1]
lnl(files[1])
a
lnl(files[1])
ab
ab=[]
lnl(files[1])
lnl(files[1])
t
t
k='jim \n"
k='jim \n'
k.strip()
k
t
t[1]
t.join("")
type(t)
str(t)
t
t
t
lof
lof
import my
cl('jim')
my.cl('jim')
dir(my)
import my
dir(my)
import my
dir(my)
cl("jim")
my.cl("jim")
dir(my)
import glob
t
files
my.cl(files)
lof
lof
with open(lof[4], 'r') as f:
    for line in f.readlines():
        print(line)
        
lof
lof
for count, value in enumerate(lof):
    print(count, value)
    
lofg = (filter(os.path.isfile, glob.glob(dir_name + "/**/*", recursive=True)))
type(lofg)
next(lofg)
next(lofg)
len(lofg)
dir(lofg)
logf.__sizeof__
lofg.__sizeof__
lofg.__sizeof__()
data
ax=list(sorted(data))
ax
type(data)
type(data)
data
n=['a','x','b']
sorted(n)
n
type(data)
type(data[1])
sorted(data)
data[1]
data[1][1]
type(data[1][1])
type.ctime(data[1][1])
time.ctime(data[1][1])
time.ctime(data[1][1]).format('%a')
time.ctime(data[1][1]).format('%x')
time.ctime(data[1][1]).strftime("%a %m %y")
now
type(now)
now.strftime("%a %m %y")
time.ctime(cdate)
f"{now:%d-%B-%Y}"
f"{time.ctime(cdate):%d-%B-%Y}"
time.ctime(cdate)
type(cdate)
type(time.ctime(cdate))
data[1]
data[1][3]
data[1][2]
lat(data[1][2])
import stat
lat(data[1][2])
time.ctime(lat(data[1][2]))
time.ctime(lat(data[1][2])).strftime("%a %m %y")
modTimeInSeconds
modTime
type(modTimeInSeconds)
time.ctime(modTimeInSeconds)
cdate
modet
print(modet)
modet
modet
time
time.ctime(cdate)
type(time.ctime(cdate))
int(time.ctime(cdate))
a=time.ctime(cdate)
a
type(a)
int(a)
type(modTimeInSeconds)
int(modTimeInSeconds)
cdate
cdate
str(cdate)
str(cdate).strftime('%d/%m/%Y')
type(modTimeInSeconds)
float(cdate)
float(cdate).strftime('%d/%m/%Y')
a=time.ctime(cdate)
a
l
v
v.json
v.json()
r
r.text
r.html
r.json()
import my
cl(r.json())
my.cl(r.json())
f=r.json()
f
len(f)
str(f)
list(r.json())
today = datetime.date.today()
today
type(o)
o
i=100*100
i
f"{i:_d}"
f"{o:_d}"
o
type(i)
o=int(o)
f"{o:_d}"
f"{o:%m}"
f"{o:%x}"
now
n=datetime.now()
from datetime import datetime
n=datetime.now()
n
int(n)
print(f'{now:%Y-%m-%d %H:%M}')
print(f'{n:%Y-%m-%d %H:%M}')
now
n
n+1
o
o +a
o +1
dti = datetime.datetime.fromtimestamp(o)
import datetime  
dti = datetime.datetime.fromtimestamp(o)
dti
dti = datetime.datetime.fromtimestamp(o)
dtis = dti.strftime( "%Y - %m - %d  %H : %M : %S")  
dtis
dti.strftime( "%x")  
cti(o)
cdate
cdate
cti(cdate)
cti(cdate)
print('G','F', sep='\t', end='')
data
data
from tabulate import tabulate
print(tabulate(data))
a=[]
a.append(data)
a
print(tabulate(a))
a=[]
for n in data:
    a.append(n)
    
n
data
for a in data:
    print(a)
    
n=[]
for a in data:
    print(a)
    n.append(a)
    
n
for a in data:
    print(a)
    n.append([a])
    
    
n
n=[]
for a in data:
    print(a)
    n.append([a])
    
    
n
print(tabulate(a))
print(tabulate(n))
"jim".split('')
"jim".split()
"jim steffes".split()
lt
data
data[1].split('#')
data[1].split('#').join()
data[:5]
data[2:5]
enumerate(data[2:5])
for f in enumerate(data[2:5]):
    print(f)
    
"jim".split()
data
data[1].split(" ")
''.join(data[1].split(" "))
' '.join(data[1].split(" "))
data[1].split(" ")
' '.join(data[1].split(" "))
list='shoat
tubal
eclat
olam
stat
gnar
babai
scoad
type(list)
list.split('\n')
list
' '.join(list)
list2
list
mlist
mlist = sorted(list, key=lambda x: x[-2])
list
list
mlist
mlist
list
mlist
data
list2
' '.split(list2)
list2
list2.split(' ')
' '.join(list2.split(' '))
'aaaa'.replace('a','b')
j='aaaaa'
j.replace('a','x')
j
j[1]
data[1]
data[1].split(' ')
data[1].split(' ')[3]
a=re'\n'
k='''I have a list of words where I want to sort based on their last (2,3) letters. In other words if we say (Sort by Words ending with)'''
k
k.split()
k.split()[8]
w
' '.join(w)
w
sort(w)
mlist
mlist
h
h=(w, lambda x: x[-1:])
w
h
data
data.split(' - ')
data
str(data)
len(str(data))
data[1]
data[1][6]
n=[]
for t in data:
    n.append(t.split(' '))
    
n
for a in n:
    print(a[3])
    
n
n[1][1]
data
n
n.sort(key=lambda x: x[0])
n
n.sort(key=lambda x: x[1][8])
n
n.sort(key=lambda x: x[1][2])
n
for a in n:
    print(a[1][2])
    
for a in n:
    print(a[1][1])
    
    
n
j=[2, 3, 7, 43, 13, 139, 3263443]
len(j)
sum(j)
for a in range(len(j)):
    print(a)
    
for a in range(len(j)):
    print(j[a])
    
    
for a in range(len(j)-1):
    print(j[a]*j[a+1])
    
    
for a in range(len(j)-1):
    print(f"j[a]*j[a+1]")
    
    
    
j
import numpy
numpy.prod(j)
j
aa=numpy.prod(j)
aa
multiplyList(j)
factors=[]
factors
multiplyList(j)
factors(multiplyList(j))
kk=multiplyList(j)
factor(kk)
factor=[]
factor(kk)
num=multiplyList(j)
import sys
a = range(1,1000)
print(a)
for b in a:
    print(b)
    
b=xrange(1,100)
x = xrange(1,10000)
import pydoc
pydoc.pager("SOME_VERY_LONG_TEXT") 
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
data
list(data)
list(data)
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data + data
t=data+data
t
pydoc.pager(t)
t
pydoc.pager(str(t))
len(t)
t=t+t
t
len(t)
t=t+t
t=t+t
len(t)
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t
len(t)
subprocess.call(['dir'+longStr+'" | more'], shell=True)
longStr
datetime.now()
from datetime import datetime
datetime.now()
today=datetime.now()
today.strftime("%H")
today.strftime("%Y")
dir(datetime)
a=dir(datetime)
a
data
data[1].find('.')
data[1].find('t')
data[1].find('\.')
data[1].findall('\.')
d
import re
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
print((re.split(r'\s','we are splitting the words')))
print((re.split(r's','split the words')))
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
r1
r1 = re.findall(r"^\w+", data[1])
r1
data[1]
data[3]
data
os.chdir(r'c:\you')
next(os.walk('.'))[1]
next(os.walk('.'))[1]
a=next(os.walk('.'))[1]
a
b=[e for e in a]
b
e
a[1]
a[1].match('car')
a[1].index('car')
a[1].index('a')
a[1].index('r')
a[1].index('r')
a=whos
a
a
a
z
l=range(0,5)
l
for a in l:
    print(a)
    
l=list(range(0,5))
'car'.find('c')
'car'.find('car')
b=[e for e in a if 'w' in e]
a
a=next(os.walk('.'))[1]
b=[e for e in a if 'w' in e]
b
b=[e for e in a if 'wy' in e]
b
b=[e for e in a if  re.search(r"w",e)]
b
a
b=[e for e in a if  re.search(r"p.*y",e)]
b
os.chdir('/docker')
os.chdir('docker')
os.listdir()
os.listdir('..')
os.listdir()
os.listdir()[1]
sys.modules.keys()
c=sys.modules.keys()
c
col_print(c)
type(c)
list(c)
list(sys.modules.keys())
dir()
dir(col_print)
col_print(dir())
col_print("jim")
help(col_print)
col_print(str("jim"))
col_print(str(dir()))
col_print(str(dir()))
import my
col_print(str(dir()))
help(col_print)
import my
col_print(str(dir()))
dir(col_print)
for a in dir(print):
    print(a)
    
a
a=str(dir())
a
a.split(())
list(a)
a=str(dir())
type(a)
a.split(())
a.split()
b=list(a.split())
b=a.split()
type(b)
len(b)
b[1]
n=[]
for g in b:
    n.append(g)
    
g
b
g[1]
g[6]
for g in b:
    n.append(g)
    
b
len(b)
for t in b:
    g.append(t)
    
n=[]
for t in b:
    n.append(t)
    
n
dir(os)
for a in dir(os):
    print(a)
    
b=dir(os)
b
out
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
out = [l[i: i+4] for i in range(0, len(l), 4)]
out = [l[i: i+1] for i in range(0, len(l), 4)]
out
out = [b[i: i+1] for i in range(0, len(b), 4)]
out
col_print(b)
help(os.cpu_count)
os.cpu_count()
col_print(b)
b=dir(os)
b=dir(os)
col_print(b)
b
dir()
os.chdir(r'\you\docker')
os.listdir()
os.listdir()[1]
import re
str1
fi=os.listdir()
fi
int(8)
int(j8)
int('j8')
fi
numlists = ["5","50","7","51","87","97","53"]
sorted(numlists)
numlists
results
sorted(results)
list(map(int,results))
list(map(str,results))
list(map(int*3,results))
list(map(a*3,results))
results
list(map(lambda a: a*3,results))
list(map(lambda a: a*30,results))
fi
matchObj
matchObj = re.match( r'dogs', line )
matchObj
line
re.match( r'dogs', line )
re.match( r'd', line )
re.search( r'd', line )
re.search( r'x', line )
a
fi
fi
fi[1]
fi.sort(key=lambda f: int(re.sub('\D', '', f)))
fi
fi[::-1]
for p in fi[::-1]:
    print(p)
    
fi
f1[1].replace('a','x')
fi[1].replace('a','x')
f1[1]
fi
re.sub('.*', 'xxx', fi[1])
fi[1]
re.sub('\D.*', 'xxx', fi[1])
re.sub('\D', 'xxx', fi[1])
re.sub(r'\D', 'xxx', fi[1])
re.sub(r'\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1],1)
re.sub(r'\s', '_', fi[1],1)
re.sub(r'\s', '_', fi[1])
re.sub(r'.*', '_', fi[1])
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility
import re
regex = r"[\s\S]*?(?=Course)"
test_str = "Docker Crash Course #2 - Installing Docker.mp4"
subst = "New "
# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)
if result:
        print (result)
        
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
:x
import fil
dir()
dir(fil)
dir(fil.os)
d=dir(fil.os)
d
print(d)
dir()
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
dir()
dir(os)
os.terminal_size()
dir_path=(r'c:\you\docker')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
data[0]
Path('new').touch
import touch
import touch
from touch import touch
import touch
test_str
import re
fi
f
fi
for x in fi:
    touch.touch(x)
    
fi
for x in fi:
    print(x)
    touch.touch(x)
    
for x in fi:
    time.sleep(1)
    print(x)
    touch.touch(x)
    
fi[1]
clipboard.copy(str(fi[1]))
clipboard.copy(str(fi[1]))
x
regex = r".*(?=Course ).*#"
subst = ""
result = re.sub(regex, subst, x, 0, re.MULTILINE)
result
result.replace(' ', '_')
result=result.replace(' ', '_')
result
result.replace('-_','')
data
fi
EXIT
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
f
data.sort(key=lambda f: int(re.sub('\D', '', f)))
data
len(data)
data.remove(14)
data
enumerate(data)
for f in enumerate(data):    print(f)
data.remove(13)
dat
data
data[13]
data.remove('xxx')
data
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
mk='''I understand why Sublime doesn’t have this sorting option.'''.split()
mk
re.findall(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'ick them')
re.search(pattern, 'ick them')==True
if re.search(pattern, 'sick them'):
        print('yes')
        
if re.search(pattern, 'ick them'):
        print('yes')
        
re.search(pattern, 'ick them')==None
re.search(pattern, 'sick them')==None
pattern
re.search(data[0],'#')
data[0]
re.search(data[0],'is')
re.search('this','is')
re.search('#', data[0])
pattern='#'
dataf = filter(lambda x: re.search(pattern,x),data)
dataf
list(dataf)
for ff in filter(lambda x: re.search(pattern,x),data):
        print(ff)
        
data[0]
os.path.exists(data[0])
pattern = "^Dock"
import shutil
os.path.exists(data[0])
a
f
print(f"ok {ff}")
lens("jim")
lens("jim")
lens({"a"})
lens({a:2})
lens({"a":2})
min[-4,4,8]
min(-4,4,8)
st
def two(st):
        if len(st) > 2 and st[0] == st[len(st)-1]:
                    return "yes"
                        else:
                                    return "no"
two("jim")
two("mim")
two("im")
two('a')
two('aaa')
two(123)
two(12)
type("jim")
two(12)
[1,4].count(1)
[1,4,"a"].count("a")
[1,4].count("a")
lens(b)
lens(b)
data
type(data)
data
len(data)
data[1]
dir(data)
data.keys
data.keys()
dir()
import re
dir
dir()
a=dir()
a
col_print(a)
import tabulate as tabulate
dir_path = r"c:\you\docker\ch"
os.chdir(dir_path)
data = os.listdir(dir_path)
data
print(tabulate(data))
x=[("a",1)]
print(tabulate(x))
import tabulate as tabulate
print(tabulate(x))
dir(tabulate)
print(tabulate.tabulate(x))
print(tabulate.tabulate(data))
type(a)
a
x
type(x[1])
type(x[0])
data
tuples=[tuple(x) for x in data]
tuples
m=[]
for a in data:
    m.append(tuple(m))
    
m
type(data)
for a in data:
    print(a)
    
tuple(data)
print(tabulate.tabulate(tuple(data)))
data
m=[]
for g in data:
    m.append(g)
    
m
m=[]
for g in data:
    m.append([g])
    
    
m
print(tabulate.tabulate(m))
print(tabulate.tabulate(m))
m=[]
print(tabulate.tabulate(m))
data = os.listdir([dir_path, "January"])
data = [os.listdir(dir_path)]
data
data = os.listdir(dir_path)
data
data = ((os.stat(path), path) for path in data)
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
print(tabulate.tabulate(data))
data
data = list(((os.stat(path), path) for path in data))
data
((os.stat(path), path) for path in data)
((os.stat(path), path) for path in data)
list(((os.stat(path), path) for path in data))
((os.stat(path), path) for path in data)
print(((os.stat(path), path) for path in data))
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
for a in data:
        print(a)
        
data
data
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
print(tabulate.tabulate(data))
kk
print(tabulate.tabulate(kk))
kk
print(tabulate.tabulate(kk))
j=[[1],[1]]
print(tabulate.tabulate(j))
b
tuple(b)
c=3
d=[b[i:i+c] for i in range(0, len(b),c)]
d
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
5+4
_
_ +1
diff
diff.split('\n')
a='ppython'
a.split()
a.split(())
for s in a:
    print(s)
    
[x for x in a]
a.count('p')
set([x for x in a])
for a in set([x for x in a]):
    print(a)
    
for t in set([x for x in a]):
    print(t)
    
a='ppython'
for t in set([x for x in a]):
    print(t)
    
for t in set([x for x in a]):    print(t, a.count(t))
a
a='ppython'
for t in set([x for x in a]):    print(t, a.count(t))
a
set([x for x in a]).sort()
[1,3,1,8].sort()
dir(list)
[1,3,1,8].sort
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
cars = ['Ford', 'BMW', 'Volvo']
cars = ['Ford', 'BMW', 'Volvo'].sort()
cars
cars = ['Ford', 'BMW', 'Volvo']
cars.sort()
cars
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
ab
sorted(ab)
rl
rl
rl
x=sorted(w.split())
x
set(x)
x
sorted(x)
x
sorted(x)
import pydoc
pydoc.pager(x)
pydoc.pager(str(x))
print(x)
print(dir())
glob.glob('*.*')
sorted(glob.glob('*.*'))
import glob as glob
glob('*.*')
glob.glob('*.*')
fn(100000)
fn(100000000000000)


dir(__builitins__)
print(dir())
dir(_1)
type(_1)
print(dir())
dir(__builtins__)
print(dir(__builtins__))
dir(bin)
print(dir(__builtins__))
t
tl
import tabulate
print(tabulate.tabulate(tl))
tl
print("\t\tjim")
import datetime
tl
int("1"0)
int("1")
tl
tls
print(tabulate.tabulate(tls))
tls
tls
print(tabulate.tabulate(tls))
tl
tls
tls[3]
tls[3][2]
type(tls[3][2])
type(tls[3][:2])
tls[3][:2]
a=[10000,2000]
sorted(a)
int(1,200)
int(1)
tl
li
stn('88')
stn(fn('88'))
fn(1000000000000)
type(fn(10000000000))
a=123
b=str(a)
b
[char for char in b]
set("jimmm")
tuple("jimmm")
tuple("a")==tuple("a")
tuple("a")==set("a")
tuple("a")==tuple(set("a"))
def eq(n):
        return tuple(n)==tuple(set(n))
        
def eq(n,o):
        return tuple(n)==tuple(set(o))
        
eq(1,2)
set(a)
a
set(1,3)
set((1,3))
list(1)
list("jim")
list(1,23)
list(str(123))
eq(2,88)
set(tuple(1,3))
type(str(1,3,4))
str(34)
eq(1)
eq(8)
eq(888)
eq(8)
eq(899)
eq(888)
eq(888)
eq(8)
eq(891234)
eq(82)
eq(86)
eq(88)
eq(867)
eq(8)
eq(89)
set(1,3)
set([1,3])
set([1,3])==set([3,1])
eq(8)
eq(8)
eq(89234)
eq(892348)
eq("a")
eq("aa")
eq("ab")
len(888)
1+=1
chars
len(chars)
fact(8)
fact(8)
fact(8)
fact(8)
fact(8)
a=dir()
a
print(a)
print(a)
dir(quit)
print(a)
z=fact(8)
z
answer
def fac(n):
           return 1 if (n==0) else "not one"
           
fac(2)
fac(0)
fib(0)
fib(20)
fib(8)
fib(9)
fib(20)
fib(1)
fib(2)
fib(3)
fib(4)
fib(5)
fib(6)
fib(0)
fib(1)
fib(5)
fib(8)
for a in range(0,20):
        print(fib(a))
        
fnc
def fnc(n):
        return "{:,}".format(n)
        
dir(fnc)
print(dir(fnc))
import inspect
import tabulate
len(tab)
type(tab)
t='''When Buying the Dip Doesn’t Work: An Analysis of the Dot-com Crash'''.split()
t
[v.upper() for v in t]
[v.upper() + "  " for v in t]
[v[1] + "  " for v in t]
[v[0].upper() + "  " for v in t]
sorted(t)
sorted(t, key=t[2])
t
tab
import os
d=dir(os)
print(d)
type(d)
[x for x in d]
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
[x for x in d if d[0]!='_']
os.terminal_size()
os.terminal_size
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
fh('os')
u
fh('os')
u
fh('os')
fd
dir()
fh('sys')
fh('os')
fh('os')
fh('sys')
fh('tabulate')
dir(sys)
d='sys'
dir(d)
d
d=r'sys'
dir(d)
d
dir(sys)
dir(d)
dir(d)
dir(sys)
d
d
print(dir(d))
type(d)
d=[1,2]
print(dir(d))
vars(list).keys()
vars(sys.keys())
sys
u=dir(sys)
u
print(u)
k=sys
u=dir(k)
print(u)
r=range(10,20)
r
r=list(range(10,20))
r
d=dir()
dir(repr(d))
dir()
repr(d)
d
d
vars(d)
repr(dir())
k=repr(dir(os))
k
help('modules')
k="os"
dir(k)
type(k)
dir(repr(k))
k='''os'''
dir(k)
type(k)
dir(f"{k}")
k
k=r"os"
k
id(k)
a
a=os
dir(a)
type(os)
type(a)
fh(os)
fh(a)
u = dir(os)
print([x for x in u if u[0] != "_"])
u
u[0]
u[10]
u[10][0]
for a in enumerate(u):
    print(a)
    
for a in enumerate(u):
    print(a[1])
    
    
for a in enumerate(u):
    print(a[1][0])
    
    
    
"jim"[0]
u
print(u)
for g in u:
    print(u[0])
    
os[1]
for f in os:
    print(f)
    
dir(os)
fh(os)
help(os.path)
sys.version_info
import
import sys
sys.version_info
dir()
dir
dir()
a=dir()
[x for x in a]
[x for x in a x[0]!='_']
[x for x in a a[0]!='_']
[x for x in a x[0] =='_']
[x for x in a if x[0] =='_']
[x for x in a if x[0] !=='_']
[x for x in a if x[0] !='_']
a=dir(os)
a=dir(sys)
[x for x in a if x[0] !='_']
os.winver
sys.winver
print([x for x in a if x[0] !='_'])
dir
dir()
import os
dir()
print(dir)
print(dir())
import my
dir(my)
print(dir())
def d:
    print(dir())
dir(my)
dir(my.cl)
def dd():
    print(dir())
dd
dd()
print(dir())
dir(pasted_block)
dir(pasted_block)
dir(os)
import os
dir()
help(os)
os.chdir(python)
os.chdir('python')
today
print(today)
import tabulate
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([[f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"]])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
tar
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}","nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f"create date: {cti(cdate)} access date: {cti(adate)}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
rom tabulate import tabulate
table = [[‘Aman’, 23], [‘Neha’, 25], [‘Lata’, 27]]
print(tabulate(table), headers = [‘Name’, ‘Age’])
from tabulate import tabulate
table = [['Name', 'Age'], ['Aman', 23], ['Neha', 25], ['Lata', 27]]
print(tabulate(table, headers = "firstrow" ))
print(tabulate.tabulate(tar,headers=['a', 'b']))
import tabulate
print(tabulate.tabulate(tar,headers=['a', 'b']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} ",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates \t access']))
tar
string_nonASCII = " àa fuünny charactersß. "
string_encode = string_nonASCII.encode("ascii", "ignore")
string_decode = string_encode.decode()
print(string_decode)
dir()
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
import touch
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import re
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
import glob
files=glob.glob('*.*')
filex
filex
files
sorted(files, key=t[2])
sorted(files, key=files[2])
aa=list(range(0,10))
aa
import randome
import random
n=random.randint(0,20)
n
n
n
def ri():
    return random.randint(0,100)
ri()
ri()
ri()
[x for list(range(0,20) ) ]
[x for x in list(range(0,20) ) ]
[ri() for x in list(range(0,20) ) ]
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
l=[x for x in list(range(0,20) ) ]
l
l=[ri() for x in list(range(0,20) ) ]
l
sorted(l, reverse=True)
x=101
x[0]
x="jim"
x[1]
str(x)[0]
x=101
str(x)[0]
str(x)[1]
str(x)[5]
str(x)[5]
str(x)[3]
str(x)[2]
int(str(x)[2])
int(str(x)[len(x)-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
x
x=99999
int(str(x)[len(str(x))-1])
x=123489
int(str(x)[len(str(x))-1])
func = lambda x: int(str(x)[len(str(x))-1])
func(999983)
func(999983)
def ri():
    return random.randint(0,10000)
ri()
ri()
func(ri())
mm=[]
for a in range(0,20):
    mm.append(ri())
    
mm
sorted(mm)
sorted(mm, key=func)
print(sorted(mm, key=func))
mm=[]
for a in range(0,20):    mm.append([ri(), ri()])
print(mm)
sorted(mm, key=mm[1])
func2=lambda x: x[1]
sorted(mm, key=func2)
a=who
a=dir()
print(a)
[x for x in a ]
[x for x in a[0] ]
[x for x in a ]
[x[0] for x in a ]
[x for x in a if x[0] !='_']
print([x for x in a if x[0] !='_'])
def glbo():
    a=dir()
    print(a)
glbo()
print(dir())
class Shape:
    def __dir__(self):
        return ['area', 'perimeter', 'location']
s = Shape()
dir(s)
dir(s)
s.area
import re

test_list = ["Gfg34", "is67", "be3st", "f23or", "ge9eks"]

print("The original list is : " + str(test_list))

test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])

print("Strings after numerical Sort  : " + str(test_list))
test_list= glob.glob('*.*')
test_list
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
test_list
for a in test_list:
    print(a)
import touch
for a in test_list:
    print(a)
    touch.touch(a)
lt
touch.touch('9 - Images & Metadata.mp4')
touch('9 - Images & Metadata.mp4')
help(touch)
import touch

touch.touch(["info.txt", "data.txt", "apple.txt"])
import touch

touch.touch("x")
import touch

touch.touch(r"x")
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
import touch
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
data
data[0]
touch.touch(data[0])
data[0]
touch.touch(data[0])
touch(data[0])
import random
import glob
import re
import touch
import os
import sys
from pathlib import Path
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data[0]
Path(data[0]).touch()
Path('duh').touch()
os.chdir(r"c:\you\nextjs")
test_list= glob.glob('*.*')
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
for a in test_list:
    print(a)
    Path(a).touch()
import re
  
# initializing string
test_str = 'geeksforgeeks'
  
# printing original String
print("The original string is : " + str(test_str))
  
# using sub() to perform substitutions
# ord() for conversion.
res = (re.sub('.', lambda x: r'\u % 04X' % ord(x.group()), test_str))
  
# printing result 
print("The unicode converted String : " + str(res)) 
dir()
dis=lambda: print('jim')
dis
dis()
dis=lambda: print(dir())
dis
dis()
dis=lambda: print(dir(os))
dis()
dir(global)
dit=lambda: print(globals())
dit()
a=globals()
a
print(a)
[x for x in a if x[0] !='_']
a
dit
dit()
ds=[a for a in globals() if a[0]!='_']
ds
print(ds)
dir(In)
print(dir(ln))
def mm():
    ds=[a for a in globals() if a[0]!='_']
    print(ds)
mm()
help(os)
dir(os)
o=dir(os)
print(o)
mm()
dir(mm)
type(mm)
print(dir(mm))
import inspect
mm()
mm()
help(inspect)
print(dir(quit))
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a)
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.trim())
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.strip())
ce()
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name

user=User("joe smith")
dir(user)
user.name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
User.fname
dir(user)
user.fname
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
help(User)
dir(__main__)
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)

user=User("joe smith")
user.p()
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)
    def f(self):
        print(self.fname)

user=User("joe smith")
dir(user)
dir(user.name)
user.f()
u2=User("time ")
u2
user.f()
u2.f()
dit()
dir()
mm()
mm()
dir(mm)
help(pprint)
help(Class)
dir(__builtins__)
print(dir(__builtins__))
'hello'[1:3]
'222'.zfill(8)
def mySqrt(x):

    r = x
    precision = 10 ** (-10)
    
    while abs(x - r * r) > precision:
        r = (r + x / r) / 2
        
    return r
    
mySqrt(10)
mySqrt(10)*mySqrt(10)
dir()
mm()
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
m
for a in m:
    print(a)
    
m
for a in m:
    print(a)
    
g=r"this")
g=r"this"
g
g=r"\tthis"
g
g=r(dir())
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
for a in m:
    print(a)
    
for a in m:
    print(a)
m
m=p.finditer(s)
for a in m:
    print(a)
m=list(p.finditer(s))
m
len(m)
m[0]
m[0].group
m[0].group()
m[0].group()
t='''Inductive reasoning is a method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
t
p=re.compile(r'\d')
m=p.finditer(s)
m
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=''.join(s)
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=' '.join(s)
s
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\S{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
m
type(m)
' '.joint(m)
' '.join(m)
str(m)
p=re.compile(r'\w}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s
p=re.compile(r'\w')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bb')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\Bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'[s]')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[16]
s[16:20]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d+')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[128]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
sp=p.split(s)
sp
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d+')
sp=p.split(s)
s
sp
import glob
dirn=r'C:\projects\node\js\mm\public\img'
files=glob.glob(dirn)
print(files)
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(files)
files
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath.basename(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath.basename(f))    
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath(f))    
files
files[0]
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(head, tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}, {tail}")    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"touch {head}\{tail}")    
files
[os.path.split(i) for i in files]
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
fil
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
fil
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}{tail}")
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"{head}{tail}")
    # print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
file
fil
lst=list(range(1,5))
lst
lst=list(range(1,5,2))
lst
lst=list(range(1,10,2))
lst
lst=list(range(1,10,2))
b=[x*3 for x in lst]
b
lst
c=list(map(lambda x: x*40, lst))
c
n=pwd
import os
jim.replace('i', 'xxx')
'jim'.replace('i', 'xxx')
'\\\'.replace('\\','nnn')
'\\\'.replace('\\\','nnn')
'\\\'.replace('\\','')
import re

phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '\\',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, r'\\',phone_no)

print(result)
result
print(result)
[x for x in [1,2,34]]
[str(x) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]][0]
print([range(x,35) for x in [1,2,34]][0])
print(range(1,5))
for i in [range(x,35) for x in [1,2,34]][0]:
    print(i)
    
import os
import pathlib
import glob
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
files
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
y=[x for x in files]
y
y=[os.path.basename(x) for x in files]
y
y=[{os.path.basename(x)} for x in files]
y
print(\"")
print('"')
y=['"src": '+ {os.path.basename(x)} for x in files]
y=['jim' + {os.path.basename(x)} for x in files]
y=[('jim' + {os.path.basename(x)}) for x in files]
y=['jim' + str({os.path.basename(x)}) for x in files]
y
y=['jim ' + str({os.path.basename(x)}) for x in files]
y=['jim '  str({os.path.basename(x)}) for x in files]
y=['jim ' + str({os.path.basename(x)}) for x in files]
y
y=['src: "' + str({os.path.basename(x)}) for x in files]
y
y=['src":' + '"' + str({os.path.basename(x)}) for x in files]
y
y=[({os.path.basename(x)}) for x in files]
y
mm()
mm()
def cl(x):
    clipboard.copy(str(x))
mm()
y=[({os.path.basename(x)}) for x in files]
cl(y)
y=[({os.path.basename(x)}+'\n') for x in files]
y=[({os.path.basename(x)}) for x in files]
y
cl(y)
y=['"src":'+ str({os.path.basename(x)}) for x in files]
y
str(y)
y=['"src":{ " /img/'+ str({os.path.basename(x)}) for x in files]
y
y=['{"src": " /img/'+ str({os.path.basename(x)}+'"') for x in files]
y=['{"src": " /img/'+ str({os.path.basename(x)}) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"\n' for x in files]
y
cl(y)
mm()
print(f"header is {response.headers}")
h=response.headers
h
type(h)
h
for i in h:
    print(i)
    
h.Server
dir(h)
response.json()
js=response.json()
js
type(js)
h=response.headers.json()
js
js
len(js)
for a in js:
    print(a)
    
str(js)
js[1]
dir(js[1])
type(js[1])
js[1].created_at
js[1]['created_at']
for i in js:
    print(i.html_url)
    
for i in js:
    print(i)
    
js[1]['created_at']
for i in js:
    print(i['html_url'])
    
mm()
cl(y)
import my
for i in js:
    print(i['html_url'], i['updated_at'])
for i in js:
    print(f"{i['html_url']}, {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
ba=[]
for i in js:
    ba.append([f"{i['html_url']} \t {i['updated_at']}"])
ba
import tabulate
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{i['updated_at']}"])

print(tabulate.tabulate(ba))
ba
sorted(ba)
print(tabulate.tabulate(ba))
import datetime
js
cti(js[1]['created_at'])
js[1]['created_at']
type(js[1]['created_at'])
from datetime import datetime
date_string = '2021-12-31 15:37'
datetime = datetime.strptime(date_string, '%Y-%m-%d %H:%M')
print(datetime)
datetime = datetime.strptime(date_string, '%Y-%m-%d ')
print(datetime)
from datetime import date
today=date.today()
print(f"today is {today}")
today.day
today.month
type(today)
dir(today)
today.strftime("%a")
today.strftime("%a %d")
today.strftime("%a %d %M")
today.strftime("%a %d %B")
today.strftime("%a %B %d ")
today.strftime("%a %B %dth ")
today.strftime("%a %B %dth")
js[1]['created_at']
type())js[1]['created_at']
type(js[1]['created_at'])
date = datetime.datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date = datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date
def iso(d):
    return datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
iso(js[1]['created_at'])
date=iso(js[1]['created_at'])
date.strftime('%A %b %d, %Y at %H:%M GMT')
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')
date=iso(js[1]['created_at'])
data
date
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
    
js
js[1]
ba=[1]
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m/%d/%Y')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js[1]
type(js[1])
key_value ={}   
  
# Initializing the value
 key_value[2] = 56      
 key_value[1] = 2
 key_value[5] = 12
 key_value[4] = 24
 key_value[6] = 18     
 key_value[3] = 323
key_value
for i in js:
    print(i)
    
for i in js:
    print(f"{i} \n)
for i in js:
    print(f"{i} \n")
    
for i in js:
    print(f"{i} \n\n")
    
for i in js:
    print(f"{i[1]} \n\n")
    
for i in js:
    print(f"{i[created_at]} \n\n")
    
for i in js:
    print(f"{i['created_at']} \n\n")
    
js[1]
print(js[1])
len(js)
gl
for i in js[0]:
    print(i)
    
[x for x in js]
[x.['git_url'] for x in js]
[x['git_url'] for x in js]
[x+ x['git_url'] for x in js]
[x for x in js[1]]
str([x for x in js[1]])
cl(str([x for x in js[1]]))
import my
my.cl(str([x for x in js[1]]))
after:2020
[x['name'] for x in js[1]]
[x['name'] for x in js]
[x['name'] + x['description'] for x in js]
[(x['name'] , x['description')] for x in js]
sorted(js)
js
type(js)
str(js)
js[1]
sorted(js)
sorted(js.items())
sorted(js.topics())
sorted(js['watchers'])
sorted(js[1])
dict
dict[3]
for i in dict:
    print(i)
    
dict[3]
d = {'Red': 1, 'Green': 2, 'Blue': 3} 
d[1]
d['red']
d
for a in d:
    print(a)
    
d.items()
for a in d.items():
    print(a)
    
for a in d.items():
    print(type(a))
    
for a, b in d.items():
    print(a, b)
    
for a, b in d.items():
    print(a,'is', b)
    
js
js[1]
js[1]['forks']
del js[1]['forks']
js[1]
color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}
fruits = {}
fruits["apple"] = 1
fruits["mango"] = 2
fruits["banana"] = 4
fruits
'apple' in fruits
len(fruits)
js[1]
type(js)
for i in js:
    print(type(i))
    
newlist = sorted(js, key=lambda d: d['name']) 
newlist
for a in newlist:
    print(a['name'])
    
newlist
for a in newlist:
    print(a['name'])
    
for a in newlist:
    print(a['name'], a['date_created'])
    
import my
mm()
dir(my)
type(js)
len(js)
type(js[1])
j=(js[1])
j
for i in j:
    print(i)
    
enumerate(j)
list(enumerate(j))
cl(str(list(enumerate(j))))
my.cl(str(list(enumerate(j))))
for i in js:
    print(i['name'])
for i in js:
    print(i['name'], i['git_commits']))
for i in js:
    print(i['name'], i['git_commits'])
    
for i in js:
    print(i['name'], i['created_at']))
for i in js:
    print(i['name'], i['created_at'])
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m-%d-%y')
for i in js:
    print(i['name'], iso(i['created_at']))
import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
from datetime import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
for i in js:
    print(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[0]) 
newlist
newlist = sorted(s, key=lambda d: d[2])
newlist
yesterday = date.today() - timedelta(days=1)
import datetime as date
yesterday = date.today() - timedelta(days=1)
datatime.today()
datetime.today()
date=datetime
yesterday = date.today() - timedelta(days=1)
yesterday = date.today() - date.timedelta(days=1)
yesterday = date.today() - datetime.timedelta(days=1)
dir(datetime)
from datetime import timedelta
yesterday = date.today() - timedelta(days=1)
yesterday
yesterday.strftime('%A %b %d, %Y at %H:%M ')
yesterday = date.today() - timedelta(years=1)
yesterday = date.today() - timedelta(year=1)
yesterday = date.today() - timedelta(days=20)
yesterday.strftime('%A %b %d, %Y')
yesterday = date.today() - timedelta(days=1)
today = date.today()
tomorrow = date.today() + timedelta(days=1)
date_list =[today, tomorrow, yesterday]
date_list
sorted(date_list)
s
s[0][2]
datetime = datetime.strptime(s[0][2], '%Y-%m-%d ')
datetime = datetime.strptime(s[0][2], '%m-%d-%y ')
datetime.strptime('07/28/2014 18:54:55.099', '%m/%d/%Y %H:%M:%S.%f')
s[0][2]
datetime = datetime.strptime('03-02-22', '%m-%d-%y ')
datetime = datetime.strptime('3-2-22', '%m-%d-%y ')
from datetime import datetime
date_time_str = '13/03/21 06:33:13'

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y %H:%M:%S')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
date_time_str = '13/03/21 '

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y ')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
s[0][2]
type(s[0][2])
datetime.strptime(s[0][2], '%m/%d/%Y %H:%M:%S.%f')
type(s[0][2])
s[0][2]
datetime.strptime('13/03/21 ', '%m/%d/%Y')
datetime.strptime('13/03/21 ', '%m/%d/%y')
datetime.strptime('13/03/21', '%m/%d/%y')
datetime.strptime(r'13/03/21', '%m/%d/%y')
datetime.strptime('13/03/21', '%d/%m/%y')
datetime.strptime('13-03-21', '%d-%m-%y')
datetime.strptime(s[0][2], '%d-%m-%y')
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
    
s[1]
def ds(x):
    return datetime.strptime(x, '%d-%m-%y') #good
    
s[1][1]
ds(s[1][1])
def ds(x):
    return datetime.strptime(x, '%m-%d-%y') #good
    
ds(s[1][1])
s=[]
for i in js:
    s.append([i['name'], ds(iso(i['created_at'])), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[1]) 
newlist
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"], f"{ds(iso(i['updated_at']))}")

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}", f"{ds(iso(i['updated_at']))}"])
ba
nl = sorted(ba, key=lambda d: d[2]) 
nl
cp(nl)
dir(my)
my.cl(da)
my.cl(ba)
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
l=[1,4,5]

def tl(li):
    for x in li:
        a+=x 
    return a
tl(l)
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a+=x 
    return a
tl(l)
tl([9,9,9,])
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
def tc(li):
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
def tc(li):
    print(type(li))
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
a
a=3
a*=8
a
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a*=x 
    return a
tl(l)
l
tl(l)
l=[1,4,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
l=[5,5,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
max([1,4,5])
def m(y):
    return max(y)
m(l)
import random as random
n=random()
import random as random
n=random.random()
n
for in range(10)"
for i in range(10):
    print(i)
    
for i in range(10):
    print(random.random)
    
for i in range(10):
    print(random.random())
    
import random
randomlist = []
for i in range(0,5):
n = random.randint(1,30)
randomlist.append(n)
print(randomlist)
import random
randomlist = []
for i in range(0,5):
    n = random.randint(1,30)
    randomlist.append(n)
print(randomlist)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return y
mi(rnl)
rnl
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
n = random.randint(1,3000)
n
n
n
[x for x in range(20)]
[random.randint(1,3000) for x in range(20)]
hasattr(str, '__iter__')
hasattr(float, '__iter__')
hasattr(list, '__iter__')
hasattr('jim', '__iter__')
gen_exp = (x ** 2 for x in range(10) if x % 2 == 0)
gen_exp
gen_exp[1]
gen=(random.randint(1,3000) for x in range(20))
gen
for a in gen:
    print(a)
    
for a in gen:
    print(a)
    
for l in "jim":
    print(l)
    
[jim steffes]
['jim']
a=['jim']
a
print(a)
[a for a in "bill")
[a for a in "bill"]
[a for a in "bill" if a='i']
[a for a in "bill" if a=='i']
[a for a in "bill" if a>'i']
[for b in range(50)]
[b for b in range(50)]
[b for b in range(50) if b%2!=0]
[b for b in range(50) if b%3!=0]
[b for b in range(50) if b%3=0]
[b for b in range(50) if b%3==0]
matrix = [[1, 2], [3,4], [5,6], [7,8]]
[a for a in matrix]
len(matrix)
[[row[1] for row in matrix]]
[[row[2] for row in matrix]]
[[row[0] for row in matrix]]
matrix
fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True, figsize=(12,4))
sns.countplot(dice_1, ax=ax1)
sns.countplot(dice_2, ax=ax2)
import os
pipe=os.popen("dir *.md")
print (pipe.read())
import os
pipe=os.popen("dir *.*")
print (pipe.read())
os.chdir(r"c:\twit")
pipe=os.popen("exiftool -j twit0877.mp3")
print (pipe.read())
pipe=os.popen("exiftool -j twit0877.mp3")
pr=(pipe.read())
print (pipe.read())
pr
print(pr)
type(pr)
pr.split(",")
pr.replace('\n','')
pr.replace('\n','').split(',')
pr.replace('\n','').split(',')[2]
mm()
import my
mm()
prl=pr.replace('\n','').split(',')
prl
type(prl)
type(prl)[1]
prl[1]
prl[2]
import glob
for a in glob.glob('.'):
    print(a)
    
for a in glob.glob('*.*'):
    print(a)
    
[x for x in glob.glob('*.*') x]
[x for x in glob.glob('*.*')]
[x for x in glob.glob('*.*') if x.startswith('B')]
[x for x in glob.glob('*.*') if x[2]]
[x[2] for x in glob.glob('*.*') ]
'jim'.split('i')
[x.split(' ') for x in glob.glob('*.*') ]
[x.split(' '[3]) for x in glob.glob('*.*') ]
[x.split(' ')[3] for x in glob.glob('*.*') ]
[x.split(' ')[0] for x in glob.glob('*.*') ]
[x.split(' ')[2] for x in glob.glob('*.*') ]
f=glob.glob('*.*')
f
[len(a) for a in f]
[a.split(' ') for a in f]
[len(a.split(' ')) for a in f]
def p(n):
    n.split(' ')
    
[len(p(a)) for a in f]
p('th is')
def p(n):
    return n.split(' ')
    
p('th is')
[len(p(a)) for a in f]
[a[3] for a in f if p(a)>3] 
[a[3] for a in f if p(a)=3]
[a[3] for a in f if p(a)==3]
f[1]
p(f[1])
[a[3] for a in f if len(p(a))>=3]
[p(a)[3] for a in f if len(p(a))>=3]
import os
from sys import exit
from os import system, name


from mido import MidiFile
system('cls')

mid = MidiFile('let.mid', clip=True)
# mid2 = MidiFile('legend.mid', clip=True)
mm()
mid
type(mid)
for x in mid:
    print(x)
    
for x in mid[0:5]:
    print(x)
    
l=list(mid)
l[0:5}
l[0:5]
l[0:25]
len(l)
mid
mid.tracks
del mid.tracks[2]
mid.trackss
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
del mid.tracks[2]
mid.tracks
for x in list(mid.tracks):
    print(x)
    
enumerate(list(mid.tracks))
list(enumerate(mid.tracks))
del mid.tracks[3:5]
list(enumerate(mid.tracks))
del mid.tracks[1:11]
list(enumerate(mid.tracks))
mid.save('letmy.mid')
list(enumerate(mid.tracks))
#!/usr/bin/env python
"""
Create a new MIDI file with some random notes.

The file is saved to test.mid.
"""
from __future__ import division
import random
import sys
from mido import Message, MidiFile, MidiTrack, MAX_PITCHWHEEL

notes = [64, 64+7, 64+12]

outfile = MidiFile()

track = MidiTrack()
outfile.tracks.append(track)

track.append(Message('program_change', program=12))

delta = 300
ticks_per_expr = int(sys.argv[1]) if len(sys.argv) > 1 else 20
for i in range(4):
    note = random.choice(notes)
    track.append(Message('note_on', note=note, velocity=100, time=delta))
    for j in range(delta // ticks_per_expr):
        pitch = MAX_PITCHWHEEL * j * ticks_per_expr // delta
        track.append(Message('pitchwheel', pitch=pitch, time=ticks_per_expr))
    track.append(Message('note_off', note=note, velocity=100, time=0))

outfile.save('test.mid')
import subprocess
print(subprocess.run("echo Hello World", shell=True))  
import subprocess
print(subprocess.run("ex", shell=True))
import re
a="Full React Tutorial #26 - Reusing Custom Hooks.mp4"
print(re.sub('.*#', '', a))
import glob
test_list= glob.glob('*.*')
print(f'glob is {test_list}')
import glob
test_list= glob.glob('#')
print(f'glob is {test_list}')
import glob
import re
reg='#'
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file)
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', ''))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file, re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}\', \'{re.sub('.*#', '', file)}\'")
        
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\', \'{re.sub('.*#', '', file)}\'")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc=[]
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        sc.append(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc
str(sc)
for a in sc:
    print(a)
    
with open('filename.txt', 'w') as f:
    for k in sc:
        print(k, file=f)
time="12"
min="30"
t=f"{time}+{min}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
2*60
time=int("12")
min=int("30")
t=f"{time*60}+{min}"
print(t)
time=int("12")
min=int("30")
t=f"{(time*60)+ min}"
print(t)
start=int(input("start: "))
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
print(spl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0]*60))+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    despl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=(start-end)*-1
print(end)
import glob
filelist=glob.glob('*.*')
filelist
type(filelist)
import re                                  # Add the re import declaration to use regex
reg = re.compile(r'py$')                    # Compile the regex
test = list(filter(reg.search, filelist))      # Create iterator using filter, cast to list 
test
test
type(test)
test[0]
test = list(filter(reg.search, filelist))[0]
test
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
type(content)
content
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
content
filename
type(content)
for line in content:
    print(line),
with open('j.py') as f:
    content = f.readlines()
content
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    content = f.readlines()
content
content[1:4]
temp = open(filename,'r').read().splitlines()
temp
import glob
filelist=glob.glob('*.*')
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    # content = f.readlines()
    content = open(filename,'r').read().splitlines()
    
content
str(content)
content
non_empty_lines = [line for line in content if line.strip() != ""]
ne = [line for line in content if line.strip() != ""]
ne
str(ne)
for s in ne:
    print(s)
    
filelist=glob.glob('*.*')
filelist
def stx(n):
    return f'{n} is nothing'
    
stx("p")
def addition(n):
    return n + n
  
# We double all numbers using map()
numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
result = map(stx, numbers)
result
result
list(result)
def stx(n):
    return f'{n} \'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/{n}\'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/img/{n}/" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
result=['jim']
result.append['tom')
result.append['tom']
result=['jim']
type(result)
result.append['tom']
result.append('tom')
result
result += "mike"
result
result += ["mike"]
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
print(result)
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
result
join(result)
''.joint(result)
''.join(result)
'\n'.join(result)
s='\n'.join(result)
with open('out.py') as f:
    f.write(s)
    
with open('out.py',mode="wt") as f:
    f.write(s)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
with open('out.py',mode="wt") as f:    f.write(s)
import inspect
a=1
inspect(a)
a
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
    
f(2)
a=f(1)
a
a(5)
f
f()
inspect(f)
i
for a in i:
    print(a)
    
a
a(8)
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
a=f(1)
a
a(8)
x = "hello"

#if condition returns False, AssertionError is raised:
assert x == "goodbye", "x should be 'hello'"
x
assert x=="hello"
assert x=="hellos"
import glob
files = glob.glob("*.*")
for f in files:
    print(f)
files
import re
re.match("j","jim)
for f in files:
    print(re.split(r"\#",f))
    
for f in files:    print(re.split(r"\#",f))
for f in files:    print(re.split(r"\#",f)[1])
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+",xx)
print(r1)
r1
if (r1):
    print(r1)
    
if (r2):
    print(r1)
    
r1 = re.search(r"^\j","jimxx")
re=r""
r1 = re.search("jimxx")
import glob
import re
files = glob.glob("*.*")
z
print(i for i in files)
files
print(list(i for i in files))
print(list(i for i in files if re.search(r"s",i)))
import os
os.chdir(r'C:\you\memgame')
files = glob.glob("*.*")
print(list(i for i in files if re.search(r"#",i)))
for f in (list(i for i in files if re.search(r"#",i))):
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f)
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}"}
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
    print(re.split(r"\#",f)[1])
    os.rename(f,re.split(r"\#",f)[1]) 
ip = input("Ip Address: ") or "127.0.0.1"
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(dir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"s",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\d',f)[1]}")
for f in (list(i for i in files if re.search(r"\\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\\d',f)[1]}")
print(f"really show this {{")
print(f"\\")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'd',f)[1]}")
    
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
plt.plot(x,y)
plt.show()
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt 
    
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
z = np.cos(x)
plt.plot(x,y,x,z)
plt.show()
import glob

files=glob.glob('*.*')
print(files)
import glob

files=glob.glob('*.*')
print(files)


import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'c:\you\*.*'
res = glob.glob(dir_path)
print(res)
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'C:\projects\node\python'
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'.'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*p'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.py'
res = glob.glob(dir_path)
print(res)
lt
dir_path = r'c:\you\*'
res = glob.glob(dir_path)
print(res)
type(res)
import json
f=open('a.json')
data=json.load(f)
data
data['fulltile']
data[1]
type(data)
data.keys
data.keys()
data['id']
x=data.keys()
x
x[3]
x=list(data.keys())
x
[n + 'this' for n in x]
[n + 'this' for n in x]
['<div class=\"n\"' for n in x]
['<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n} </div>' for n in x]
y=[f'<div class=\"n\" {n} </div>' for n in x]
y
join(y)
import re
s="Specify where the variable comes from"
re.split(r'\s',s)
' '.join(x)
x
' '.join(y)
'\n '.join(y)
x
x
y
data['fulltitle']
lt
path_to_file/person.json
import json


with open('a.json', 'r') as f:
  data = json.load(f)
print(data)
data.keys()
print(json.dumps(data, indent = 4, sort_keys=True))
print(json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True)
s
import clip
import clipboard
s
clipboard.copy(str(s))
s[1]
s['fulltitle']
type(s)
type(data)
data['fulltitle']
import json
import clipboard
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
fulltitle
description
m=fulltitle+'.mp3'
m
import touch
'This is first line'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    pass
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    fp.write(description)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write(text)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
# dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
full=dir+'/'+fulltitle+'.mp4'
Path(y).touch
Path('y').touch
a=pwd
foo = "a\c\d" # example string with backslashes
foo
foo = r"a\c\d" # example string with backslashes
foo
foo.replace('\\', " ")
o
print(0)
print(o)
print(o)
p=o+'\a'
p
p=o+'a'
p
p=o+'x'
Path(x).touch()
o
Path(o).touch()
o
Path(o).touch()
Path('x').touch()
o
p
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
full
path(full).touch()
Path(full).touch()
os.chdir('\mnt')
os.chdir('\\mnt')
os.chdir('/mnt')
os.chdir('//mnt')
import os
os.chdir('mnt')
os.chdir('..')
os.chdir('c:\you')
os.chdir('c:\you\nn')
os.chdir('c:\you\\nn')
path('Firebase - Back to the Basics.mp4').touch()
Path('Firebase - Back to the Basics.mp4').touch()
import path
from pathlib import Path
Path('Firebase - Back to the Basics.mp4').touch()
lt
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
print(full)
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
Path(full).touch()
Path('c:\\all'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path(r'CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4').touch()
full
Path('c:\\all\\filex').touch()
full
clipboard.copy(str(full))
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
lt
import subprocess

list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
mcmd="yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 &
"
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 & '''
mcmd
import os
m='''ls -a'''
mo=os.system(m)
mo
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/watch?v=SLfhMt5OUPI -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
mo
mo
import subprocess
from pathlib import Path
import json
# import touch
import clipboard
import os
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print('finish')
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print(mcmd)
print('finish')
yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 &
import subprocess
exit_code = subprocess.call('./practice.sh')
print(exit_code)
lt
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
args = ["ping", "www.google.com"]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
args=[
    "yt-dlp",
    "https://www.youtube.com/shorts/hh5EwXkf4Z8"
]
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process
args=[ "yt-dlp", "https://www.youtube.com/shorts/hh5EwXkf4Z8" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args=[ "yt-dlp" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
import sys
result = subprocess.run([sys.executable, "-c", "print('ocean')"])
print(subprocess.run("yt-dlp", shell=True))  
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
import json

import yt_dlp
from yt_dlp.postprocessor.common import PostProcessor


class MyLogger:
    def debug(self, msg):
        # For compatability with youtube-dl, both debug and info are passed into debug
        # You can distinguish them by the prefix '[debug] '
        if msg.startswith('[debug] '):
            pass
        else:
            self.info(msg)

    def info(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


class MyCustomPP(PostProcessor):
    def run(self, info):
        self.to_screen('Doing stuff')
        return [], info


def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')


ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.add_post_processor(MyCustomPP())
    info = ydl.extract_info('https://www.youtube.com/watch?v=BaW_jenozKc')
    pri
import yt_dlp
import subprocess
subprocess.call('dir', shell=True)
import subprocess
subprocess.call('yt-dlp', shell=True)
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
print(subprocess.run("ls", shell=True))
print(subprocess.run("ls .", shell=True))
print(subprocess.run("whereis yv.sh", shell=True))
print(subprocess.run("whereis", shell=True))
print(subprocess.run("pwd", shell=True))
subprocess.run("pwd", shell=True)
s=subprocess.run("pwd", shell=True)
s
s=subprocess.run("whereis", shell=True)
s=subprocess.run("whoami", shell=True)
s=subprocess.run("ps", shell=True)
subprocess.run(['wsl'], shell = True)
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code
p = subprocess.Popen("date", stdout=subprocess.PIPE, shell=True)
import sys
sys.platform
import sys
import clipboard
impor
import clipboard
import os
os.chdir('c:\you\\nn')
vid
response
print(response.json())
print(response)
info=response.json()
type(info)
info
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
fulltitle
fulltitle+'\.mp3'
fulltitle+'.mp3'
full=dir+'\\'+fulltitle+'.mp3'
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
s
print(s)
import requests
x=pwd
import os
o
import clipboard
clipboard.copy(str(o))
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from pathlib import Path
import requests
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
all
fulltitle=data['fulltitle']
fulltitle=data['fulltitle']
fulltitle
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    write(fulltitle)
    write('\n')
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write('\n')
    
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
print(text)
fulltitle
lt
fulltitle
fulltitle+'.mp4'
t=fulltitle+'.mp4'
Path(t).touch()
lt
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
t=fulltitle+'.mp4'
print(text)
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
print(t)
Path(t).touch()
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"

for path, directories, files in os.walk(root_vid_directory):
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
files
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
        if video_file.endswith("MP4"):
            full_mp4_path = os.path.join(path, video_file)
            full_gpx_output_path = full_mp4_path.replace(".MP4", ".GPX")
            print(f"Processing: {full_mp4_path}")
            with open(full_gpx_output_path, "w") as gpx_file:
                exiftool_command = ["exiftool", "-ee", "-m", "-p", "/Users/fpolig01/Videos/dashcam_footage/gpx.fmt", full_mp4_path]
                subprocess.run(exiftool_command, stdout=gpx_file)
            print(f"Succesfully created: {full_gpx_output_path}\n")
import sys
print(sys.path)
import sys
print(sys.path)
import piexif
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg-python
import ffmpeg
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
te="Goethe took up residence in Weimar in November 1775 following".split('\s')
te
te.split(' ')
"jim is".split(' ')
"jim is".split('\s')
"jim is".split(\s)
"jim is".split(" ")
"jim is".split(r"\s")
"jim is".split(r'\s')
"jim is".split(r'i')
"jim is".split('i')
import re
re.split(r'\s',s)
s="Specify where the variable comes from"
re.split(r'\s',s)
re.split('\s',s)
s
s
s.replace(' ', '\n')
k=s.replace(' ', '\n')
print(k)
type(k)
import string
import random
import os

passphrases = []
for _ in range(100):
    st = "".join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for i in range(random.randint(8,16)))
    passphrases.append(st)
    print(st)
    
st
passphrases
passphrases[1:10]
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write(f"{p}\n")
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write("xx")
with open("Passphrases2.txt","w") as pass_file:
    for p in passphrases:
        pass_file.write("%s\n" %p)
        
print(p)
with open("me","w") as xx:
    xx.write(s)
    
s
with open("kk","w") as kk:
    kk.write(kk)
    
with open("kk","w") as kk:
    kk.write(k)
    
import sqlite3
conn = sqlite3.connect("/home/steff007/.ipython/profile_default/history.sqlite")
c = conn.cursor()
ip = c.execute("SELECT source from history")
ipl=list(ip)
import sys
dir(sys)
sys.platform
sys.about
sys.version
sys.about
k=dir(sys)
k
for f in k:
    print(f)
    
print(str(k))
import sys
k=dir(sys)
with open("kk","w") as kk:
    write(str(k))
    
with open("kk","w") as kk:
    kk.write(str(k))
    
sys.executable
import mysql.connector
import mysql.connector
import sys
print(sys.version_info)
dir(sys)
a=dir(sys)
print(a)
a
a
a['version_info']
type(a)
(x for x in a)
[x for x in a]
[x for x in a and x.startswith('s')]
[x for x in a if x.startswith('s')]
[x for x in a if x.startswith('v')]
a['version_info']
a.version
dir(a)
a
a
a['version_info']
a[3]
a[2]
b=[n for n in a if not n.startswith('a')]
b
b=[n for n in a if not n.startswith('w')]
b
import clipboard
exit()3651 Lancaster Ln N, Minneapolis, MN 55441
import sys
print(sys.path)
import matplotlib.pyplot as plt
import numpy as np

# X axis parameter:
xaxis = np.array([2, 8])

# Y axis parameter:
yaxis = np.array([4, 9])

plt.plot(xaxis, yaxis)
plt.show()
import os
os.path.dirname()
os.path.dirname('.')
import os
os = sys.platform()
import sys
os = sys.platform()
sys.platform
os = str(sys.platform())
myos=sys.platform
import sys
sys.platform
sys.platform()
import nest_asyncio; nest_asyncio.apply()  # This is needed to use sync API in repl
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
chrome = pw.chromium.launch(headless=False)
page = chrome.new_page()
page.goto("https://twitch.tv")
pw = sync_playwright.start()
h
w
c
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
dir(pw)
dir(sync_playwright)
pw = sync_playwright.start()
from playwright.sync_api import Playwright, sync_playwright, expect
playwright = sync_playwright().start()
pw = sync_playwright.start()
pw = sync_playwright().start()
from pill import Image
from pil import Image
from PIL import Image
import cv2
list='letS1.png lets2.png pentatonic.png'.split()
list
from PIL import Image
[[a,b] for a,b in enumerate(list)]
elist=[[a,b] for a,b in enumerate(list)]
elis
elist
img=Image.open(list[0])
img2=Image.open(list[1])
img.paste(img2, (400,400))
img.show
img.show()
img.show()
zdir(img)
dir(img)
img.save('new.png')
img2.show()
img
img=Image.open('letS1.png)
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (2450,450))
img.show()
from PIL import Image
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (400,400))
img.show()
img2.show()
img=Image.open('s.jpg')
img2=Image.open('t.jpg')
img.show()
img.paste(img2, (400,400))
img.show()
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (20,20))
img.show()
img.size
img2.size
img.show()
background = Image.new('RGBA',(1300, 1300), (255, 255, 255, 255))
background.show()
background.paste(img(30,30))
background.paste(img,(30,30))
background.show()
background.paste(img2,(60,60))
background.show()
background.paste(img2,(260,260))
background.show()
img.mode
img.size
img2.size
e
new_image = image.resize((600, 600))
new_image = img2.resize((600, 600))
new_image.show()
new_image.paste(img(300,300))
new_image.paste(img,(300,300))
new_image.show()
new_image.paste(img2,(0,0))
new_image.show()
w
dir()
w
c
import os
[a.name for a in os.scandir('.')]
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
import re
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
fil
img3=Image.open(fil[4])
img3=Image.open(fil[3])
img3.show()
ni = img3.resize((600, 600))
ni.show()
img3.size
ni = img3.resize((350, 600))
ni.show()
ni = img3.resize((350, 200))
ni.show()
fil=[a.name for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil
i=Image.open(fil[0])
i.show()
i.size
box = (200, 300, 700, 600)
nii=i.crop(box)
nii.show()
box = (200, 3000, 700, 600)
nii=i.crop(box)
box = (200, 3000, 700, 3600)
nii=i.crop(box)
nii.show()
box = (2000, 500, 4000, 3000)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 300)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 500)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 1000, 4000, 2000)
nii=i.crop(box)
nii.show()
from music21 import *
s = corpus.parse('bach/bwv65.2.xml')
s
s.analyze('key')
s.show()
us = environment.UserSettings()
us
us['musicxmlSettings'] = 'C:/Program Files (x86)/MuseScore 2/bin/MuseScore.exe'
s.show()
configure.run()
s.show()
littleMelody = converter.parse("tinynotation: 3/4 c4 d8 f g16 a g f#")
littleMelody.show()
littleMelody = converter.parse("tinynotation: 4/4 c4 d8 f g16 a g f#")
littleMelody.show()
dicant = corpus.parse('trecento/Fava_Dicant_nunc_iudei')
h
dicant.show()
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
df
pd
pd.crosstab
pd.crosstab()
from PIL import Image, ImageDraw

img = Image.open("cat.jpg").convert("RGBA")
x,y = img.size
img2 = Image.open("smith.jpg").convert("RGBA").resize((x,y))

img.putalpha(225)
img2.putalpha(45)

img3 = Image.alpha_composite(img, img2)
img3.show()
import matplotlib.pyplot as plt
import numpy as np

# Use numpy to generate a bunch of random data in a bell curve around 5.
n = 5 + np.random.randn(1000)

m = [m for m in range(len(n))]
plt.bar(m, n)
plt.title("Raw Data")
plt.show()

plt.hist(n, bins=20)
plt.title("Histogram")
plt.show()

plt.hist(n, cumulative=True, bins=20)
plt.title("Cumulative Histogram")
plt.show()
inp='google.com'
def counts(inp):
    dd={key:0 for key in inp}
    for l in inp:
        if l in list(dd.keys()):
            dd[l]=dd[l]+1
    return dd
print('h')
print(dd)
print("saturday morning")
import my
len(f)
len(f)
from datetime import datetime
some_date = datetime(2021, 12, 9, 12, 12, 23)
some_date
print(some_date.strftime('%c'))
now = datetime.now()
now
formatted_datetime_now = f"{now:%d-%B-%Y}"
print(formatted_datetime_now)
data
data
for a in data:
    print(a)
    
data[1]
type(data)
a=next(data)
a=next(data)
next(data)
type(data)
dir(data)
data.__next__
for a in data:
    print(a)
    
data
for a in data:
    print(a)
    
len(data)
data
for a in data:
    print(a)
    
for a in data:
    print(a)
    
square_list = [n** 2 for n in range(5)]
square_list
square_list
square_list
square_list[1]
square_generator = (n** 2 for n in range(5))
square_generator
for a in square_generator:
    print(a)
    
for a in square_generator:
    print(a)
    
square_generator = (n** 2 for n in range(5))
list(square_generator)
list(square_generator)
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
a=list(square_generator)
a
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
exi
k
files
col_print(k)
col_print(files)
k
col_print(k)
type(k)
files
f1
data
m=list(data)
m
from my import *
col_print(m)
for a in m:
    print(a)
    
datal
datal[1]
time
time
time.year
type(type)
type(time)
time(time)
time(time)
time(12)
time.ctime(time=(os.stat(datal[1]).st_atime))
myTime(m[1])
myTime(m[1])
myTime(m[1])
m[1]
print(m[1],myTime(m[1]))
print(m[1],myTime(m[1]))
n
col_print(n)
g=[]
g.append([2,3])
g
g.append([2,3])
g
g.append(['tome',3])
g
n[1]
col_print(n)
n[1][1]
n
n[5]
for x in n:
    print(x)
    
for x in n:
    print(x[0])
    
cp=col_print
cp(m)
m
n
list(n)
cp(list(n))
v=list(n)
v
m
cp(m)
v=list(str(n))
v
v=list(list(n))
v
dir_name=r'.'
data = (os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
d=list(data)
d
data
data.next
data
d
[x for x in d not 'x' in x]
data
data
dir(data)
for n in data: print(n)
for n in data: print(n)
data
[x for x in data if not 'x' in x]
['j' +x for x in data if not 'x' in x]
'jim'.replace('i','x')
'\\'.replace('\\','/')
[x.replace('\\', '/') for x in data if not 'x' in x]
datal
with open(datal[1]) as f:
print(f)
with open(datal[1]) as f:
    print(f)
    
datal
sorted(datal)
datal
m
n = []
n
datal
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],8)
lnl(datal[1],8)
lnl(datal[1],18)
data[0:2]
datal[0:2]
lnl(datal[1],18)
lnl(datal[1])
list(lnl(datal[1]))
lnl(datal[1])
fname
data
datafiles=[x.replace('\\', '/') for x in data if 'x' in x]
datafiles
mn=[x.replace('\\', '/') for x in data if 'x' in x]
mn
mn[1]
lnl(mn[1])
lnl(mn[0])
files = glob.glob("*.py")
import glob
t=[]
t.append("*"*3)
t
t.append(f"*"*3)
t
t
t
t
files[1]
lnl(files[1])
a
lnl(files[1])
ab
ab=[]
lnl(files[1])
lnl(files[1])
t
t
k='jim \n"
k='jim \n'
k.strip()
k
t
t[1]
t.join("")
type(t)
str(t)
t
t
t
lof
lof
import my
cl('jim')
my.cl('jim')
dir(my)
import my
dir(my)
import my
dir(my)
cl("jim")
my.cl("jim")
dir(my)
import glob
t
files
my.cl(files)
lof
lof
with open(lof[4], 'r') as f:
    for line in f.readlines():
        print(line)
        
lof
lof
for count, value in enumerate(lof):
    print(count, value)
    
lofg = (filter(os.path.isfile, glob.glob(dir_name + "/**/*", recursive=True)))
type(lofg)
next(lofg)
next(lofg)
len(lofg)
dir(lofg)
logf.__sizeof__
lofg.__sizeof__
lofg.__sizeof__()
data
ax=list(sorted(data))
ax
type(data)
type(data)
data
n=['a','x','b']
sorted(n)
n
type(data)
type(data[1])
sorted(data)
data[1]
data[1][1]
type(data[1][1])
type.ctime(data[1][1])
time.ctime(data[1][1])
time.ctime(data[1][1]).format('%a')
time.ctime(data[1][1]).format('%x')
time.ctime(data[1][1]).strftime("%a %m %y")
now
type(now)
now.strftime("%a %m %y")
time.ctime(cdate)
f"{now:%d-%B-%Y}"
f"{time.ctime(cdate):%d-%B-%Y}"
time.ctime(cdate)
type(cdate)
type(time.ctime(cdate))
data[1]
data[1][3]
data[1][2]
lat(data[1][2])
import stat
lat(data[1][2])
time.ctime(lat(data[1][2]))
time.ctime(lat(data[1][2])).strftime("%a %m %y")
modTimeInSeconds
modTime
type(modTimeInSeconds)
time.ctime(modTimeInSeconds)
cdate
modet
print(modet)
modet
modet
time
time.ctime(cdate)
type(time.ctime(cdate))
int(time.ctime(cdate))
a=time.ctime(cdate)
a
type(a)
int(a)
type(modTimeInSeconds)
int(modTimeInSeconds)
cdate
cdate
str(cdate)
str(cdate).strftime('%d/%m/%Y')
type(modTimeInSeconds)
float(cdate)
float(cdate).strftime('%d/%m/%Y')
a=time.ctime(cdate)
a
l
v
v.json
v.json()
r
r.text
r.html
r.json()
import my
cl(r.json())
my.cl(r.json())
f=r.json()
f
len(f)
str(f)
list(r.json())
today = datetime.date.today()
today
type(o)
o
i=100*100
i
f"{i:_d}"
f"{o:_d}"
o
type(i)
o=int(o)
f"{o:_d}"
f"{o:%m}"
f"{o:%x}"
now
n=datetime.now()
from datetime import datetime
n=datetime.now()
n
int(n)
print(f'{now:%Y-%m-%d %H:%M}')
print(f'{n:%Y-%m-%d %H:%M}')
now
n
n+1
o
o +a
o +1
dti = datetime.datetime.fromtimestamp(o)
import datetime  
dti = datetime.datetime.fromtimestamp(o)
dti
dti = datetime.datetime.fromtimestamp(o)
dtis = dti.strftime( "%Y - %m - %d  %H : %M : %S")  
dtis
dti.strftime( "%x")  
cti(o)
cdate
cdate
cti(cdate)
cti(cdate)
print('G','F', sep='\t', end='')
data
data
from tabulate import tabulate
print(tabulate(data))
a=[]
a.append(data)
a
print(tabulate(a))
a=[]
for n in data:
    a.append(n)
    
n
data
for a in data:
    print(a)
    
n=[]
for a in data:
    print(a)
    n.append(a)
    
n
for a in data:
    print(a)
    n.append([a])
    
    
n
n=[]
for a in data:
    print(a)
    n.append([a])
    
    
n
print(tabulate(a))
print(tabulate(n))
"jim".split('')
"jim".split()
"jim steffes".split()
lt
data
data[1].split('#')
data[1].split('#').join()
data[:5]
data[2:5]
enumerate(data[2:5])
for f in enumerate(data[2:5]):
    print(f)
    
"jim".split()
data
data[1].split(" ")
''.join(data[1].split(" "))
' '.join(data[1].split(" "))
data[1].split(" ")
' '.join(data[1].split(" "))
list='shoat
tubal
eclat
olam
stat
gnar
babai
scoad
type(list)
list.split('\n')
list
' '.join(list)
list2
list
mlist
mlist = sorted(list, key=lambda x: x[-2])
list
list
mlist
mlist
list
mlist
data
list2
' '.split(list2)
list2
list2.split(' ')
' '.join(list2.split(' '))
'aaaa'.replace('a','b')
j='aaaaa'
j.replace('a','x')
j
j[1]
data[1]
data[1].split(' ')
data[1].split(' ')[3]
a=re'\n'
k='''I have a list of words where I want to sort based on their last (2,3) letters. In other words if we say (Sort by Words ending with)'''
k
k.split()
k.split()[8]
w
' '.join(w)
w
sort(w)
mlist
mlist
h
h=(w, lambda x: x[-1:])
w
h
data
data.split(' - ')
data
str(data)
len(str(data))
data[1]
data[1][6]
n=[]
for t in data:
    n.append(t.split(' '))
    
n
for a in n:
    print(a[3])
    
n
n[1][1]
data
n
n.sort(key=lambda x: x[0])
n
n.sort(key=lambda x: x[1][8])
n
n.sort(key=lambda x: x[1][2])
n
for a in n:
    print(a[1][2])
    
for a in n:
    print(a[1][1])
    
    
n
j=[2, 3, 7, 43, 13, 139, 3263443]
len(j)
sum(j)
for a in range(len(j)):
    print(a)
    
for a in range(len(j)):
    print(j[a])
    
    
for a in range(len(j)-1):
    print(j[a]*j[a+1])
    
    
for a in range(len(j)-1):
    print(f"j[a]*j[a+1]")
    
    
    
j
import numpy
numpy.prod(j)
j
aa=numpy.prod(j)
aa
multiplyList(j)
factors=[]
factors
multiplyList(j)
factors(multiplyList(j))
kk=multiplyList(j)
factor(kk)
factor=[]
factor(kk)
num=multiplyList(j)
import sys
a = range(1,1000)
print(a)
for b in a:
    print(b)
    
b=xrange(1,100)
x = xrange(1,10000)
import pydoc
pydoc.pager("SOME_VERY_LONG_TEXT") 
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
data
list(data)
list(data)
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data + data
t=data+data
t
pydoc.pager(t)
t
pydoc.pager(str(t))
len(t)
t=t+t
t
len(t)
t=t+t
t=t+t
len(t)
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t
len(t)
subprocess.call(['dir'+longStr+'" | more'], shell=True)
longStr
datetime.now()
from datetime import datetime
datetime.now()
today=datetime.now()
today.strftime("%H")
today.strftime("%Y")
dir(datetime)
a=dir(datetime)
a
data
data[1].find('.')
data[1].find('t')
data[1].find('\.')
data[1].findall('\.')
d
import re
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
print((re.split(r'\s','we are splitting the words')))
print((re.split(r's','split the words')))
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
r1
r1 = re.findall(r"^\w+", data[1])
r1
data[1]
data[3]
data
os.chdir(r'c:\you')
next(os.walk('.'))[1]
next(os.walk('.'))[1]
a=next(os.walk('.'))[1]
a
b=[e for e in a]
b
e
a[1]
a[1].match('car')
a[1].index('car')
a[1].index('a')
a[1].index('r')
a[1].index('r')
a=whos
a
a
a
z
l=range(0,5)
l
for a in l:
    print(a)
    
l=list(range(0,5))
'car'.find('c')
'car'.find('car')
b=[e for e in a if 'w' in e]
a
a=next(os.walk('.'))[1]
b=[e for e in a if 'w' in e]
b
b=[e for e in a if 'wy' in e]
b
b=[e for e in a if  re.search(r"w",e)]
b
a
b=[e for e in a if  re.search(r"p.*y",e)]
b
os.chdir('/docker')
os.chdir('docker')
os.listdir()
os.listdir('..')
os.listdir()
os.listdir()[1]
sys.modules.keys()
c=sys.modules.keys()
c
col_print(c)
type(c)
list(c)
list(sys.modules.keys())
dir()
dir(col_print)
col_print(dir())
col_print("jim")
help(col_print)
col_print(str("jim"))
col_print(str(dir()))
col_print(str(dir()))
import my
col_print(str(dir()))
help(col_print)
import my
col_print(str(dir()))
dir(col_print)
for a in dir(print):
    print(a)
    
a
a=str(dir())
a
a.split(())
list(a)
a=str(dir())
type(a)
a.split(())
a.split()
b=list(a.split())
b=a.split()
type(b)
len(b)
b[1]
n=[]
for g in b:
    n.append(g)
    
g
b
g[1]
g[6]
for g in b:
    n.append(g)
    
b
len(b)
for t in b:
    g.append(t)
    
n=[]
for t in b:
    n.append(t)
    
n
dir(os)
for a in dir(os):
    print(a)
    
b=dir(os)
b
out
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
out = [l[i: i+4] for i in range(0, len(l), 4)]
out = [l[i: i+1] for i in range(0, len(l), 4)]
out
out = [b[i: i+1] for i in range(0, len(b), 4)]
out
col_print(b)
help(os.cpu_count)
os.cpu_count()
col_print(b)
b=dir(os)
b=dir(os)
col_print(b)
b
dir()
os.chdir(r'\you\docker')
os.listdir()
os.listdir()[1]
import re
str1
fi=os.listdir()
fi
int(8)
int(j8)
int('j8')
fi
numlists = ["5","50","7","51","87","97","53"]
sorted(numlists)
numlists
results
sorted(results)
list(map(int,results))
list(map(str,results))
list(map(int*3,results))
list(map(a*3,results))
results
list(map(lambda a: a*3,results))
list(map(lambda a: a*30,results))
fi
matchObj
matchObj = re.match( r'dogs', line )
matchObj
line
re.match( r'dogs', line )
re.match( r'd', line )
re.search( r'd', line )
re.search( r'x', line )
a
fi
fi
fi[1]
fi.sort(key=lambda f: int(re.sub('\D', '', f)))
fi
fi[::-1]
for p in fi[::-1]:
    print(p)
    
fi
f1[1].replace('a','x')
fi[1].replace('a','x')
f1[1]
fi
re.sub('.*', 'xxx', fi[1])
fi[1]
re.sub('\D.*', 'xxx', fi[1])
re.sub('\D', 'xxx', fi[1])
re.sub(r'\D', 'xxx', fi[1])
re.sub(r'\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1],1)
re.sub(r'\s', '_', fi[1],1)
re.sub(r'\s', '_', fi[1])
re.sub(r'.*', '_', fi[1])
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility
import re
regex = r"[\s\S]*?(?=Course)"
test_str = "Docker Crash Course #2 - Installing Docker.mp4"
subst = "New "
# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)
if result:
        print (result)
        
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
:x
import fil
dir()
dir(fil)
dir(fil.os)
d=dir(fil.os)
d
print(d)
dir()
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
dir()
dir(os)
os.terminal_size()
dir_path=(r'c:\you\docker')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
data[0]
Path('new').touch
import touch
import touch
from touch import touch
import touch
test_str
import re
fi
f
fi
for x in fi:
    touch.touch(x)
    
fi
for x in fi:
    print(x)
    touch.touch(x)
    
for x in fi:
    time.sleep(1)
    print(x)
    touch.touch(x)
    
fi[1]
clipboard.copy(str(fi[1]))
clipboard.copy(str(fi[1]))
x
regex = r".*(?=Course ).*#"
subst = ""
result = re.sub(regex, subst, x, 0, re.MULTILINE)
result
result.replace(' ', '_')
result=result.replace(' ', '_')
result
result.replace('-_','')
data
fi
EXIT
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
f
data.sort(key=lambda f: int(re.sub('\D', '', f)))
data
len(data)
data.remove(14)
data
enumerate(data)
for f in enumerate(data):    print(f)
data.remove(13)
dat
data
data[13]
data.remove('xxx')
data
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
mk='''I understand why Sublime doesn’t have this sorting option.'''.split()
mk
re.findall(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'ick them')
re.search(pattern, 'ick them')==True
if re.search(pattern, 'sick them'):
        print('yes')
        
if re.search(pattern, 'ick them'):
        print('yes')
        
re.search(pattern, 'ick them')==None
re.search(pattern, 'sick them')==None
pattern
re.search(data[0],'#')
data[0]
re.search(data[0],'is')
re.search('this','is')
re.search('#', data[0])
pattern='#'
dataf = filter(lambda x: re.search(pattern,x),data)
dataf
list(dataf)
for ff in filter(lambda x: re.search(pattern,x),data):
        print(ff)
        
data[0]
os.path.exists(data[0])
pattern = "^Dock"
import shutil
os.path.exists(data[0])
a
f
print(f"ok {ff}")
lens("jim")
lens("jim")
lens({"a"})
lens({a:2})
lens({"a":2})
min[-4,4,8]
min(-4,4,8)
st
def two(st):
        if len(st) > 2 and st[0] == st[len(st)-1]:
                    return "yes"
                        else:
                                    return "no"
two("jim")
two("mim")
two("im")
two('a')
two('aaa')
two(123)
two(12)
type("jim")
two(12)
[1,4].count(1)
[1,4,"a"].count("a")
[1,4].count("a")
lens(b)
lens(b)
data
type(data)
data
len(data)
data[1]
dir(data)
data.keys
data.keys()
dir()
import re
dir
dir()
a=dir()
a
col_print(a)
import tabulate as tabulate
dir_path = r"c:\you\docker\ch"
os.chdir(dir_path)
data = os.listdir(dir_path)
data
print(tabulate(data))
x=[("a",1)]
print(tabulate(x))
import tabulate as tabulate
print(tabulate(x))
dir(tabulate)
print(tabulate.tabulate(x))
print(tabulate.tabulate(data))
type(a)
a
x
type(x[1])
type(x[0])
data
tuples=[tuple(x) for x in data]
tuples
m=[]
for a in data:
    m.append(tuple(m))
    
m
type(data)
for a in data:
    print(a)
    
tuple(data)
print(tabulate.tabulate(tuple(data)))
data
m=[]
for g in data:
    m.append(g)
    
m
m=[]
for g in data:
    m.append([g])
    
    
m
print(tabulate.tabulate(m))
print(tabulate.tabulate(m))
m=[]
print(tabulate.tabulate(m))
data = os.listdir([dir_path, "January"])
data = [os.listdir(dir_path)]
data
data = os.listdir(dir_path)
data
data = ((os.stat(path), path) for path in data)
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
print(tabulate.tabulate(data))
data
data = list(((os.stat(path), path) for path in data))
data
((os.stat(path), path) for path in data)
((os.stat(path), path) for path in data)
list(((os.stat(path), path) for path in data))
((os.stat(path), path) for path in data)
print(((os.stat(path), path) for path in data))
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
for a in data:
        print(a)
        
data
data
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
print(tabulate.tabulate(data))
kk
print(tabulate.tabulate(kk))
kk
print(tabulate.tabulate(kk))
j=[[1],[1]]
print(tabulate.tabulate(j))
b
tuple(b)
c=3
d=[b[i:i+c] for i in range(0, len(b),c)]
d
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
5+4
_
_ +1
diff
diff.split('\n')
a='ppython'
a.split()
a.split(())
for s in a:
    print(s)
    
[x for x in a]
a.count('p')
set([x for x in a])
for a in set([x for x in a]):
    print(a)
    
for t in set([x for x in a]):
    print(t)
    
a='ppython'
for t in set([x for x in a]):
    print(t)
    
for t in set([x for x in a]):    print(t, a.count(t))
a
a='ppython'
for t in set([x for x in a]):    print(t, a.count(t))
a
set([x for x in a]).sort()
[1,3,1,8].sort()
dir(list)
[1,3,1,8].sort
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
cars = ['Ford', 'BMW', 'Volvo']
cars = ['Ford', 'BMW', 'Volvo'].sort()
cars
cars = ['Ford', 'BMW', 'Volvo']
cars.sort()
cars
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
ab
sorted(ab)
rl
rl
rl
x=sorted(w.split())
x
set(x)
x
sorted(x)
x
sorted(x)
import pydoc
pydoc.pager(x)
pydoc.pager(str(x))
print(x)
print(dir())
glob.glob('*.*')
sorted(glob.glob('*.*'))
import glob as glob
glob('*.*')
glob.glob('*.*')
fn(100000)
fn(100000000000000)


dir(__builitins__)
print(dir())
dir(_1)
type(_1)
print(dir())
dir(__builtins__)
print(dir(__builtins__))
dir(bin)
print(dir(__builtins__))
t
tl
import tabulate
print(tabulate.tabulate(tl))
tl
print("\t\tjim")
import datetime
tl
int("1"0)
int("1")
tl
tls
print(tabulate.tabulate(tls))
tls
tls
print(tabulate.tabulate(tls))
tl
tls
tls[3]
tls[3][2]
type(tls[3][2])
type(tls[3][:2])
tls[3][:2]
a=[10000,2000]
sorted(a)
int(1,200)
int(1)
tl
li
stn('88')
stn(fn('88'))
fn(1000000000000)
type(fn(10000000000))
a=123
b=str(a)
b
[char for char in b]
set("jimmm")
tuple("jimmm")
tuple("a")==tuple("a")
tuple("a")==set("a")
tuple("a")==tuple(set("a"))
def eq(n):
        return tuple(n)==tuple(set(n))
        
def eq(n,o):
        return tuple(n)==tuple(set(o))
        
eq(1,2)
set(a)
a
set(1,3)
set((1,3))
list(1)
list("jim")
list(1,23)
list(str(123))
eq(2,88)
set(tuple(1,3))
type(str(1,3,4))
str(34)
eq(1)
eq(8)
eq(888)
eq(8)
eq(899)
eq(888)
eq(888)
eq(8)
eq(891234)
eq(82)
eq(86)
eq(88)
eq(867)
eq(8)
eq(89)
set(1,3)
set([1,3])
set([1,3])==set([3,1])
eq(8)
eq(8)
eq(89234)
eq(892348)
eq("a")
eq("aa")
eq("ab")
len(888)
1+=1
chars
len(chars)
fact(8)
fact(8)
fact(8)
fact(8)
fact(8)
a=dir()
a
print(a)
print(a)
dir(quit)
print(a)
z=fact(8)
z
answer
def fac(n):
           return 1 if (n==0) else "not one"
           
fac(2)
fac(0)
fib(0)
fib(20)
fib(8)
fib(9)
fib(20)
fib(1)
fib(2)
fib(3)
fib(4)
fib(5)
fib(6)
fib(0)
fib(1)
fib(5)
fib(8)
for a in range(0,20):
        print(fib(a))
        
fnc
def fnc(n):
        return "{:,}".format(n)
        
dir(fnc)
print(dir(fnc))
import inspect
import tabulate
len(tab)
type(tab)
t='''When Buying the Dip Doesn’t Work: An Analysis of the Dot-com Crash'''.split()
t
[v.upper() for v in t]
[v.upper() + "  " for v in t]
[v[1] + "  " for v in t]
[v[0].upper() + "  " for v in t]
sorted(t)
sorted(t, key=t[2])
t
tab
import os
d=dir(os)
print(d)
type(d)
[x for x in d]
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
[x for x in d if d[0]!='_']
os.terminal_size()
os.terminal_size
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
fh('os')
u
fh('os')
u
fh('os')
fd
dir()
fh('sys')
fh('os')
fh('os')
fh('sys')
fh('tabulate')
dir(sys)
d='sys'
dir(d)
d
d=r'sys'
dir(d)
d
dir(sys)
dir(d)
dir(d)
dir(sys)
d
d
print(dir(d))
type(d)
d=[1,2]
print(dir(d))
vars(list).keys()
vars(sys.keys())
sys
u=dir(sys)
u
print(u)
k=sys
u=dir(k)
print(u)
r=range(10,20)
r
r=list(range(10,20))
r
d=dir()
dir(repr(d))
dir()
repr(d)
d
d
vars(d)
repr(dir())
k=repr(dir(os))
k
help('modules')
k="os"
dir(k)
type(k)
dir(repr(k))
k='''os'''
dir(k)
type(k)
dir(f"{k}")
k
k=r"os"
k
id(k)
a
a=os
dir(a)
type(os)
type(a)
fh(os)
fh(a)
u = dir(os)
print([x for x in u if u[0] != "_"])
u
u[0]
u[10]
u[10][0]
for a in enumerate(u):
    print(a)
    
for a in enumerate(u):
    print(a[1])
    
    
for a in enumerate(u):
    print(a[1][0])
    
    
    
"jim"[0]
u
print(u)
for g in u:
    print(u[0])
    
os[1]
for f in os:
    print(f)
    
dir(os)
fh(os)
help(os.path)
sys.version_info
import
import sys
sys.version_info
dir()
dir
dir()
a=dir()
[x for x in a]
[x for x in a x[0]!='_']
[x for x in a a[0]!='_']
[x for x in a x[0] =='_']
[x for x in a if x[0] =='_']
[x for x in a if x[0] !=='_']
[x for x in a if x[0] !='_']
a=dir(os)
a=dir(sys)
[x for x in a if x[0] !='_']
os.winver
sys.winver
print([x for x in a if x[0] !='_'])
dir
dir()
import os
dir()
print(dir)
print(dir())
import my
dir(my)
print(dir())
def d:
    print(dir())
dir(my)
dir(my.cl)
def dd():
    print(dir())
dd
dd()
print(dir())
dir(pasted_block)
dir(pasted_block)
dir(os)
import os
dir()
help(os)
os.chdir(python)
os.chdir('python')
today
print(today)
import tabulate
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([[f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"]])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
tar
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}","nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f"create date: {cti(cdate)} access date: {cti(adate)}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
rom tabulate import tabulate
table = [[‘Aman’, 23], [‘Neha’, 25], [‘Lata’, 27]]
print(tabulate(table), headers = [‘Name’, ‘Age’])
from tabulate import tabulate
table = [['Name', 'Age'], ['Aman', 23], ['Neha', 25], ['Lata', 27]]
print(tabulate(table, headers = "firstrow" ))
print(tabulate.tabulate(tar,headers=['a', 'b']))
import tabulate
print(tabulate.tabulate(tar,headers=['a', 'b']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} ",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates \t access']))
tar
string_nonASCII = " àa fuünny charactersß. "
string_encode = string_nonASCII.encode("ascii", "ignore")
string_decode = string_encode.decode()
print(string_decode)
dir()
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
import touch
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import re
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
import glob
files=glob.glob('*.*')
filex
filex
files
sorted(files, key=t[2])
sorted(files, key=files[2])
aa=list(range(0,10))
aa
import randome
import random
n=random.randint(0,20)
n
n
n
def ri():
    return random.randint(0,100)
ri()
ri()
ri()
[x for list(range(0,20) ) ]
[x for x in list(range(0,20) ) ]
[ri() for x in list(range(0,20) ) ]
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
l=[x for x in list(range(0,20) ) ]
l
l=[ri() for x in list(range(0,20) ) ]
l
sorted(l, reverse=True)
x=101
x[0]
x="jim"
x[1]
str(x)[0]
x=101
str(x)[0]
str(x)[1]
str(x)[5]
str(x)[5]
str(x)[3]
str(x)[2]
int(str(x)[2])
int(str(x)[len(x)-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
x
x=99999
int(str(x)[len(str(x))-1])
x=123489
int(str(x)[len(str(x))-1])
func = lambda x: int(str(x)[len(str(x))-1])
func(999983)
func(999983)
def ri():
    return random.randint(0,10000)
ri()
ri()
func(ri())
mm=[]
for a in range(0,20):
    mm.append(ri())
    
mm
sorted(mm)
sorted(mm, key=func)
print(sorted(mm, key=func))
mm=[]
for a in range(0,20):    mm.append([ri(), ri()])
print(mm)
sorted(mm, key=mm[1])
func2=lambda x: x[1]
sorted(mm, key=func2)
a=who
a=dir()
print(a)
[x for x in a ]
[x for x in a[0] ]
[x for x in a ]
[x[0] for x in a ]
[x for x in a if x[0] !='_']
print([x for x in a if x[0] !='_'])
def glbo():
    a=dir()
    print(a)
glbo()
print(dir())
class Shape:
    def __dir__(self):
        return ['area', 'perimeter', 'location']
s = Shape()
dir(s)
dir(s)
s.area
import re

test_list = ["Gfg34", "is67", "be3st", "f23or", "ge9eks"]

print("The original list is : " + str(test_list))

test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])

print("Strings after numerical Sort  : " + str(test_list))
test_list= glob.glob('*.*')
test_list
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
test_list
for a in test_list:
    print(a)
import touch
for a in test_list:
    print(a)
    touch.touch(a)
lt
touch.touch('9 - Images & Metadata.mp4')
touch('9 - Images & Metadata.mp4')
help(touch)
import touch

touch.touch(["info.txt", "data.txt", "apple.txt"])
import touch

touch.touch("x")
import touch

touch.touch(r"x")
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
import touch
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
data
data[0]
touch.touch(data[0])
data[0]
touch.touch(data[0])
touch(data[0])
import random
import glob
import re
import touch
import os
import sys
from pathlib import Path
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data[0]
Path(data[0]).touch()
Path('duh').touch()
os.chdir(r"c:\you\nextjs")
test_list= glob.glob('*.*')
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
for a in test_list:
    print(a)
    Path(a).touch()
import re
  
# initializing string
test_str = 'geeksforgeeks'
  
# printing original String
print("The original string is : " + str(test_str))
  
# using sub() to perform substitutions
# ord() for conversion.
res = (re.sub('.', lambda x: r'\u % 04X' % ord(x.group()), test_str))
  
# printing result 
print("The unicode converted String : " + str(res)) 
dir()
dis=lambda: print('jim')
dis
dis()
dis=lambda: print(dir())
dis
dis()
dis=lambda: print(dir(os))
dis()
dir(global)
dit=lambda: print(globals())
dit()
a=globals()
a
print(a)
[x for x in a if x[0] !='_']
a
dit
dit()
ds=[a for a in globals() if a[0]!='_']
ds
print(ds)
dir(In)
print(dir(ln))
def mm():
    ds=[a for a in globals() if a[0]!='_']
    print(ds)
mm()
help(os)
dir(os)
o=dir(os)
print(o)
mm()
dir(mm)
type(mm)
print(dir(mm))
import inspect
mm()
mm()
help(inspect)
print(dir(quit))
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a)
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.trim())
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.strip())
ce()
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name

user=User("joe smith")
dir(user)
user.name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
User.fname
dir(user)
user.fname
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
help(User)
dir(__main__)
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)

user=User("joe smith")
user.p()
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)
    def f(self):
        print(self.fname)

user=User("joe smith")
dir(user)
dir(user.name)
user.f()
u2=User("time ")
u2
user.f()
u2.f()
dit()
dir()
mm()
mm()
dir(mm)
help(pprint)
help(Class)
dir(__builtins__)
print(dir(__builtins__))
'hello'[1:3]
'222'.zfill(8)
def mySqrt(x):

    r = x
    precision = 10 ** (-10)
    
    while abs(x - r * r) > precision:
        r = (r + x / r) / 2
        
    return r
    
mySqrt(10)
mySqrt(10)*mySqrt(10)
dir()
mm()
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
m
for a in m:
    print(a)
    
m
for a in m:
    print(a)
    
g=r"this")
g=r"this"
g
g=r"\tthis"
g
g=r(dir())
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
for a in m:
    print(a)
    
for a in m:
    print(a)
m
m=p.finditer(s)
for a in m:
    print(a)
m=list(p.finditer(s))
m
len(m)
m[0]
m[0].group
m[0].group()
m[0].group()
t='''Inductive reasoning is a method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
t
p=re.compile(r'\d')
m=p.finditer(s)
m
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=''.join(s)
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=' '.join(s)
s
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\S{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
m
type(m)
' '.joint(m)
' '.join(m)
str(m)
p=re.compile(r'\w}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s
p=re.compile(r'\w')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bb')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\Bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'[s]')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[16]
s[16:20]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d+')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[128]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
sp=p.split(s)
sp
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d+')
sp=p.split(s)
s
sp
import glob
dirn=r'C:\projects\node\js\mm\public\img'
files=glob.glob(dirn)
print(files)
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(files)
files
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath.basename(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath.basename(f))    
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath(f))    
files
files[0]
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(head, tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}, {tail}")    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"touch {head}\{tail}")    
files
[os.path.split(i) for i in files]
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
fil
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
fil
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}{tail}")
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"{head}{tail}")
    # print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
file
fil
lst=list(range(1,5))
lst
lst=list(range(1,5,2))
lst
lst=list(range(1,10,2))
lst
lst=list(range(1,10,2))
b=[x*3 for x in lst]
b
lst
c=list(map(lambda x: x*40, lst))
c
n=pwd
import os
jim.replace('i', 'xxx')
'jim'.replace('i', 'xxx')
'\\\'.replace('\\','nnn')
'\\\'.replace('\\\','nnn')
'\\\'.replace('\\','')
import re

phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '\\',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, r'\\',phone_no)

print(result)
result
print(result)
[x for x in [1,2,34]]
[str(x) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]][0]
print([range(x,35) for x in [1,2,34]][0])
print(range(1,5))
for i in [range(x,35) for x in [1,2,34]][0]:
    print(i)
    
import os
import pathlib
import glob
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
files
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
y=[x for x in files]
y
y=[os.path.basename(x) for x in files]
y
y=[{os.path.basename(x)} for x in files]
y
print(\"")
print('"')
y=['"src": '+ {os.path.basename(x)} for x in files]
y=['jim' + {os.path.basename(x)} for x in files]
y=[('jim' + {os.path.basename(x)}) for x in files]
y=['jim' + str({os.path.basename(x)}) for x in files]
y
y=['jim ' + str({os.path.basename(x)}) for x in files]
y=['jim '  str({os.path.basename(x)}) for x in files]
y=['jim ' + str({os.path.basename(x)}) for x in files]
y
y=['src: "' + str({os.path.basename(x)}) for x in files]
y
y=['src":' + '"' + str({os.path.basename(x)}) for x in files]
y
y=[({os.path.basename(x)}) for x in files]
y
mm()
mm()
def cl(x):
    clipboard.copy(str(x))
mm()
y=[({os.path.basename(x)}) for x in files]
cl(y)
y=[({os.path.basename(x)}+'\n') for x in files]
y=[({os.path.basename(x)}) for x in files]
y
cl(y)
y=['"src":'+ str({os.path.basename(x)}) for x in files]
y
str(y)
y=['"src":{ " /img/'+ str({os.path.basename(x)}) for x in files]
y
y=['{"src": " /img/'+ str({os.path.basename(x)}+'"') for x in files]
y=['{"src": " /img/'+ str({os.path.basename(x)}) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"\n' for x in files]
y
cl(y)
mm()
print(f"header is {response.headers}")
h=response.headers
h
type(h)
h
for i in h:
    print(i)
    
h.Server
dir(h)
response.json()
js=response.json()
js
type(js)
h=response.headers.json()
js
js
len(js)
for a in js:
    print(a)
    
str(js)
js[1]
dir(js[1])
type(js[1])
js[1].created_at
js[1]['created_at']
for i in js:
    print(i.html_url)
    
for i in js:
    print(i)
    
js[1]['created_at']
for i in js:
    print(i['html_url'])
    
mm()
cl(y)
import my
for i in js:
    print(i['html_url'], i['updated_at'])
for i in js:
    print(f"{i['html_url']}, {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
ba=[]
for i in js:
    ba.append([f"{i['html_url']} \t {i['updated_at']}"])
ba
import tabulate
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{i['updated_at']}"])

print(tabulate.tabulate(ba))
ba
sorted(ba)
print(tabulate.tabulate(ba))
import datetime
js
cti(js[1]['created_at'])
js[1]['created_at']
type(js[1]['created_at'])
from datetime import datetime
date_string = '2021-12-31 15:37'
datetime = datetime.strptime(date_string, '%Y-%m-%d %H:%M')
print(datetime)
datetime = datetime.strptime(date_string, '%Y-%m-%d ')
print(datetime)
from datetime import date
today=date.today()
print(f"today is {today}")
today.day
today.month
type(today)
dir(today)
today.strftime("%a")
today.strftime("%a %d")
today.strftime("%a %d %M")
today.strftime("%a %d %B")
today.strftime("%a %B %d ")
today.strftime("%a %B %dth ")
today.strftime("%a %B %dth")
js[1]['created_at']
type())js[1]['created_at']
type(js[1]['created_at'])
date = datetime.datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date = datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date
def iso(d):
    return datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
iso(js[1]['created_at'])
date=iso(js[1]['created_at'])
date.strftime('%A %b %d, %Y at %H:%M GMT')
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')
date=iso(js[1]['created_at'])
data
date
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
    
js
js[1]
ba=[1]
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m/%d/%Y')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js[1]
type(js[1])
key_value ={}   
  
# Initializing the value
 key_value[2] = 56      
 key_value[1] = 2
 key_value[5] = 12
 key_value[4] = 24
 key_value[6] = 18     
 key_value[3] = 323
key_value
for i in js:
    print(i)
    
for i in js:
    print(f"{i} \n)
for i in js:
    print(f"{i} \n")
    
for i in js:
    print(f"{i} \n\n")
    
for i in js:
    print(f"{i[1]} \n\n")
    
for i in js:
    print(f"{i[created_at]} \n\n")
    
for i in js:
    print(f"{i['created_at']} \n\n")
    
js[1]
print(js[1])
len(js)
gl
for i in js[0]:
    print(i)
    
[x for x in js]
[x.['git_url'] for x in js]
[x['git_url'] for x in js]
[x+ x['git_url'] for x in js]
[x for x in js[1]]
str([x for x in js[1]])
cl(str([x for x in js[1]]))
import my
my.cl(str([x for x in js[1]]))
after:2020
[x['name'] for x in js[1]]
[x['name'] for x in js]
[x['name'] + x['description'] for x in js]
[(x['name'] , x['description')] for x in js]
sorted(js)
js
type(js)
str(js)
js[1]
sorted(js)
sorted(js.items())
sorted(js.topics())
sorted(js['watchers'])
sorted(js[1])
dict
dict[3]
for i in dict:
    print(i)
    
dict[3]
d = {'Red': 1, 'Green': 2, 'Blue': 3} 
d[1]
d['red']
d
for a in d:
    print(a)
    
d.items()
for a in d.items():
    print(a)
    
for a in d.items():
    print(type(a))
    
for a, b in d.items():
    print(a, b)
    
for a, b in d.items():
    print(a,'is', b)
    
js
js[1]
js[1]['forks']
del js[1]['forks']
js[1]
color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}
fruits = {}
fruits["apple"] = 1
fruits["mango"] = 2
fruits["banana"] = 4
fruits
'apple' in fruits
len(fruits)
js[1]
type(js)
for i in js:
    print(type(i))
    
newlist = sorted(js, key=lambda d: d['name']) 
newlist
for a in newlist:
    print(a['name'])
    
newlist
for a in newlist:
    print(a['name'])
    
for a in newlist:
    print(a['name'], a['date_created'])
    
import my
mm()
dir(my)
type(js)
len(js)
type(js[1])
j=(js[1])
j
for i in j:
    print(i)
    
enumerate(j)
list(enumerate(j))
cl(str(list(enumerate(j))))
my.cl(str(list(enumerate(j))))
for i in js:
    print(i['name'])
for i in js:
    print(i['name'], i['git_commits']))
for i in js:
    print(i['name'], i['git_commits'])
    
for i in js:
    print(i['name'], i['created_at']))
for i in js:
    print(i['name'], i['created_at'])
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m-%d-%y')
for i in js:
    print(i['name'], iso(i['created_at']))
import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
from datetime import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
for i in js:
    print(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[0]) 
newlist
newlist = sorted(s, key=lambda d: d[2])
newlist
yesterday = date.today() - timedelta(days=1)
import datetime as date
yesterday = date.today() - timedelta(days=1)
datatime.today()
datetime.today()
date=datetime
yesterday = date.today() - timedelta(days=1)
yesterday = date.today() - date.timedelta(days=1)
yesterday = date.today() - datetime.timedelta(days=1)
dir(datetime)
from datetime import timedelta
yesterday = date.today() - timedelta(days=1)
yesterday
yesterday.strftime('%A %b %d, %Y at %H:%M ')
yesterday = date.today() - timedelta(years=1)
yesterday = date.today() - timedelta(year=1)
yesterday = date.today() - timedelta(days=20)
yesterday.strftime('%A %b %d, %Y')
yesterday = date.today() - timedelta(days=1)
today = date.today()
tomorrow = date.today() + timedelta(days=1)
date_list =[today, tomorrow, yesterday]
date_list
sorted(date_list)
s
s[0][2]
datetime = datetime.strptime(s[0][2], '%Y-%m-%d ')
datetime = datetime.strptime(s[0][2], '%m-%d-%y ')
datetime.strptime('07/28/2014 18:54:55.099', '%m/%d/%Y %H:%M:%S.%f')
s[0][2]
datetime = datetime.strptime('03-02-22', '%m-%d-%y ')
datetime = datetime.strptime('3-2-22', '%m-%d-%y ')
from datetime import datetime
date_time_str = '13/03/21 06:33:13'

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y %H:%M:%S')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
date_time_str = '13/03/21 '

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y ')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
s[0][2]
type(s[0][2])
datetime.strptime(s[0][2], '%m/%d/%Y %H:%M:%S.%f')
type(s[0][2])
s[0][2]
datetime.strptime('13/03/21 ', '%m/%d/%Y')
datetime.strptime('13/03/21 ', '%m/%d/%y')
datetime.strptime('13/03/21', '%m/%d/%y')
datetime.strptime(r'13/03/21', '%m/%d/%y')
datetime.strptime('13/03/21', '%d/%m/%y')
datetime.strptime('13-03-21', '%d-%m-%y')
datetime.strptime(s[0][2], '%d-%m-%y')
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
    
s[1]
def ds(x):
    return datetime.strptime(x, '%d-%m-%y') #good
    
s[1][1]
ds(s[1][1])
def ds(x):
    return datetime.strptime(x, '%m-%d-%y') #good
    
ds(s[1][1])
s=[]
for i in js:
    s.append([i['name'], ds(iso(i['created_at'])), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[1]) 
newlist
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"], f"{ds(iso(i['updated_at']))}")

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}", f"{ds(iso(i['updated_at']))}"])
ba
nl = sorted(ba, key=lambda d: d[2]) 
nl
cp(nl)
dir(my)
my.cl(da)
my.cl(ba)
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
l=[1,4,5]

def tl(li):
    for x in li:
        a+=x 
    return a
tl(l)
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a+=x 
    return a
tl(l)
tl([9,9,9,])
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
def tc(li):
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
def tc(li):
    print(type(li))
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
a
a=3
a*=8
a
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a*=x 
    return a
tl(l)
l
tl(l)
l=[1,4,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
l=[5,5,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
max([1,4,5])
def m(y):
    return max(y)
m(l)
import random as random
n=random()
import random as random
n=random.random()
n
for in range(10)"
for i in range(10):
    print(i)
    
for i in range(10):
    print(random.random)
    
for i in range(10):
    print(random.random())
    
import random
randomlist = []
for i in range(0,5):
n = random.randint(1,30)
randomlist.append(n)
print(randomlist)
import random
randomlist = []
for i in range(0,5):
    n = random.randint(1,30)
    randomlist.append(n)
print(randomlist)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return y
mi(rnl)
rnl
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
n = random.randint(1,3000)
n
n
n
[x for x in range(20)]
[random.randint(1,3000) for x in range(20)]
hasattr(str, '__iter__')
hasattr(float, '__iter__')
hasattr(list, '__iter__')
hasattr('jim', '__iter__')
gen_exp = (x ** 2 for x in range(10) if x % 2 == 0)
gen_exp
gen_exp[1]
gen=(random.randint(1,3000) for x in range(20))
gen
for a in gen:
    print(a)
    
for a in gen:
    print(a)
    
for l in "jim":
    print(l)
    
[jim steffes]
['jim']
a=['jim']
a
print(a)
[a for a in "bill")
[a for a in "bill"]
[a for a in "bill" if a='i']
[a for a in "bill" if a=='i']
[a for a in "bill" if a>'i']
[for b in range(50)]
[b for b in range(50)]
[b for b in range(50) if b%2!=0]
[b for b in range(50) if b%3!=0]
[b for b in range(50) if b%3=0]
[b for b in range(50) if b%3==0]
matrix = [[1, 2], [3,4], [5,6], [7,8]]
[a for a in matrix]
len(matrix)
[[row[1] for row in matrix]]
[[row[2] for row in matrix]]
[[row[0] for row in matrix]]
matrix
fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True, figsize=(12,4))
sns.countplot(dice_1, ax=ax1)
sns.countplot(dice_2, ax=ax2)
import os
pipe=os.popen("dir *.md")
print (pipe.read())
import os
pipe=os.popen("dir *.*")
print (pipe.read())
os.chdir(r"c:\twit")
pipe=os.popen("exiftool -j twit0877.mp3")
print (pipe.read())
pipe=os.popen("exiftool -j twit0877.mp3")
pr=(pipe.read())
print (pipe.read())
pr
print(pr)
type(pr)
pr.split(",")
pr.replace('\n','')
pr.replace('\n','').split(',')
pr.replace('\n','').split(',')[2]
mm()
import my
mm()
prl=pr.replace('\n','').split(',')
prl
type(prl)
type(prl)[1]
prl[1]
prl[2]
import glob
for a in glob.glob('.'):
    print(a)
    
for a in glob.glob('*.*'):
    print(a)
    
[x for x in glob.glob('*.*') x]
[x for x in glob.glob('*.*')]
[x for x in glob.glob('*.*') if x.startswith('B')]
[x for x in glob.glob('*.*') if x[2]]
[x[2] for x in glob.glob('*.*') ]
'jim'.split('i')
[x.split(' ') for x in glob.glob('*.*') ]
[x.split(' '[3]) for x in glob.glob('*.*') ]
[x.split(' ')[3] for x in glob.glob('*.*') ]
[x.split(' ')[0] for x in glob.glob('*.*') ]
[x.split(' ')[2] for x in glob.glob('*.*') ]
f=glob.glob('*.*')
f
[len(a) for a in f]
[a.split(' ') for a in f]
[len(a.split(' ')) for a in f]
def p(n):
    n.split(' ')
    
[len(p(a)) for a in f]
p('th is')
def p(n):
    return n.split(' ')
    
p('th is')
[len(p(a)) for a in f]
[a[3] for a in f if p(a)>3] 
[a[3] for a in f if p(a)=3]
[a[3] for a in f if p(a)==3]
f[1]
p(f[1])
[a[3] for a in f if len(p(a))>=3]
[p(a)[3] for a in f if len(p(a))>=3]
import os
from sys import exit
from os import system, name


from mido import MidiFile
system('cls')

mid = MidiFile('let.mid', clip=True)
# mid2 = MidiFile('legend.mid', clip=True)
mm()
mid
type(mid)
for x in mid:
    print(x)
    
for x in mid[0:5]:
    print(x)
    
l=list(mid)
l[0:5}
l[0:5]
l[0:25]
len(l)
mid
mid.tracks
del mid.tracks[2]
mid.trackss
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
del mid.tracks[2]
mid.tracks
for x in list(mid.tracks):
    print(x)
    
enumerate(list(mid.tracks))
list(enumerate(mid.tracks))
del mid.tracks[3:5]
list(enumerate(mid.tracks))
del mid.tracks[1:11]
list(enumerate(mid.tracks))
mid.save('letmy.mid')
list(enumerate(mid.tracks))
#!/usr/bin/env python
"""
Create a new MIDI file with some random notes.

The file is saved to test.mid.
"""
from __future__ import division
import random
import sys
from mido import Message, MidiFile, MidiTrack, MAX_PITCHWHEEL

notes = [64, 64+7, 64+12]

outfile = MidiFile()

track = MidiTrack()
outfile.tracks.append(track)

track.append(Message('program_change', program=12))

delta = 300
ticks_per_expr = int(sys.argv[1]) if len(sys.argv) > 1 else 20
for i in range(4):
    note = random.choice(notes)
    track.append(Message('note_on', note=note, velocity=100, time=delta))
    for j in range(delta // ticks_per_expr):
        pitch = MAX_PITCHWHEEL * j * ticks_per_expr // delta
        track.append(Message('pitchwheel', pitch=pitch, time=ticks_per_expr))
    track.append(Message('note_off', note=note, velocity=100, time=0))

outfile.save('test.mid')
import subprocess
print(subprocess.run("echo Hello World", shell=True))  
import subprocess
print(subprocess.run("ex", shell=True))
import re
a="Full React Tutorial #26 - Reusing Custom Hooks.mp4"
print(re.sub('.*#', '', a))
import glob
test_list= glob.glob('*.*')
print(f'glob is {test_list}')
import glob
test_list= glob.glob('#')
print(f'glob is {test_list}')
import glob
import re
reg='#'
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file)
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', ''))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file, re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}\', \'{re.sub('.*#', '', file)}\'")
        
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\', \'{re.sub('.*#', '', file)}\'")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc=[]
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        sc.append(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc
str(sc)
for a in sc:
    print(a)
    
with open('filename.txt', 'w') as f:
    for k in sc:
        print(k, file=f)
time="12"
min="30"
t=f"{time}+{min}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
2*60
time=int("12")
min=int("30")
t=f"{time*60}+{min}"
print(t)
time=int("12")
min=int("30")
t=f"{(time*60)+ min}"
print(t)
start=int(input("start: "))
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
print(spl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0]*60))+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    despl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=(start-end)*-1
print(end)
import glob
filelist=glob.glob('*.*')
filelist
type(filelist)
import re                                  # Add the re import declaration to use regex
reg = re.compile(r'py$')                    # Compile the regex
test = list(filter(reg.search, filelist))      # Create iterator using filter, cast to list 
test
test
type(test)
test[0]
test = list(filter(reg.search, filelist))[0]
test
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
type(content)
content
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
content
filename
type(content)
for line in content:
    print(line),
with open('j.py') as f:
    content = f.readlines()
content
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    content = f.readlines()
content
content[1:4]
temp = open(filename,'r').read().splitlines()
temp
import glob
filelist=glob.glob('*.*')
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    # content = f.readlines()
    content = open(filename,'r').read().splitlines()
    
content
str(content)
content
non_empty_lines = [line for line in content if line.strip() != ""]
ne = [line for line in content if line.strip() != ""]
ne
str(ne)
for s in ne:
    print(s)
    
filelist=glob.glob('*.*')
filelist
def stx(n):
    return f'{n} is nothing'
    
stx("p")
def addition(n):
    return n + n
  
# We double all numbers using map()
numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
result = map(stx, numbers)
result
result
list(result)
def stx(n):
    return f'{n} \'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/{n}\'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/img/{n}/" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
result=['jim']
result.append['tom')
result.append['tom']
result=['jim']
type(result)
result.append['tom']
result.append('tom')
result
result += "mike"
result
result += ["mike"]
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
print(result)
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
result
join(result)
''.joint(result)
''.join(result)
'\n'.join(result)
s='\n'.join(result)
with open('out.py') as f:
    f.write(s)
    
with open('out.py',mode="wt") as f:
    f.write(s)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
with open('out.py',mode="wt") as f:    f.write(s)
import inspect
a=1
inspect(a)
a
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
    
f(2)
a=f(1)
a
a(5)
f
f()
inspect(f)
i
for a in i:
    print(a)
    
a
a(8)
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
a=f(1)
a
a(8)
x = "hello"

#if condition returns False, AssertionError is raised:
assert x == "goodbye", "x should be 'hello'"
x
assert x=="hello"
assert x=="hellos"
import glob
files = glob.glob("*.*")
for f in files:
    print(f)
files
import re
re.match("j","jim)
for f in files:
    print(re.split(r"\#",f))
    
for f in files:    print(re.split(r"\#",f))
for f in files:    print(re.split(r"\#",f)[1])
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+",xx)
print(r1)
r1
if (r1):
    print(r1)
    
if (r2):
    print(r1)
    
r1 = re.search(r"^\j","jimxx")
re=r""
r1 = re.search("jimxx")
import glob
import re
files = glob.glob("*.*")
z
print(i for i in files)
files
print(list(i for i in files))
print(list(i for i in files if re.search(r"s",i)))
import os
os.chdir(r'C:\you\memgame')
files = glob.glob("*.*")
print(list(i for i in files if re.search(r"#",i)))
for f in (list(i for i in files if re.search(r"#",i))):
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f)
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}"}
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
    print(re.split(r"\#",f)[1])
    os.rename(f,re.split(r"\#",f)[1]) 
ip = input("Ip Address: ") or "127.0.0.1"
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(dir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"s",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\d',f)[1]}")
for f in (list(i for i in files if re.search(r"\\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\\d',f)[1]}")
print(f"really show this {{")
print(f"\\")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'd',f)[1]}")
    
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
plt.plot(x,y)
plt.show()
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt 
    
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
z = np.cos(x)
plt.plot(x,y,x,z)
plt.show()
import glob

files=glob.glob('*.*')
print(files)
import glob

files=glob.glob('*.*')
print(files)


import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'c:\you\*.*'
res = glob.glob(dir_path)
print(res)
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'C:\projects\node\python'
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'.'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*p'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.py'
res = glob.glob(dir_path)
print(res)
lt
dir_path = r'c:\you\*'
res = glob.glob(dir_path)
print(res)
type(res)
import json
f=open('a.json')
data=json.load(f)
data
data['fulltile']
data[1]
type(data)
data.keys
data.keys()
data['id']
x=data.keys()
x
x[3]
x=list(data.keys())
x
[n + 'this' for n in x]
[n + 'this' for n in x]
['<div class=\"n\"' for n in x]
['<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n} </div>' for n in x]
y=[f'<div class=\"n\" {n} </div>' for n in x]
y
join(y)
import re
s="Specify where the variable comes from"
re.split(r'\s',s)
' '.join(x)
x
' '.join(y)
'\n '.join(y)
x
x
y
data['fulltitle']
lt
path_to_file/person.json
import json


with open('a.json', 'r') as f:
  data = json.load(f)
print(data)
data.keys()
print(json.dumps(data, indent = 4, sort_keys=True))
print(json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True)
s
import clip
import clipboard
s
clipboard.copy(str(s))
s[1]
s['fulltitle']
type(s)
type(data)
data['fulltitle']
import json
import clipboard
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
fulltitle
description
m=fulltitle+'.mp3'
m
import touch
'This is first line'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    pass
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    fp.write(description)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write(text)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
# dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
full=dir+'/'+fulltitle+'.mp4'
Path(y).touch
Path('y').touch
a=pwd
foo = "a\c\d" # example string with backslashes
foo
foo = r"a\c\d" # example string with backslashes
foo
foo.replace('\\', " ")
o
print(0)
print(o)
print(o)
p=o+'\a'
p
p=o+'a'
p
p=o+'x'
Path(x).touch()
o
Path(o).touch()
o
Path(o).touch()
Path('x').touch()
o
p
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
full
path(full).touch()
Path(full).touch()
os.chdir('\mnt')
os.chdir('\\mnt')
os.chdir('/mnt')
os.chdir('//mnt')
import os
os.chdir('mnt')
os.chdir('..')
os.chdir('c:\you')
os.chdir('c:\you\nn')
os.chdir('c:\you\\nn')
path('Firebase - Back to the Basics.mp4').touch()
Path('Firebase - Back to the Basics.mp4').touch()
import path
from pathlib import Path
Path('Firebase - Back to the Basics.mp4').touch()
lt
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
print(full)
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
Path(full).touch()
Path('c:\\all'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path(r'CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4').touch()
full
Path('c:\\all\\filex').touch()
full
clipboard.copy(str(full))
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
lt
import subprocess

list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
mcmd="yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 &
"
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 & '''
mcmd
import os
m='''ls -a'''
mo=os.system(m)
mo
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/watch?v=SLfhMt5OUPI -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
mo
mo
import subprocess
from pathlib import Path
import json
# import touch
import clipboard
import os
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print('finish')
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print(mcmd)
print('finish')
yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 &
import subprocess
exit_code = subprocess.call('./practice.sh')
print(exit_code)
lt
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
args = ["ping", "www.google.com"]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
args=[
    "yt-dlp",
    "https://www.youtube.com/shorts/hh5EwXkf4Z8"
]
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process
args=[ "yt-dlp", "https://www.youtube.com/shorts/hh5EwXkf4Z8" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args=[ "yt-dlp" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
import sys
result = subprocess.run([sys.executable, "-c", "print('ocean')"])
print(subprocess.run("yt-dlp", shell=True))  
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
import json

import yt_dlp
from yt_dlp.postprocessor.common import PostProcessor


class MyLogger:
    def debug(self, msg):
        # For compatability with youtube-dl, both debug and info are passed into debug
        # You can distinguish them by the prefix '[debug] '
        if msg.startswith('[debug] '):
            pass
        else:
            self.info(msg)

    def info(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


class MyCustomPP(PostProcessor):
    def run(self, info):
        self.to_screen('Doing stuff')
        return [], info


def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')


ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.add_post_processor(MyCustomPP())
    info = ydl.extract_info('https://www.youtube.com/watch?v=BaW_jenozKc')
    pri
import yt_dlp
import subprocess
subprocess.call('dir', shell=True)
import subprocess
subprocess.call('yt-dlp', shell=True)
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
print(subprocess.run("ls", shell=True))
print(subprocess.run("ls .", shell=True))
print(subprocess.run("whereis yv.sh", shell=True))
print(subprocess.run("whereis", shell=True))
print(subprocess.run("pwd", shell=True))
subprocess.run("pwd", shell=True)
s=subprocess.run("pwd", shell=True)
s
s=subprocess.run("whereis", shell=True)
s=subprocess.run("whoami", shell=True)
s=subprocess.run("ps", shell=True)
subprocess.run(['wsl'], shell = True)
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code
p = subprocess.Popen("date", stdout=subprocess.PIPE, shell=True)
import sys
sys.platform
import sys
import clipboard
impor
import clipboard
import os
os.chdir('c:\you\\nn')
vid
response
print(response.json())
print(response)
info=response.json()
type(info)
info
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
fulltitle
fulltitle+'\.mp3'
fulltitle+'.mp3'
full=dir+'\\'+fulltitle+'.mp3'
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
s
print(s)
import requests
x=pwd
import os
o
import clipboard
clipboard.copy(str(o))
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from pathlib import Path
import requests
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
all
fulltitle=data['fulltitle']
fulltitle=data['fulltitle']
fulltitle
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    write(fulltitle)
    write('\n')
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write('\n')
    
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
print(text)
fulltitle
lt
fulltitle
fulltitle+'.mp4'
t=fulltitle+'.mp4'
Path(t).touch()
lt
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
t=fulltitle+'.mp4'
print(text)
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
print(t)
Path(t).touch()
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"

for path, directories, files in os.walk(root_vid_directory):
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
files
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
        if video_file.endswith("MP4"):
            full_mp4_path = os.path.join(path, video_file)
            full_gpx_output_path = full_mp4_path.replace(".MP4", ".GPX")
            print(f"Processing: {full_mp4_path}")
            with open(full_gpx_output_path, "w") as gpx_file:
                exiftool_command = ["exiftool", "-ee", "-m", "-p", "/Users/fpolig01/Videos/dashcam_footage/gpx.fmt", full_mp4_path]
                subprocess.run(exiftool_command, stdout=gpx_file)
            print(f"Succesfully created: {full_gpx_output_path}\n")
import sys
print(sys.path)
import sys
print(sys.path)
import piexif
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg-python
import ffmpeg
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
te="Goethe took up residence in Weimar in November 1775 following".split('\s')
te
te.split(' ')
"jim is".split(' ')
"jim is".split('\s')
"jim is".split(\s)
"jim is".split(" ")
"jim is".split(r"\s")
"jim is".split(r'\s')
"jim is".split(r'i')
"jim is".split('i')
import re
re.split(r'\s',s)
s="Specify where the variable comes from"
re.split(r'\s',s)
re.split('\s',s)
s
s
s.replace(' ', '\n')
k=s.replace(' ', '\n')
print(k)
type(k)
import string
import random
import os

passphrases = []
for _ in range(100):
    st = "".join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for i in range(random.randint(8,16)))
    passphrases.append(st)
    print(st)
    
st
passphrases
passphrases[1:10]
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write(f"{p}\n")
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write("xx")
with open("Passphrases2.txt","w") as pass_file:
    for p in passphrases:
        pass_file.write("%s\n" %p)
        
print(p)
with open("me","w") as xx:
    xx.write(s)
    
s
with open("kk","w") as kk:
    kk.write(kk)
    
with open("kk","w") as kk:
    kk.write(k)
    
import sqlite3
conn = sqlite3.connect("/home/steff007/.ipython/profile_default/history.sqlite")
c = conn.cursor()
ip = c.execute("SELECT source from history")
ipl=list(ip)
import sys
dir(sys)
sys.platform
sys.about
sys.version
sys.about
k=dir(sys)
k
for f in k:
    print(f)
    
print(str(k))
import sys
k=dir(sys)
with open("kk","w") as kk:
    write(str(k))
    
with open("kk","w") as kk:
    kk.write(str(k))
    
sys.executable
import mysql.connector
import mysql.connector
import sys
print(sys.version_info)
dir(sys)
a=dir(sys)
print(a)
a
a
a['version_info']
type(a)
(x for x in a)
[x for x in a]
[x for x in a and x.startswith('s')]
[x for x in a if x.startswith('s')]
[x for x in a if x.startswith('v')]
a['version_info']
a.version
dir(a)
a
a
a['version_info']
a[3]
a[2]
b=[n for n in a if not n.startswith('a')]
b
b=[n for n in a if not n.startswith('w')]
b
import clipboard
exit()3651 Lancaster Ln N, Minneapolis, MN 55441
import sys
print(sys.path)
import matplotlib.pyplot as plt
import numpy as np

# X axis parameter:
xaxis = np.array([2, 8])

# Y axis parameter:
yaxis = np.array([4, 9])

plt.plot(xaxis, yaxis)
plt.show()
import os
os.path.dirname()
os.path.dirname('.')
import os
os = sys.platform()
import sys
os = sys.platform()
sys.platform
os = str(sys.platform())
myos=sys.platform
import sys
sys.platform
sys.platform()
import nest_asyncio; nest_asyncio.apply()  # This is needed to use sync API in repl
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
chrome = pw.chromium.launch(headless=False)
page = chrome.new_page()
page.goto("https://twitch.tv")
pw = sync_playwright.start()
h
w
c
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
dir(pw)
dir(sync_playwright)
pw = sync_playwright.start()
from playwright.sync_api import Playwright, sync_playwright, expect
playwright = sync_playwright().start()
pw = sync_playwright.start()
pw = sync_playwright().start()
from pill import Image
from pil import Image
from PIL import Image
import cv2
list='letS1.png lets2.png pentatonic.png'.split()
list
from PIL import Image
[[a,b] for a,b in enumerate(list)]
elist=[[a,b] for a,b in enumerate(list)]
elis
elist
img=Image.open(list[0])
img2=Image.open(list[1])
img.paste(img2, (400,400))
img.show
img.show()
img.show()
zdir(img)
dir(img)
img.save('new.png')
img2.show()
img
img=Image.open('letS1.png)
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (2450,450))
img.show()
from PIL import Image
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (400,400))
img.show()
img2.show()
img=Image.open('s.jpg')
img2=Image.open('t.jpg')
img.show()
img.paste(img2, (400,400))
img.show()
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (20,20))
img.show()
img.size
img2.size
img.show()
background = Image.new('RGBA',(1300, 1300), (255, 255, 255, 255))
background.show()
background.paste(img(30,30))
background.paste(img,(30,30))
background.show()
background.paste(img2,(60,60))
background.show()
background.paste(img2,(260,260))
background.show()
img.mode
img.size
img2.size
e
new_image = image.resize((600, 600))
new_image = img2.resize((600, 600))
new_image.show()
new_image.paste(img(300,300))
new_image.paste(img,(300,300))
new_image.show()
new_image.paste(img2,(0,0))
new_image.show()
w
dir()
w
c
import os
[a.name for a in os.scandir('.')]
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
import re
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
fil
img3=Image.open(fil[4])
img3=Image.open(fil[3])
img3.show()
ni = img3.resize((600, 600))
ni.show()
img3.size
ni = img3.resize((350, 600))
ni.show()
ni = img3.resize((350, 200))
ni.show()
fil=[a.name for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil
i=Image.open(fil[0])
i.show()
i.size
box = (200, 300, 700, 600)
nii=i.crop(box)
nii.show()
box = (200, 3000, 700, 600)
nii=i.crop(box)
box = (200, 3000, 700, 3600)
nii=i.crop(box)
nii.show()
box = (2000, 500, 4000, 3000)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 300)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 500)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 1000, 4000, 2000)
nii=i.crop(box)
nii.show()
from music21 import *
s = corpus.parse('bach/bwv65.2.xml')
s
s.analyze('key')
s.show()
us = environment.UserSettings()
us
us['musicxmlSettings'] = 'C:/Program Files (x86)/MuseScore 2/bin/MuseScore.exe'
s.show()
configure.run()
s.show()
littleMelody = converter.parse("tinynotation: 3/4 c4 d8 f g16 a g f#")
littleMelody.show()
littleMelody = converter.parse("tinynotation: 4/4 c4 d8 f g16 a g f#")
littleMelody.show()
dicant = corpus.parse('trecento/Fava_Dicant_nunc_iudei')
h
dicant.show()
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
df
pd
pd.crosstab
pd.crosstab()
from PIL import Image, ImageDraw

img = Image.open("cat.jpg").convert("RGBA")
x,y = img.size
img2 = Image.open("smith.jpg").convert("RGBA").resize((x,y))

img.putalpha(225)
img2.putalpha(45)

img3 = Image.alpha_composite(img, img2)
img3.show()
import matplotlib.pyplot as plt
import numpy as np

# Use numpy to generate a bunch of random data in a bell curve around 5.
n = 5 + np.random.randn(1000)

m = [m for m in range(len(n))]
plt.bar(m, n)
plt.title("Raw Data")
plt.show()

plt.hist(n, bins=20)
plt.title("Histogram")
plt.show()

plt.hist(n, cumulative=True, bins=20)
plt.title("Cumulative Histogram")
plt.show()
inp='google.com'
def counts(inp):
    dd={key:0 for key in inp}
    for l in inp:
        if l in list(dd.keys()):
            dd[l]=dd[l]+1
    return dd
print('h')
print(dd)
print("saturday morning")
import my
len(f)
len(f)
from datetime import datetime
some_date = datetime(2021, 12, 9, 12, 12, 23)
some_date
print(some_date.strftime('%c'))
now = datetime.now()
now
formatted_datetime_now = f"{now:%d-%B-%Y}"
print(formatted_datetime_now)
data
data
for a in data:
    print(a)
    
data[1]
type(data)
a=next(data)
a=next(data)
next(data)
type(data)
dir(data)
data.__next__
for a in data:
    print(a)
    
data
for a in data:
    print(a)
    
len(data)
data
for a in data:
    print(a)
    
for a in data:
    print(a)
    
square_list = [n** 2 for n in range(5)]
square_list
square_list
square_list
square_list[1]
square_generator = (n** 2 for n in range(5))
square_generator
for a in square_generator:
    print(a)
    
for a in square_generator:
    print(a)
    
square_generator = (n** 2 for n in range(5))
list(square_generator)
list(square_generator)
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
a=list(square_generator)
a
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
exi
k
files
col_print(k)
col_print(files)
k
col_print(k)
type(k)
files
f1
data
m=list(data)
m
from my import *
col_print(m)
for a in m:
    print(a)
    
datal
datal[1]
time
time
time.year
type(type)
type(time)
time(time)
time(time)
time(12)
time.ctime(time=(os.stat(datal[1]).st_atime))
myTime(m[1])
myTime(m[1])
myTime(m[1])
m[1]
print(m[1],myTime(m[1]))
print(m[1],myTime(m[1]))
n
col_print(n)
g=[]
g.append([2,3])
g
g.append([2,3])
g
g.append(['tome',3])
g
n[1]
col_print(n)
n[1][1]
n
n[5]
for x in n:
    print(x)
    
for x in n:
    print(x[0])
    
cp=col_print
cp(m)
m
n
list(n)
cp(list(n))
v=list(n)
v
m
cp(m)
v=list(str(n))
v
v=list(list(n))
v
dir_name=r'.'
data = (os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
d=list(data)
d
data
data.next
data
d
[x for x in d not 'x' in x]
data
data
dir(data)
for n in data: print(n)
for n in data: print(n)
data
[x for x in data if not 'x' in x]
['j' +x for x in data if not 'x' in x]
'jim'.replace('i','x')
'\\'.replace('\\','/')
[x.replace('\\', '/') for x in data if not 'x' in x]
datal
with open(datal[1]) as f:
print(f)
with open(datal[1]) as f:
    print(f)
    
datal
sorted(datal)
datal
m
n = []
n
datal
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],8)
lnl(datal[1],8)
lnl(datal[1],18)
data[0:2]
datal[0:2]
lnl(datal[1],18)
lnl(datal[1])
list(lnl(datal[1]))
lnl(datal[1])
fname
data
datafiles=[x.replace('\\', '/') for x in data if 'x' in x]
datafiles
mn=[x.replace('\\', '/') for x in data if 'x' in x]
mn
mn[1]
lnl(mn[1])
lnl(mn[0])
files = glob.glob("*.py")
import glob
t=[]
t.append("*"*3)
t
t.append(f"*"*3)
t
t
t
t
files[1]
lnl(files[1])
a
lnl(files[1])
ab
ab=[]
lnl(files[1])
lnl(files[1])
t
t
k='jim \n"
k='jim \n'
k.strip()
k
t
t[1]
t.join("")
type(t)
str(t)
t
t
t
lof
lof
import my
cl('jim')
my.cl('jim')
dir(my)
import my
dir(my)
import my
dir(my)
cl("jim")
my.cl("jim")
dir(my)
import glob
t
files
my.cl(files)
lof
lof
with open(lof[4], 'r') as f:
    for line in f.readlines():
        print(line)
        
lof
lof
for count, value in enumerate(lof):
    print(count, value)
    
lofg = (filter(os.path.isfile, glob.glob(dir_name + "/**/*", recursive=True)))
type(lofg)
next(lofg)
next(lofg)
len(lofg)
dir(lofg)
logf.__sizeof__
lofg.__sizeof__
lofg.__sizeof__()
data
ax=list(sorted(data))
ax
type(data)
type(data)
data
n=['a','x','b']
sorted(n)
n
type(data)
type(data[1])
sorted(data)
data[1]
data[1][1]
type(data[1][1])
type.ctime(data[1][1])
time.ctime(data[1][1])
time.ctime(data[1][1]).format('%a')
time.ctime(data[1][1]).format('%x')
time.ctime(data[1][1]).strftime("%a %m %y")
now
type(now)
now.strftime("%a %m %y")
time.ctime(cdate)
f"{now:%d-%B-%Y}"
f"{time.ctime(cdate):%d-%B-%Y}"
time.ctime(cdate)
type(cdate)
type(time.ctime(cdate))
data[1]
data[1][3]
data[1][2]
lat(data[1][2])
import stat
lat(data[1][2])
time.ctime(lat(data[1][2]))
time.ctime(lat(data[1][2])).strftime("%a %m %y")
modTimeInSeconds
modTime
type(modTimeInSeconds)
time.ctime(modTimeInSeconds)
cdate
modet
print(modet)
modet
modet
time
time.ctime(cdate)
type(time.ctime(cdate))
int(time.ctime(cdate))
a=time.ctime(cdate)
a
type(a)
int(a)
type(modTimeInSeconds)
int(modTimeInSeconds)
cdate
cdate
str(cdate)
str(cdate).strftime('%d/%m/%Y')
type(modTimeInSeconds)
float(cdate)
float(cdate).strftime('%d/%m/%Y')
a=time.ctime(cdate)
a
l
v
v.json
v.json()
r
r.text
r.html
r.json()
import my
cl(r.json())
my.cl(r.json())
f=r.json()
f
len(f)
str(f)
list(r.json())
today = datetime.date.today()
today
type(o)
o
i=100*100
i
f"{i:_d}"
f"{o:_d}"
o
type(i)
o=int(o)
f"{o:_d}"
f"{o:%m}"
f"{o:%x}"
now
n=datetime.now()
from datetime import datetime
n=datetime.now()
n
int(n)
print(f'{now:%Y-%m-%d %H:%M}')
print(f'{n:%Y-%m-%d %H:%M}')
now
n
n+1
o
o +a
o +1
dti = datetime.datetime.fromtimestamp(o)
import datetime  
dti = datetime.datetime.fromtimestamp(o)
dti
dti = datetime.datetime.fromtimestamp(o)
dtis = dti.strftime( "%Y - %m - %d  %H : %M : %S")  
dtis
dti.strftime( "%x")  
cti(o)
cdate
cdate
cti(cdate)
cti(cdate)
print('G','F', sep='\t', end='')
data
data
from tabulate import tabulate
print(tabulate(data))
a=[]
a.append(data)
a
print(tabulate(a))
a=[]
for n in data:
    a.append(n)
    
n
data
for a in data:
    print(a)
    
n=[]
for a in data:
    print(a)
    n.append(a)
    
n
for a in data:
    print(a)
    n.append([a])
    
    
n
n=[]
for a in data:
    print(a)
    n.append([a])
    
    
n
print(tabulate(a))
print(tabulate(n))
"jim".split('')
"jim".split()
"jim steffes".split()
lt
data
data[1].split('#')
data[1].split('#').join()
data[:5]
data[2:5]
enumerate(data[2:5])
for f in enumerate(data[2:5]):
    print(f)
    
"jim".split()
data
data[1].split(" ")
''.join(data[1].split(" "))
' '.join(data[1].split(" "))
data[1].split(" ")
' '.join(data[1].split(" "))
list='shoat
tubal
eclat
olam
stat
gnar
babai
scoad
type(list)
list.split('\n')
list
' '.join(list)
list2
list
mlist
mlist = sorted(list, key=lambda x: x[-2])
list
list
mlist
mlist
list
mlist
data
list2
' '.split(list2)
list2
list2.split(' ')
' '.join(list2.split(' '))
'aaaa'.replace('a','b')
j='aaaaa'
j.replace('a','x')
j
j[1]
data[1]
data[1].split(' ')
data[1].split(' ')[3]
a=re'\n'
k='''I have a list of words where I want to sort based on their last (2,3) letters. In other words if we say (Sort by Words ending with)'''
k
k.split()
k.split()[8]
w
' '.join(w)
w
sort(w)
mlist
mlist
h
h=(w, lambda x: x[-1:])
w
h
data
data.split(' - ')
data
str(data)
len(str(data))
data[1]
data[1][6]
n=[]
for t in data:
    n.append(t.split(' '))
    
n
for a in n:
    print(a[3])
    
n
n[1][1]
data
n
n.sort(key=lambda x: x[0])
n
n.sort(key=lambda x: x[1][8])
n
n.sort(key=lambda x: x[1][2])
n
for a in n:
    print(a[1][2])
    
for a in n:
    print(a[1][1])
    
    
n
j=[2, 3, 7, 43, 13, 139, 3263443]
len(j)
sum(j)
for a in range(len(j)):
    print(a)
    
for a in range(len(j)):
    print(j[a])
    
    
for a in range(len(j)-1):
    print(j[a]*j[a+1])
    
    
for a in range(len(j)-1):
    print(f"j[a]*j[a+1]")
    
    
    
j
import numpy
numpy.prod(j)
j
aa=numpy.prod(j)
aa
multiplyList(j)
factors=[]
factors
multiplyList(j)
factors(multiplyList(j))
kk=multiplyList(j)
factor(kk)
factor=[]
factor(kk)
num=multiplyList(j)
import sys
a = range(1,1000)
print(a)
for b in a:
    print(b)
    
b=xrange(1,100)
x = xrange(1,10000)
import pydoc
pydoc.pager("SOME_VERY_LONG_TEXT") 
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
data
list(data)
list(data)
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data + data
t=data+data
t
pydoc.pager(t)
t
pydoc.pager(str(t))
len(t)
t=t+t
t
len(t)
t=t+t
t=t+t
len(t)
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t
len(t)
subprocess.call(['dir'+longStr+'" | more'], shell=True)
longStr
datetime.now()
from datetime import datetime
datetime.now()
today=datetime.now()
today.strftime("%H")
today.strftime("%Y")
dir(datetime)
a=dir(datetime)
a
data
data[1].find('.')
data[1].find('t')
data[1].find('\.')
data[1].findall('\.')
d
import re
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
print((re.split(r'\s','we are splitting the words')))
print((re.split(r's','split the words')))
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
r1
r1 = re.findall(r"^\w+", data[1])
r1
data[1]
data[3]
data
os.chdir(r'c:\you')
next(os.walk('.'))[1]
next(os.walk('.'))[1]
a=next(os.walk('.'))[1]
a
b=[e for e in a]
b
e
a[1]
a[1].match('car')
a[1].index('car')
a[1].index('a')
a[1].index('r')
a[1].index('r')
a=whos
a
a
a
z
l=range(0,5)
l
for a in l:
    print(a)
    
l=list(range(0,5))
'car'.find('c')
'car'.find('car')
b=[e for e in a if 'w' in e]
a
a=next(os.walk('.'))[1]
b=[e for e in a if 'w' in e]
b
b=[e for e in a if 'wy' in e]
b
b=[e for e in a if  re.search(r"w",e)]
b
a
b=[e for e in a if  re.search(r"p.*y",e)]
b
os.chdir('/docker')
os.chdir('docker')
os.listdir()
os.listdir('..')
os.listdir()
os.listdir()[1]
sys.modules.keys()
c=sys.modules.keys()
c
col_print(c)
type(c)
list(c)
list(sys.modules.keys())
dir()
dir(col_print)
col_print(dir())
col_print("jim")
help(col_print)
col_print(str("jim"))
col_print(str(dir()))
col_print(str(dir()))
import my
col_print(str(dir()))
help(col_print)
import my
col_print(str(dir()))
dir(col_print)
for a in dir(print):
    print(a)
    
a
a=str(dir())
a
a.split(())
list(a)
a=str(dir())
type(a)
a.split(())
a.split()
b=list(a.split())
b=a.split()
type(b)
len(b)
b[1]
n=[]
for g in b:
    n.append(g)
    
g
b
g[1]
g[6]
for g in b:
    n.append(g)
    
b
len(b)
for t in b:
    g.append(t)
    
n=[]
for t in b:
    n.append(t)
    
n
dir(os)
for a in dir(os):
    print(a)
    
b=dir(os)
b
out
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
out = [l[i: i+4] for i in range(0, len(l), 4)]
out = [l[i: i+1] for i in range(0, len(l), 4)]
out
out = [b[i: i+1] for i in range(0, len(b), 4)]
out
col_print(b)
help(os.cpu_count)
os.cpu_count()
col_print(b)
b=dir(os)
b=dir(os)
col_print(b)
b
dir()
os.chdir(r'\you\docker')
os.listdir()
os.listdir()[1]
import re
str1
fi=os.listdir()
fi
int(8)
int(j8)
int('j8')
fi
numlists = ["5","50","7","51","87","97","53"]
sorted(numlists)
numlists
results
sorted(results)
list(map(int,results))
list(map(str,results))
list(map(int*3,results))
list(map(a*3,results))
results
list(map(lambda a: a*3,results))
list(map(lambda a: a*30,results))
fi
matchObj
matchObj = re.match( r'dogs', line )
matchObj
line
re.match( r'dogs', line )
re.match( r'd', line )
re.search( r'd', line )
re.search( r'x', line )
a
fi
fi
fi[1]
fi.sort(key=lambda f: int(re.sub('\D', '', f)))
fi
fi[::-1]
for p in fi[::-1]:
    print(p)
    
fi
f1[1].replace('a','x')
fi[1].replace('a','x')
f1[1]
fi
re.sub('.*', 'xxx', fi[1])
fi[1]
re.sub('\D.*', 'xxx', fi[1])
re.sub('\D', 'xxx', fi[1])
re.sub(r'\D', 'xxx', fi[1])
re.sub(r'\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1],1)
re.sub(r'\s', '_', fi[1],1)
re.sub(r'\s', '_', fi[1])
re.sub(r'.*', '_', fi[1])
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility
import re
regex = r"[\s\S]*?(?=Course)"
test_str = "Docker Crash Course #2 - Installing Docker.mp4"
subst = "New "
# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)
if result:
        print (result)
        
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
:x
import fil
dir()
dir(fil)
dir(fil.os)
d=dir(fil.os)
d
print(d)
dir()
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
dir()
dir(os)
os.terminal_size()
dir_path=(r'c:\you\docker')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
data[0]
Path('new').touch
import touch
import touch
from touch import touch
import touch
test_str
import re
fi
f
fi
for x in fi:
    touch.touch(x)
    
fi
for x in fi:
    print(x)
    touch.touch(x)
    
for x in fi:
    time.sleep(1)
    print(x)
    touch.touch(x)
    
fi[1]
clipboard.copy(str(fi[1]))
clipboard.copy(str(fi[1]))
x
regex = r".*(?=Course ).*#"
subst = ""
result = re.sub(regex, subst, x, 0, re.MULTILINE)
result
result.replace(' ', '_')
result=result.replace(' ', '_')
result
result.replace('-_','')
data
fi
EXIT
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
f
data.sort(key=lambda f: int(re.sub('\D', '', f)))
data
len(data)
data.remove(14)
data
enumerate(data)
for f in enumerate(data):    print(f)
data.remove(13)
dat
data
data[13]
data.remove('xxx')
data
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
mk='''I understand why Sublime doesn’t have this sorting option.'''.split()
mk
re.findall(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'ick them')
re.search(pattern, 'ick them')==True
if re.search(pattern, 'sick them'):
        print('yes')
        
if re.search(pattern, 'ick them'):
        print('yes')
        
re.search(pattern, 'ick them')==None
re.search(pattern, 'sick them')==None
pattern
re.search(data[0],'#')
data[0]
re.search(data[0],'is')
re.search('this','is')
re.search('#', data[0])
pattern='#'
dataf = filter(lambda x: re.search(pattern,x),data)
dataf
list(dataf)
for ff in filter(lambda x: re.search(pattern,x),data):
        print(ff)
        
data[0]
os.path.exists(data[0])
pattern = "^Dock"
import shutil
os.path.exists(data[0])
a
f
print(f"ok {ff}")
lens("jim")
lens("jim")
lens({"a"})
lens({a:2})
lens({"a":2})
min[-4,4,8]
min(-4,4,8)
st
def two(st):
        if len(st) > 2 and st[0] == st[len(st)-1]:
                    return "yes"
                        else:
                                    return "no"
two("jim")
two("mim")
two("im")
two('a')
two('aaa')
two(123)
two(12)
type("jim")
two(12)
[1,4].count(1)
[1,4,"a"].count("a")
[1,4].count("a")
lens(b)
lens(b)
data
type(data)
data
len(data)
data[1]
dir(data)
data.keys
data.keys()
dir()
import re
dir
dir()
a=dir()
a
col_print(a)
import tabulate as tabulate
dir_path = r"c:\you\docker\ch"
os.chdir(dir_path)
data = os.listdir(dir_path)
data
print(tabulate(data))
x=[("a",1)]
print(tabulate(x))
import tabulate as tabulate
print(tabulate(x))
dir(tabulate)
print(tabulate.tabulate(x))
print(tabulate.tabulate(data))
type(a)
a
x
type(x[1])
type(x[0])
data
tuples=[tuple(x) for x in data]
tuples
m=[]
for a in data:
    m.append(tuple(m))
    
m
type(data)
for a in data:
    print(a)
    
tuple(data)
print(tabulate.tabulate(tuple(data)))
data
m=[]
for g in data:
    m.append(g)
    
m
m=[]
for g in data:
    m.append([g])
    
    
m
print(tabulate.tabulate(m))
print(tabulate.tabulate(m))
m=[]
print(tabulate.tabulate(m))
data = os.listdir([dir_path, "January"])
data = [os.listdir(dir_path)]
data
data = os.listdir(dir_path)
data
data = ((os.stat(path), path) for path in data)
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
print(tabulate.tabulate(data))
data
data = list(((os.stat(path), path) for path in data))
data
((os.stat(path), path) for path in data)
((os.stat(path), path) for path in data)
list(((os.stat(path), path) for path in data))
((os.stat(path), path) for path in data)
print(((os.stat(path), path) for path in data))
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
for a in data:
        print(a)
        
data
data
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
print(tabulate.tabulate(data))
kk
print(tabulate.tabulate(kk))
kk
print(tabulate.tabulate(kk))
j=[[1],[1]]
print(tabulate.tabulate(j))
b
tuple(b)
c=3
d=[b[i:i+c] for i in range(0, len(b),c)]
d
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
5+4
_
_ +1
diff
diff.split('\n')
a='ppython'
a.split()
a.split(())
for s in a:
    print(s)
    
[x for x in a]
a.count('p')
set([x for x in a])
for a in set([x for x in a]):
    print(a)
    
for t in set([x for x in a]):
    print(t)
    
a='ppython'
for t in set([x for x in a]):
    print(t)
    
for t in set([x for x in a]):    print(t, a.count(t))
a
a='ppython'
for t in set([x for x in a]):    print(t, a.count(t))
a
set([x for x in a]).sort()
[1,3,1,8].sort()
dir(list)
[1,3,1,8].sort
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
cars = ['Ford', 'BMW', 'Volvo']
cars = ['Ford', 'BMW', 'Volvo'].sort()
cars
cars = ['Ford', 'BMW', 'Volvo']
cars.sort()
cars
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
ab
sorted(ab)
rl
rl
rl
x=sorted(w.split())
x
set(x)
x
sorted(x)
x
sorted(x)
import pydoc
pydoc.pager(x)
pydoc.pager(str(x))
print(x)
print(dir())
glob.glob('*.*')
sorted(glob.glob('*.*'))
import glob as glob
glob('*.*')
glob.glob('*.*')
fn(100000)
fn(100000000000000)


dir(__builitins__)
print(dir())
dir(_1)
type(_1)
print(dir())
dir(__builtins__)
print(dir(__builtins__))
dir(bin)
print(dir(__builtins__))
t
tl
import tabulate
print(tabulate.tabulate(tl))
tl
print("\t\tjim")
import datetime
tl
int("1"0)
int("1")
tl
tls
print(tabulate.tabulate(tls))
tls
tls
print(tabulate.tabulate(tls))
tl
tls
tls[3]
tls[3][2]
type(tls[3][2])
type(tls[3][:2])
tls[3][:2]
a=[10000,2000]
sorted(a)
int(1,200)
int(1)
tl
li
stn('88')
stn(fn('88'))
fn(1000000000000)
type(fn(10000000000))
a=123
b=str(a)
b
[char for char in b]
set("jimmm")
tuple("jimmm")
tuple("a")==tuple("a")
tuple("a")==set("a")
tuple("a")==tuple(set("a"))
def eq(n):
        return tuple(n)==tuple(set(n))
        
def eq(n,o):
        return tuple(n)==tuple(set(o))
        
eq(1,2)
set(a)
a
set(1,3)
set((1,3))
list(1)
list("jim")
list(1,23)
list(str(123))
eq(2,88)
set(tuple(1,3))
type(str(1,3,4))
str(34)
eq(1)
eq(8)
eq(888)
eq(8)
eq(899)
eq(888)
eq(888)
eq(8)
eq(891234)
eq(82)
eq(86)
eq(88)
eq(867)
eq(8)
eq(89)
set(1,3)
set([1,3])
set([1,3])==set([3,1])
eq(8)
eq(8)
eq(89234)
eq(892348)
eq("a")
eq("aa")
eq("ab")
len(888)
1+=1
chars
len(chars)
fact(8)
fact(8)
fact(8)
fact(8)
fact(8)
a=dir()
a
print(a)
print(a)
dir(quit)
print(a)
z=fact(8)
z
answer
def fac(n):
           return 1 if (n==0) else "not one"
           
fac(2)
fac(0)
fib(0)
fib(20)
fib(8)
fib(9)
fib(20)
fib(1)
fib(2)
fib(3)
fib(4)
fib(5)
fib(6)
fib(0)
fib(1)
fib(5)
fib(8)
for a in range(0,20):
        print(fib(a))
        
fnc
def fnc(n):
        return "{:,}".format(n)
        
dir(fnc)
print(dir(fnc))
import inspect
import tabulate
len(tab)
type(tab)
t='''When Buying the Dip Doesn’t Work: An Analysis of the Dot-com Crash'''.split()
t
[v.upper() for v in t]
[v.upper() + "  " for v in t]
[v[1] + "  " for v in t]
[v[0].upper() + "  " for v in t]
sorted(t)
sorted(t, key=t[2])
t
tab
import os
d=dir(os)
print(d)
type(d)
[x for x in d]
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
[x for x in d if d[0]!='_']
os.terminal_size()
os.terminal_size
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
fh('os')
u
fh('os')
u
fh('os')
fd
dir()
fh('sys')
fh('os')
fh('os')
fh('sys')
fh('tabulate')
dir(sys)
d='sys'
dir(d)
d
d=r'sys'
dir(d)
d
dir(sys)
dir(d)
dir(d)
dir(sys)
d
d
print(dir(d))
type(d)
d=[1,2]
print(dir(d))
vars(list).keys()
vars(sys.keys())
sys
u=dir(sys)
u
print(u)
k=sys
u=dir(k)
print(u)
r=range(10,20)
r
r=list(range(10,20))
r
d=dir()
dir(repr(d))
dir()
repr(d)
d
d
vars(d)
repr(dir())
k=repr(dir(os))
k
help('modules')
k="os"
dir(k)
type(k)
dir(repr(k))
k='''os'''
dir(k)
type(k)
dir(f"{k}")
k
k=r"os"
k
id(k)
a
a=os
dir(a)
type(os)
type(a)
fh(os)
fh(a)
u = dir(os)
print([x for x in u if u[0] != "_"])
u
u[0]
u[10]
u[10][0]
for a in enumerate(u):
    print(a)
    
for a in enumerate(u):
    print(a[1])
    
    
for a in enumerate(u):
    print(a[1][0])
    
    
    
"jim"[0]
u
print(u)
for g in u:
    print(u[0])
    
os[1]
for f in os:
    print(f)
    
dir(os)
fh(os)
help(os.path)
sys.version_info
import
import sys
sys.version_info
dir()
dir
dir()
a=dir()
[x for x in a]
[x for x in a x[0]!='_']
[x for x in a a[0]!='_']
[x for x in a x[0] =='_']
[x for x in a if x[0] =='_']
[x for x in a if x[0] !=='_']
[x for x in a if x[0] !='_']
a=dir(os)
a=dir(sys)
[x for x in a if x[0] !='_']
os.winver
sys.winver
print([x for x in a if x[0] !='_'])
dir
dir()
import os
dir()
print(dir)
print(dir())
import my
dir(my)
print(dir())
def d:
    print(dir())
dir(my)
dir(my.cl)
def dd():
    print(dir())
dd
dd()
print(dir())
dir(pasted_block)
dir(pasted_block)
dir(os)
import os
dir()
help(os)
os.chdir(python)
os.chdir('python')
today
print(today)
import tabulate
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([[f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"]])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
tar
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}","nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f"create date: {cti(cdate)} access date: {cti(adate)}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
rom tabulate import tabulate
table = [[‘Aman’, 23], [‘Neha’, 25], [‘Lata’, 27]]
print(tabulate(table), headers = [‘Name’, ‘Age’])
from tabulate import tabulate
table = [['Name', 'Age'], ['Aman', 23], ['Neha', 25], ['Lata', 27]]
print(tabulate(table, headers = "firstrow" ))
print(tabulate.tabulate(tar,headers=['a', 'b']))
import tabulate
print(tabulate.tabulate(tar,headers=['a', 'b']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} ",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates \t access']))
tar
string_nonASCII = " àa fuünny charactersß. "
string_encode = string_nonASCII.encode("ascii", "ignore")
string_decode = string_encode.decode()
print(string_decode)
dir()
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
import touch
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import re
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
import glob
files=glob.glob('*.*')
filex
filex
files
sorted(files, key=t[2])
sorted(files, key=files[2])
aa=list(range(0,10))
aa
import randome
import random
n=random.randint(0,20)
n
n
n
def ri():
    return random.randint(0,100)
ri()
ri()
ri()
[x for list(range(0,20) ) ]
[x for x in list(range(0,20) ) ]
[ri() for x in list(range(0,20) ) ]
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
l=[x for x in list(range(0,20) ) ]
l
l=[ri() for x in list(range(0,20) ) ]
l
sorted(l, reverse=True)
x=101
x[0]
x="jim"
x[1]
str(x)[0]
x=101
str(x)[0]
str(x)[1]
str(x)[5]
str(x)[5]
str(x)[3]
str(x)[2]
int(str(x)[2])
int(str(x)[len(x)-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
x
x=99999
int(str(x)[len(str(x))-1])
x=123489
int(str(x)[len(str(x))-1])
func = lambda x: int(str(x)[len(str(x))-1])
func(999983)
func(999983)
def ri():
    return random.randint(0,10000)
ri()
ri()
func(ri())
mm=[]
for a in range(0,20):
    mm.append(ri())
    
mm
sorted(mm)
sorted(mm, key=func)
print(sorted(mm, key=func))
mm=[]
for a in range(0,20):    mm.append([ri(), ri()])
print(mm)
sorted(mm, key=mm[1])
func2=lambda x: x[1]
sorted(mm, key=func2)
a=who
a=dir()
print(a)
[x for x in a ]
[x for x in a[0] ]
[x for x in a ]
[x[0] for x in a ]
[x for x in a if x[0] !='_']
print([x for x in a if x[0] !='_'])
def glbo():
    a=dir()
    print(a)
glbo()
print(dir())
class Shape:
    def __dir__(self):
        return ['area', 'perimeter', 'location']
s = Shape()
dir(s)
dir(s)
s.area
import re

test_list = ["Gfg34", "is67", "be3st", "f23or", "ge9eks"]

print("The original list is : " + str(test_list))

test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])

print("Strings after numerical Sort  : " + str(test_list))
test_list= glob.glob('*.*')
test_list
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
test_list
for a in test_list:
    print(a)
import touch
for a in test_list:
    print(a)
    touch.touch(a)
lt
touch.touch('9 - Images & Metadata.mp4')
touch('9 - Images & Metadata.mp4')
help(touch)
import touch

touch.touch(["info.txt", "data.txt", "apple.txt"])
import touch

touch.touch("x")
import touch

touch.touch(r"x")
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
import touch
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
data
data[0]
touch.touch(data[0])
data[0]
touch.touch(data[0])
touch(data[0])
import random
import glob
import re
import touch
import os
import sys
from pathlib import Path
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data[0]
Path(data[0]).touch()
Path('duh').touch()
os.chdir(r"c:\you\nextjs")
test_list= glob.glob('*.*')
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
for a in test_list:
    print(a)
    Path(a).touch()
import re
  
# initializing string
test_str = 'geeksforgeeks'
  
# printing original String
print("The original string is : " + str(test_str))
  
# using sub() to perform substitutions
# ord() for conversion.
res = (re.sub('.', lambda x: r'\u % 04X' % ord(x.group()), test_str))
  
# printing result 
print("The unicode converted String : " + str(res)) 
dir()
dis=lambda: print('jim')
dis
dis()
dis=lambda: print(dir())
dis
dis()
dis=lambda: print(dir(os))
dis()
dir(global)
dit=lambda: print(globals())
dit()
a=globals()
a
print(a)
[x for x in a if x[0] !='_']
a
dit
dit()
ds=[a for a in globals() if a[0]!='_']
ds
print(ds)
dir(In)
print(dir(ln))
def mm():
    ds=[a for a in globals() if a[0]!='_']
    print(ds)
mm()
help(os)
dir(os)
o=dir(os)
print(o)
mm()
dir(mm)
type(mm)
print(dir(mm))
import inspect
mm()
mm()
help(inspect)
print(dir(quit))
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a)
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.trim())
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.strip())
ce()
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name

user=User("joe smith")
dir(user)
user.name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
User.fname
dir(user)
user.fname
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
help(User)
dir(__main__)
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)

user=User("joe smith")
user.p()
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)
    def f(self):
        print(self.fname)

user=User("joe smith")
dir(user)
dir(user.name)
user.f()
u2=User("time ")
u2
user.f()
u2.f()
dit()
dir()
mm()
mm()
dir(mm)
help(pprint)
help(Class)
dir(__builtins__)
print(dir(__builtins__))
'hello'[1:3]
'222'.zfill(8)
def mySqrt(x):

    r = x
    precision = 10 ** (-10)
    
    while abs(x - r * r) > precision:
        r = (r + x / r) / 2
        
    return r
    
mySqrt(10)
mySqrt(10)*mySqrt(10)
dir()
mm()
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
m
for a in m:
    print(a)
    
m
for a in m:
    print(a)
    
g=r"this")
g=r"this"
g
g=r"\tthis"
g
g=r(dir())
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
for a in m:
    print(a)
    
for a in m:
    print(a)
m
m=p.finditer(s)
for a in m:
    print(a)
m=list(p.finditer(s))
m
len(m)
m[0]
m[0].group
m[0].group()
m[0].group()
t='''Inductive reasoning is a method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
t
p=re.compile(r'\d')
m=p.finditer(s)
m
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=''.join(s)
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=' '.join(s)
s
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\S{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
m
type(m)
' '.joint(m)
' '.join(m)
str(m)
p=re.compile(r'\w}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s
p=re.compile(r'\w')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bb')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\Bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'[s]')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[16]
s[16:20]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d+')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[128]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
sp=p.split(s)
sp
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d+')
sp=p.split(s)
s
sp
import glob
dirn=r'C:\projects\node\js\mm\public\img'
files=glob.glob(dirn)
print(files)
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(files)
files
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath.basename(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath.basename(f))    
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath(f))    
files
files[0]
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(head, tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}, {tail}")    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"touch {head}\{tail}")    
files
[os.path.split(i) for i in files]
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
fil
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
fil
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}{tail}")
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"{head}{tail}")
    # print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
file
fil
lst=list(range(1,5))
lst
lst=list(range(1,5,2))
lst
lst=list(range(1,10,2))
lst
lst=list(range(1,10,2))
b=[x*3 for x in lst]
b
lst
c=list(map(lambda x: x*40, lst))
c
n=pwd
import os
jim.replace('i', 'xxx')
'jim'.replace('i', 'xxx')
'\\\'.replace('\\','nnn')
'\\\'.replace('\\\','nnn')
'\\\'.replace('\\','')
import re

phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '\\',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, r'\\',phone_no)

print(result)
result
print(result)
[x for x in [1,2,34]]
[str(x) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]][0]
print([range(x,35) for x in [1,2,34]][0])
print(range(1,5))
for i in [range(x,35) for x in [1,2,34]][0]:
    print(i)
    
import os
import pathlib
import glob
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
files
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
y=[x for x in files]
y
y=[os.path.basename(x) for x in files]
y
y=[{os.path.basename(x)} for x in files]
y
print(\"")
print('"')
y=['"src": '+ {os.path.basename(x)} for x in files]
y=['jim' + {os.path.basename(x)} for x in files]
y=[('jim' + {os.path.basename(x)}) for x in files]
y=['jim' + str({os.path.basename(x)}) for x in files]
y
y=['jim ' + str({os.path.basename(x)}) for x in files]
y=['jim '  str({os.path.basename(x)}) for x in files]
y=['jim ' + str({os.path.basename(x)}) for x in files]
y
y=['src: "' + str({os.path.basename(x)}) for x in files]
y
y=['src":' + '"' + str({os.path.basename(x)}) for x in files]
y
y=[({os.path.basename(x)}) for x in files]
y
mm()
mm()
def cl(x):
    clipboard.copy(str(x))
mm()
y=[({os.path.basename(x)}) for x in files]
cl(y)
y=[({os.path.basename(x)}+'\n') for x in files]
y=[({os.path.basename(x)}) for x in files]
y
cl(y)
y=['"src":'+ str({os.path.basename(x)}) for x in files]
y
str(y)
y=['"src":{ " /img/'+ str({os.path.basename(x)}) for x in files]
y
y=['{"src": " /img/'+ str({os.path.basename(x)}+'"') for x in files]
y=['{"src": " /img/'+ str({os.path.basename(x)}) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"\n' for x in files]
y
cl(y)
mm()
print(f"header is {response.headers}")
h=response.headers
h
type(h)
h
for i in h:
    print(i)
    
h.Server
dir(h)
response.json()
js=response.json()
js
type(js)
h=response.headers.json()
js
js
len(js)
for a in js:
    print(a)
    
str(js)
js[1]
dir(js[1])
type(js[1])
js[1].created_at
js[1]['created_at']
for i in js:
    print(i.html_url)
    
for i in js:
    print(i)
    
js[1]['created_at']
for i in js:
    print(i['html_url'])
    
mm()
cl(y)
import my
for i in js:
    print(i['html_url'], i['updated_at'])
for i in js:
    print(f"{i['html_url']}, {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
ba=[]
for i in js:
    ba.append([f"{i['html_url']} \t {i['updated_at']}"])
ba
import tabulate
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{i['updated_at']}"])

print(tabulate.tabulate(ba))
ba
sorted(ba)
print(tabulate.tabulate(ba))
import datetime
js
cti(js[1]['created_at'])
js[1]['created_at']
type(js[1]['created_at'])
from datetime import datetime
date_string = '2021-12-31 15:37'
datetime = datetime.strptime(date_string, '%Y-%m-%d %H:%M')
print(datetime)
datetime = datetime.strptime(date_string, '%Y-%m-%d ')
print(datetime)
from datetime import date
today=date.today()
print(f"today is {today}")
today.day
today.month
type(today)
dir(today)
today.strftime("%a")
today.strftime("%a %d")
today.strftime("%a %d %M")
today.strftime("%a %d %B")
today.strftime("%a %B %d ")
today.strftime("%a %B %dth ")
today.strftime("%a %B %dth")
js[1]['created_at']
type())js[1]['created_at']
type(js[1]['created_at'])
date = datetime.datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date = datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date
def iso(d):
    return datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
iso(js[1]['created_at'])
date=iso(js[1]['created_at'])
date.strftime('%A %b %d, %Y at %H:%M GMT')
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')
date=iso(js[1]['created_at'])
data
date
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
    
js
js[1]
ba=[1]
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m/%d/%Y')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js[1]
type(js[1])
key_value ={}   
  
# Initializing the value
 key_value[2] = 56      
 key_value[1] = 2
 key_value[5] = 12
 key_value[4] = 24
 key_value[6] = 18     
 key_value[3] = 323
key_value
for i in js:
    print(i)
    
for i in js:
    print(f"{i} \n)
for i in js:
    print(f"{i} \n")
    
for i in js:
    print(f"{i} \n\n")
    
for i in js:
    print(f"{i[1]} \n\n")
    
for i in js:
    print(f"{i[created_at]} \n\n")
    
for i in js:
    print(f"{i['created_at']} \n\n")
    
js[1]
print(js[1])
len(js)
gl
for i in js[0]:
    print(i)
    
[x for x in js]
[x.['git_url'] for x in js]
[x['git_url'] for x in js]
[x+ x['git_url'] for x in js]
[x for x in js[1]]
str([x for x in js[1]])
cl(str([x for x in js[1]]))
import my
my.cl(str([x for x in js[1]]))
after:2020
[x['name'] for x in js[1]]
[x['name'] for x in js]
[x['name'] + x['description'] for x in js]
[(x['name'] , x['description')] for x in js]
sorted(js)
js
type(js)
str(js)
js[1]
sorted(js)
sorted(js.items())
sorted(js.topics())
sorted(js['watchers'])
sorted(js[1])
dict
dict[3]
for i in dict:
    print(i)
    
dict[3]
d = {'Red': 1, 'Green': 2, 'Blue': 3} 
d[1]
d['red']
d
for a in d:
    print(a)
    
d.items()
for a in d.items():
    print(a)
    
for a in d.items():
    print(type(a))
    
for a, b in d.items():
    print(a, b)
    
for a, b in d.items():
    print(a,'is', b)
    
js
js[1]
js[1]['forks']
del js[1]['forks']
js[1]
color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}
fruits = {}
fruits["apple"] = 1
fruits["mango"] = 2
fruits["banana"] = 4
fruits
'apple' in fruits
len(fruits)
js[1]
type(js)
for i in js:
    print(type(i))
    
newlist = sorted(js, key=lambda d: d['name']) 
newlist
for a in newlist:
    print(a['name'])
    
newlist
for a in newlist:
    print(a['name'])
    
for a in newlist:
    print(a['name'], a['date_created'])
    
import my
mm()
dir(my)
type(js)
len(js)
type(js[1])
j=(js[1])
j
for i in j:
    print(i)
    
enumerate(j)
list(enumerate(j))
cl(str(list(enumerate(j))))
my.cl(str(list(enumerate(j))))
for i in js:
    print(i['name'])
for i in js:
    print(i['name'], i['git_commits']))
for i in js:
    print(i['name'], i['git_commits'])
    
for i in js:
    print(i['name'], i['created_at']))
for i in js:
    print(i['name'], i['created_at'])
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m-%d-%y')
for i in js:
    print(i['name'], iso(i['created_at']))
import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
from datetime import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
for i in js:
    print(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[0]) 
newlist
newlist = sorted(s, key=lambda d: d[2])
newlist
yesterday = date.today() - timedelta(days=1)
import datetime as date
yesterday = date.today() - timedelta(days=1)
datatime.today()
datetime.today()
date=datetime
yesterday = date.today() - timedelta(days=1)
yesterday = date.today() - date.timedelta(days=1)
yesterday = date.today() - datetime.timedelta(days=1)
dir(datetime)
from datetime import timedelta
yesterday = date.today() - timedelta(days=1)
yesterday
yesterday.strftime('%A %b %d, %Y at %H:%M ')
yesterday = date.today() - timedelta(years=1)
yesterday = date.today() - timedelta(year=1)
yesterday = date.today() - timedelta(days=20)
yesterday.strftime('%A %b %d, %Y')
yesterday = date.today() - timedelta(days=1)
today = date.today()
tomorrow = date.today() + timedelta(days=1)
date_list =[today, tomorrow, yesterday]
date_list
sorted(date_list)
s
s[0][2]
datetime = datetime.strptime(s[0][2], '%Y-%m-%d ')
datetime = datetime.strptime(s[0][2], '%m-%d-%y ')
datetime.strptime('07/28/2014 18:54:55.099', '%m/%d/%Y %H:%M:%S.%f')
s[0][2]
datetime = datetime.strptime('03-02-22', '%m-%d-%y ')
datetime = datetime.strptime('3-2-22', '%m-%d-%y ')
from datetime import datetime
date_time_str = '13/03/21 06:33:13'

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y %H:%M:%S')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
date_time_str = '13/03/21 '

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y ')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
s[0][2]
type(s[0][2])
datetime.strptime(s[0][2], '%m/%d/%Y %H:%M:%S.%f')
type(s[0][2])
s[0][2]
datetime.strptime('13/03/21 ', '%m/%d/%Y')
datetime.strptime('13/03/21 ', '%m/%d/%y')
datetime.strptime('13/03/21', '%m/%d/%y')
datetime.strptime(r'13/03/21', '%m/%d/%y')
datetime.strptime('13/03/21', '%d/%m/%y')
datetime.strptime('13-03-21', '%d-%m-%y')
datetime.strptime(s[0][2], '%d-%m-%y')
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
    
s[1]
def ds(x):
    return datetime.strptime(x, '%d-%m-%y') #good
    
s[1][1]
ds(s[1][1])
def ds(x):
    return datetime.strptime(x, '%m-%d-%y') #good
    
ds(s[1][1])
s=[]
for i in js:
    s.append([i['name'], ds(iso(i['created_at'])), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[1]) 
newlist
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"], f"{ds(iso(i['updated_at']))}")

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}", f"{ds(iso(i['updated_at']))}"])
ba
nl = sorted(ba, key=lambda d: d[2]) 
nl
cp(nl)
dir(my)
my.cl(da)
my.cl(ba)
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
l=[1,4,5]

def tl(li):
    for x in li:
        a+=x 
    return a
tl(l)
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a+=x 
    return a
tl(l)
tl([9,9,9,])
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
def tc(li):
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
def tc(li):
    print(type(li))
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
a
a=3
a*=8
a
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a*=x 
    return a
tl(l)
l
tl(l)
l=[1,4,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
l=[5,5,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
max([1,4,5])
def m(y):
    return max(y)
m(l)
import random as random
n=random()
import random as random
n=random.random()
n
for in range(10)"
for i in range(10):
    print(i)
    
for i in range(10):
    print(random.random)
    
for i in range(10):
    print(random.random())
    
import random
randomlist = []
for i in range(0,5):
n = random.randint(1,30)
randomlist.append(n)
print(randomlist)
import random
randomlist = []
for i in range(0,5):
    n = random.randint(1,30)
    randomlist.append(n)
print(randomlist)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return y
mi(rnl)
rnl
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
n = random.randint(1,3000)
n
n
n
[x for x in range(20)]
[random.randint(1,3000) for x in range(20)]
hasattr(str, '__iter__')
hasattr(float, '__iter__')
hasattr(list, '__iter__')
hasattr('jim', '__iter__')
gen_exp = (x ** 2 for x in range(10) if x % 2 == 0)
gen_exp
gen_exp[1]
gen=(random.randint(1,3000) for x in range(20))
gen
for a in gen:
    print(a)
    
for a in gen:
    print(a)
    
for l in "jim":
    print(l)
    
[jim steffes]
['jim']
a=['jim']
a
print(a)
[a for a in "bill")
[a for a in "bill"]
[a for a in "bill" if a='i']
[a for a in "bill" if a=='i']
[a for a in "bill" if a>'i']
[for b in range(50)]
[b for b in range(50)]
[b for b in range(50) if b%2!=0]
[b for b in range(50) if b%3!=0]
[b for b in range(50) if b%3=0]
[b for b in range(50) if b%3==0]
matrix = [[1, 2], [3,4], [5,6], [7,8]]
[a for a in matrix]
len(matrix)
[[row[1] for row in matrix]]
[[row[2] for row in matrix]]
[[row[0] for row in matrix]]
matrix
fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True, figsize=(12,4))
sns.countplot(dice_1, ax=ax1)
sns.countplot(dice_2, ax=ax2)
import os
pipe=os.popen("dir *.md")
print (pipe.read())
import os
pipe=os.popen("dir *.*")
print (pipe.read())
os.chdir(r"c:\twit")
pipe=os.popen("exiftool -j twit0877.mp3")
print (pipe.read())
pipe=os.popen("exiftool -j twit0877.mp3")
pr=(pipe.read())
print (pipe.read())
pr
print(pr)
type(pr)
pr.split(",")
pr.replace('\n','')
pr.replace('\n','').split(',')
pr.replace('\n','').split(',')[2]
mm()
import my
mm()
prl=pr.replace('\n','').split(',')
prl
type(prl)
type(prl)[1]
prl[1]
prl[2]
import glob
for a in glob.glob('.'):
    print(a)
    
for a in glob.glob('*.*'):
    print(a)
    
[x for x in glob.glob('*.*') x]
[x for x in glob.glob('*.*')]
[x for x in glob.glob('*.*') if x.startswith('B')]
[x for x in glob.glob('*.*') if x[2]]
[x[2] for x in glob.glob('*.*') ]
'jim'.split('i')
[x.split(' ') for x in glob.glob('*.*') ]
[x.split(' '[3]) for x in glob.glob('*.*') ]
[x.split(' ')[3] for x in glob.glob('*.*') ]
[x.split(' ')[0] for x in glob.glob('*.*') ]
[x.split(' ')[2] for x in glob.glob('*.*') ]
f=glob.glob('*.*')
f
[len(a) for a in f]
[a.split(' ') for a in f]
[len(a.split(' ')) for a in f]
def p(n):
    n.split(' ')
    
[len(p(a)) for a in f]
p('th is')
def p(n):
    return n.split(' ')
    
p('th is')
[len(p(a)) for a in f]
[a[3] for a in f if p(a)>3] 
[a[3] for a in f if p(a)=3]
[a[3] for a in f if p(a)==3]
f[1]
p(f[1])
[a[3] for a in f if len(p(a))>=3]
[p(a)[3] for a in f if len(p(a))>=3]
import os
from sys import exit
from os import system, name


from mido import MidiFile
system('cls')

mid = MidiFile('let.mid', clip=True)
# mid2 = MidiFile('legend.mid', clip=True)
mm()
mid
type(mid)
for x in mid:
    print(x)
    
for x in mid[0:5]:
    print(x)
    
l=list(mid)
l[0:5}
l[0:5]
l[0:25]
len(l)
mid
mid.tracks
del mid.tracks[2]
mid.trackss
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
del mid.tracks[2]
mid.tracks
for x in list(mid.tracks):
    print(x)
    
enumerate(list(mid.tracks))
list(enumerate(mid.tracks))
del mid.tracks[3:5]
list(enumerate(mid.tracks))
del mid.tracks[1:11]
list(enumerate(mid.tracks))
mid.save('letmy.mid')
list(enumerate(mid.tracks))
#!/usr/bin/env python
"""
Create a new MIDI file with some random notes.

The file is saved to test.mid.
"""
from __future__ import division
import random
import sys
from mido import Message, MidiFile, MidiTrack, MAX_PITCHWHEEL

notes = [64, 64+7, 64+12]

outfile = MidiFile()

track = MidiTrack()
outfile.tracks.append(track)

track.append(Message('program_change', program=12))

delta = 300
ticks_per_expr = int(sys.argv[1]) if len(sys.argv) > 1 else 20
for i in range(4):
    note = random.choice(notes)
    track.append(Message('note_on', note=note, velocity=100, time=delta))
    for j in range(delta // ticks_per_expr):
        pitch = MAX_PITCHWHEEL * j * ticks_per_expr // delta
        track.append(Message('pitchwheel', pitch=pitch, time=ticks_per_expr))
    track.append(Message('note_off', note=note, velocity=100, time=0))

outfile.save('test.mid')
import subprocess
print(subprocess.run("echo Hello World", shell=True))  
import subprocess
print(subprocess.run("ex", shell=True))
import re
a="Full React Tutorial #26 - Reusing Custom Hooks.mp4"
print(re.sub('.*#', '', a))
import glob
test_list= glob.glob('*.*')
print(f'glob is {test_list}')
import glob
test_list= glob.glob('#')
print(f'glob is {test_list}')
import glob
import re
reg='#'
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file)
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', ''))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file, re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}\', \'{re.sub('.*#', '', file)}\'")
        
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\', \'{re.sub('.*#', '', file)}\'")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc=[]
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        sc.append(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc
str(sc)
for a in sc:
    print(a)
    
with open('filename.txt', 'w') as f:
    for k in sc:
        print(k, file=f)
time="12"
min="30"
t=f"{time}+{min}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
2*60
time=int("12")
min=int("30")
t=f"{time*60}+{min}"
print(t)
time=int("12")
min=int("30")
t=f"{(time*60)+ min}"
print(t)
start=int(input("start: "))
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
print(spl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0]*60))+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    despl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=(start-end)*-1
print(end)
import glob
filelist=glob.glob('*.*')
filelist
type(filelist)
import re                                  # Add the re import declaration to use regex
reg = re.compile(r'py$')                    # Compile the regex
test = list(filter(reg.search, filelist))      # Create iterator using filter, cast to list 
test
test
type(test)
test[0]
test = list(filter(reg.search, filelist))[0]
test
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
type(content)
content
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
content
filename
type(content)
for line in content:
    print(line),
with open('j.py') as f:
    content = f.readlines()
content
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    content = f.readlines()
content
content[1:4]
temp = open(filename,'r').read().splitlines()
temp
import glob
filelist=glob.glob('*.*')
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    # content = f.readlines()
    content = open(filename,'r').read().splitlines()
    
content
str(content)
content
non_empty_lines = [line for line in content if line.strip() != ""]
ne = [line for line in content if line.strip() != ""]
ne
str(ne)
for s in ne:
    print(s)
    
filelist=glob.glob('*.*')
filelist
def stx(n):
    return f'{n} is nothing'
    
stx("p")
def addition(n):
    return n + n
  
# We double all numbers using map()
numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
result = map(stx, numbers)
result
result
list(result)
def stx(n):
    return f'{n} \'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/{n}\'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/img/{n}/" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
result=['jim']
result.append['tom')
result.append['tom']
result=['jim']
type(result)
result.append['tom']
result.append('tom')
result
result += "mike"
result
result += ["mike"]
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
print(result)
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
result
join(result)
''.joint(result)
''.join(result)
'\n'.join(result)
s='\n'.join(result)
with open('out.py') as f:
    f.write(s)
    
with open('out.py',mode="wt") as f:
    f.write(s)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
with open('out.py',mode="wt") as f:    f.write(s)
import inspect
a=1
inspect(a)
a
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
    
f(2)
a=f(1)
a
a(5)
f
f()
inspect(f)
i
for a in i:
    print(a)
    
a
a(8)
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
a=f(1)
a
a(8)
x = "hello"

#if condition returns False, AssertionError is raised:
assert x == "goodbye", "x should be 'hello'"
x
assert x=="hello"
assert x=="hellos"
import glob
files = glob.glob("*.*")
for f in files:
    print(f)
files
import re
re.match("j","jim)
for f in files:
    print(re.split(r"\#",f))
    
for f in files:    print(re.split(r"\#",f))
for f in files:    print(re.split(r"\#",f)[1])
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+",xx)
print(r1)
r1
if (r1):
    print(r1)
    
if (r2):
    print(r1)
    
r1 = re.search(r"^\j","jimxx")
re=r""
r1 = re.search("jimxx")
import glob
import re
files = glob.glob("*.*")
z
print(i for i in files)
files
print(list(i for i in files))
print(list(i for i in files if re.search(r"s",i)))
import os
os.chdir(r'C:\you\memgame')
files = glob.glob("*.*")
print(list(i for i in files if re.search(r"#",i)))
for f in (list(i for i in files if re.search(r"#",i))):
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f)
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}"}
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
    print(re.split(r"\#",f)[1])
    os.rename(f,re.split(r"\#",f)[1]) 
ip = input("Ip Address: ") or "127.0.0.1"
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(dir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"s",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\d',f)[1]}")
for f in (list(i for i in files if re.search(r"\\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\\d',f)[1]}")
print(f"really show this {{")
print(f"\\")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'd',f)[1]}")
    
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
plt.plot(x,y)
plt.show()
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt 
    
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
z = np.cos(x)
plt.plot(x,y,x,z)
plt.show()
import glob

files=glob.glob('*.*')
print(files)
import glob

files=glob.glob('*.*')
print(files)


import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'c:\you\*.*'
res = glob.glob(dir_path)
print(res)
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'C:\projects\node\python'
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'.'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*p'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.py'
res = glob.glob(dir_path)
print(res)
lt
dir_path = r'c:\you\*'
res = glob.glob(dir_path)
print(res)
type(res)
import json
f=open('a.json')
data=json.load(f)
data
data['fulltile']
data[1]
type(data)
data.keys
data.keys()
data['id']
x=data.keys()
x
x[3]
x=list(data.keys())
x
[n + 'this' for n in x]
[n + 'this' for n in x]
['<div class=\"n\"' for n in x]
['<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n} </div>' for n in x]
y=[f'<div class=\"n\" {n} </div>' for n in x]
y
join(y)
import re
s="Specify where the variable comes from"
re.split(r'\s',s)
' '.join(x)
x
' '.join(y)
'\n '.join(y)
x
x
y
data['fulltitle']
lt
path_to_file/person.json
import json


with open('a.json', 'r') as f:
  data = json.load(f)
print(data)
data.keys()
print(json.dumps(data, indent = 4, sort_keys=True))
print(json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True)
s
import clip
import clipboard
s
clipboard.copy(str(s))
s[1]
s['fulltitle']
type(s)
type(data)
data['fulltitle']
import json
import clipboard
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
fulltitle
description
m=fulltitle+'.mp3'
m
import touch
'This is first line'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    pass
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    fp.write(description)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write(text)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
# dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
full=dir+'/'+fulltitle+'.mp4'
Path(y).touch
Path('y').touch
a=pwd
foo = "a\c\d" # example string with backslashes
foo
foo = r"a\c\d" # example string with backslashes
foo
foo.replace('\\', " ")
o
print(0)
print(o)
print(o)
p=o+'\a'
p
p=o+'a'
p
p=o+'x'
Path(x).touch()
o
Path(o).touch()
o
Path(o).touch()
Path('x').touch()
o
p
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
full
path(full).touch()
Path(full).touch()
os.chdir('\mnt')
os.chdir('\\mnt')
os.chdir('/mnt')
os.chdir('//mnt')
import os
os.chdir('mnt')
os.chdir('..')
os.chdir('c:\you')
os.chdir('c:\you\nn')
os.chdir('c:\you\\nn')
path('Firebase - Back to the Basics.mp4').touch()
Path('Firebase - Back to the Basics.mp4').touch()
import path
from pathlib import Path
Path('Firebase - Back to the Basics.mp4').touch()
lt
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
print(full)
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
Path(full).touch()
Path('c:\\all'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path(r'CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4').touch()
full
Path('c:\\all\\filex').touch()
full
clipboard.copy(str(full))
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
lt
import subprocess

list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
mcmd="yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 &
"
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 & '''
mcmd
import os
m='''ls -a'''
mo=os.system(m)
mo
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/watch?v=SLfhMt5OUPI -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
mo
mo
import subprocess
from pathlib import Path
import json
# import touch
import clipboard
import os
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print('finish')
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print(mcmd)
print('finish')
yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 &
import subprocess
exit_code = subprocess.call('./practice.sh')
print(exit_code)
lt
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
args = ["ping", "www.google.com"]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
args=[
    "yt-dlp",
    "https://www.youtube.com/shorts/hh5EwXkf4Z8"
]
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process
args=[ "yt-dlp", "https://www.youtube.com/shorts/hh5EwXkf4Z8" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args=[ "yt-dlp" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
import sys
result = subprocess.run([sys.executable, "-c", "print('ocean')"])
print(subprocess.run("yt-dlp", shell=True))  
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
import json

import yt_dlp
from yt_dlp.postprocessor.common import PostProcessor


class MyLogger:
    def debug(self, msg):
        # For compatability with youtube-dl, both debug and info are passed into debug
        # You can distinguish them by the prefix '[debug] '
        if msg.startswith('[debug] '):
            pass
        else:
            self.info(msg)

    def info(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


class MyCustomPP(PostProcessor):
    def run(self, info):
        self.to_screen('Doing stuff')
        return [], info


def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')


ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.add_post_processor(MyCustomPP())
    info = ydl.extract_info('https://www.youtube.com/watch?v=BaW_jenozKc')
    pri
import yt_dlp
import subprocess
subprocess.call('dir', shell=True)
import subprocess
subprocess.call('yt-dlp', shell=True)
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
print(subprocess.run("ls", shell=True))
print(subprocess.run("ls .", shell=True))
print(subprocess.run("whereis yv.sh", shell=True))
print(subprocess.run("whereis", shell=True))
print(subprocess.run("pwd", shell=True))
subprocess.run("pwd", shell=True)
s=subprocess.run("pwd", shell=True)
s
s=subprocess.run("whereis", shell=True)
s=subprocess.run("whoami", shell=True)
s=subprocess.run("ps", shell=True)
subprocess.run(['wsl'], shell = True)
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code
p = subprocess.Popen("date", stdout=subprocess.PIPE, shell=True)
import sys
sys.platform
import sys
import clipboard
impor
import clipboard
import os
os.chdir('c:\you\\nn')
vid
response
print(response.json())
print(response)
info=response.json()
type(info)
info
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
fulltitle
fulltitle+'\.mp3'
fulltitle+'.mp3'
full=dir+'\\'+fulltitle+'.mp3'
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
s
print(s)
import requests
x=pwd
import os
o
import clipboard
clipboard.copy(str(o))
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from pathlib import Path
import requests
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
all
fulltitle=data['fulltitle']
fulltitle=data['fulltitle']
fulltitle
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    write(fulltitle)
    write('\n')
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write('\n')
    
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
print(text)
fulltitle
lt
fulltitle
fulltitle+'.mp4'
t=fulltitle+'.mp4'
Path(t).touch()
lt
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
t=fulltitle+'.mp4'
print(text)
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
print(t)
Path(t).touch()
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"

for path, directories, files in os.walk(root_vid_directory):
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
files
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
        if video_file.endswith("MP4"):
            full_mp4_path = os.path.join(path, video_file)
            full_gpx_output_path = full_mp4_path.replace(".MP4", ".GPX")
            print(f"Processing: {full_mp4_path}")
            with open(full_gpx_output_path, "w") as gpx_file:
                exiftool_command = ["exiftool", "-ee", "-m", "-p", "/Users/fpolig01/Videos/dashcam_footage/gpx.fmt", full_mp4_path]
                subprocess.run(exiftool_command, stdout=gpx_file)
            print(f"Succesfully created: {full_gpx_output_path}\n")
import sys
print(sys.path)
import sys
print(sys.path)
import piexif
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg-python
import ffmpeg
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
te="Goethe took up residence in Weimar in November 1775 following".split('\s')
te
te.split(' ')
"jim is".split(' ')
"jim is".split('\s')
"jim is".split(\s)
"jim is".split(" ")
"jim is".split(r"\s")
"jim is".split(r'\s')
"jim is".split(r'i')
"jim is".split('i')
import re
re.split(r'\s',s)
s="Specify where the variable comes from"
re.split(r'\s',s)
re.split('\s',s)
s
s
s.replace(' ', '\n')
k=s.replace(' ', '\n')
print(k)
type(k)
import string
import random
import os

passphrases = []
for _ in range(100):
    st = "".join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for i in range(random.randint(8,16)))
    passphrases.append(st)
    print(st)
    
st
passphrases
passphrases[1:10]
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write(f"{p}\n")
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write("xx")
with open("Passphrases2.txt","w") as pass_file:
    for p in passphrases:
        pass_file.write("%s\n" %p)
        
print(p)
with open("me","w") as xx:
    xx.write(s)
    
s
with open("kk","w") as kk:
    kk.write(kk)
    
with open("kk","w") as kk:
    kk.write(k)
    
import sqlite3
conn = sqlite3.connect("/home/steff007/.ipython/profile_default/history.sqlite")
c = conn.cursor()
ip = c.execute("SELECT source from history")
ipl=list(ip)
import sys
dir(sys)
sys.platform
sys.about
sys.version
sys.about
k=dir(sys)
k
for f in k:
    print(f)
    
print(str(k))
import sys
k=dir(sys)
with open("kk","w") as kk:
    write(str(k))
    
with open("kk","w") as kk:
    kk.write(str(k))
    
sys.executable
import mysql.connector
import mysql.connector
import sys
print(sys.version_info)
dir(sys)
a=dir(sys)
print(a)
a
a
a['version_info']
type(a)
(x for x in a)
[x for x in a]
[x for x in a and x.startswith('s')]
[x for x in a if x.startswith('s')]
[x for x in a if x.startswith('v')]
a['version_info']
a.version
dir(a)
a
a
a['version_info']
a[3]
a[2]
b=[n for n in a if not n.startswith('a')]
b
b=[n for n in a if not n.startswith('w')]
b
import clipboard
exit()3651 Lancaster Ln N, Minneapolis, MN 55441
import sys
print(sys.path)
import matplotlib.pyplot as plt
import numpy as np

# X axis parameter:
xaxis = np.array([2, 8])

# Y axis parameter:
yaxis = np.array([4, 9])

plt.plot(xaxis, yaxis)
plt.show()
import os
os.path.dirname()
os.path.dirname('.')
import os
os = sys.platform()
import sys
os = sys.platform()
sys.platform
os = str(sys.platform())
myos=sys.platform
import sys
sys.platform
sys.platform()
import nest_asyncio; nest_asyncio.apply()  # This is needed to use sync API in repl
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
chrome = pw.chromium.launch(headless=False)
page = chrome.new_page()
page.goto("https://twitch.tv")
pw = sync_playwright.start()
h
w
c
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
dir(pw)
dir(sync_playwright)
pw = sync_playwright.start()
from playwright.sync_api import Playwright, sync_playwright, expect
playwright = sync_playwright().start()
pw = sync_playwright.start()
pw = sync_playwright().start()
from pill import Image
from pil import Image
from PIL import Image
import cv2
list='letS1.png lets2.png pentatonic.png'.split()
list
from PIL import Image
[[a,b] for a,b in enumerate(list)]
elist=[[a,b] for a,b in enumerate(list)]
elis
elist
img=Image.open(list[0])
img2=Image.open(list[1])
img.paste(img2, (400,400))
img.show
img.show()
img.show()
zdir(img)
dir(img)
img.save('new.png')
img2.show()
img
img=Image.open('letS1.png)
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (2450,450))
img.show()
from PIL import Image
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (400,400))
img.show()
img2.show()
img=Image.open('s.jpg')
img2=Image.open('t.jpg')
img.show()
img.paste(img2, (400,400))
img.show()
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (20,20))
img.show()
img.size
img2.size
img.show()
background = Image.new('RGBA',(1300, 1300), (255, 255, 255, 255))
background.show()
background.paste(img(30,30))
background.paste(img,(30,30))
background.show()
background.paste(img2,(60,60))
background.show()
background.paste(img2,(260,260))
background.show()
img.mode
img.size
img2.size
e
new_image = image.resize((600, 600))
new_image = img2.resize((600, 600))
new_image.show()
new_image.paste(img(300,300))
new_image.paste(img,(300,300))
new_image.show()
new_image.paste(img2,(0,0))
new_image.show()
w
dir()
w
c
import os
[a.name for a in os.scandir('.')]
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
import re
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
fil
img3=Image.open(fil[4])
img3=Image.open(fil[3])
img3.show()
ni = img3.resize((600, 600))
ni.show()
img3.size
ni = img3.resize((350, 600))
ni.show()
ni = img3.resize((350, 200))
ni.show()
fil=[a.name for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil
i=Image.open(fil[0])
i.show()
i.size
box = (200, 300, 700, 600)
nii=i.crop(box)
nii.show()
box = (200, 3000, 700, 600)
nii=i.crop(box)
box = (200, 3000, 700, 3600)
nii=i.crop(box)
nii.show()
box = (2000, 500, 4000, 3000)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 300)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 500)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 1000, 4000, 2000)
nii=i.crop(box)
nii.show()
from music21 import *
s = corpus.parse('bach/bwv65.2.xml')
s
s.analyze('key')
s.show()
us = environment.UserSettings()
us
us['musicxmlSettings'] = 'C:/Program Files (x86)/MuseScore 2/bin/MuseScore.exe'
s.show()
configure.run()
s.show()
littleMelody = converter.parse("tinynotation: 3/4 c4 d8 f g16 a g f#")
littleMelody.show()
littleMelody = converter.parse("tinynotation: 4/4 c4 d8 f g16 a g f#")
littleMelody.show()
dicant = corpus.parse('trecento/Fava_Dicant_nunc_iudei')
h
dicant.show()
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
df
pd
pd.crosstab
pd.crosstab()
from PIL import Image, ImageDraw

img = Image.open("cat.jpg").convert("RGBA")
x,y = img.size
img2 = Image.open("smith.jpg").convert("RGBA").resize((x,y))

img.putalpha(225)
img2.putalpha(45)

img3 = Image.alpha_composite(img, img2)
img3.show()
import matplotlib.pyplot as plt
import numpy as np

# Use numpy to generate a bunch of random data in a bell curve around 5.
n = 5 + np.random.randn(1000)

m = [m for m in range(len(n))]
plt.bar(m, n)
plt.title("Raw Data")
plt.show()

plt.hist(n, bins=20)
plt.title("Histogram")
plt.show()

plt.hist(n, cumulative=True, bins=20)
plt.title("Cumulative Histogram")
plt.show()
inp='google.com'
def counts(inp):
    dd={key:0 for key in inp}
    for l in inp:
        if l in list(dd.keys()):
            dd[l]=dd[l]+1
    return dd
print('h')
print(dd)
print("saturday morning")
import my
len(f)
len(f)
from datetime import datetime
some_date = datetime(2021, 12, 9, 12, 12, 23)
some_date
print(some_date.strftime('%c'))
now = datetime.now()
now
formatted_datetime_now = f"{now:%d-%B-%Y}"
print(formatted_datetime_now)
data
data
for a in data:
    print(a)
    
data[1]
type(data)
a=next(data)
a=next(data)
next(data)
type(data)
dir(data)
data.__next__
for a in data:
    print(a)
    
data
for a in data:
    print(a)
    
len(data)
data
for a in data:
    print(a)
    
for a in data:
    print(a)
    
square_list = [n** 2 for n in range(5)]
square_list
square_list
square_list
square_list[1]
square_generator = (n** 2 for n in range(5))
square_generator
for a in square_generator:
    print(a)
    
for a in square_generator:
    print(a)
    
square_generator = (n** 2 for n in range(5))
list(square_generator)
list(square_generator)
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
a=list(square_generator)
a
square_generator = (n** 2 for n in range(5))
a=list(square_generator)
a
exi
k
files
col_print(k)
col_print(files)
k
col_print(k)
type(k)
files
f1
data
m=list(data)
m
from my import *
col_print(m)
for a in m:
    print(a)
    
datal
datal[1]
time
time
time.year
type(type)
type(time)
time(time)
time(time)
time(12)
time.ctime(time=(os.stat(datal[1]).st_atime))
myTime(m[1])
myTime(m[1])
myTime(m[1])
m[1]
print(m[1],myTime(m[1]))
print(m[1],myTime(m[1]))
n
col_print(n)
g=[]
g.append([2,3])
g
g.append([2,3])
g
g.append(['tome',3])
g
n[1]
col_print(n)
n[1][1]
n
n[5]
for x in n:
    print(x)
    
for x in n:
    print(x[0])
    
cp=col_print
cp(m)
m
n
list(n)
cp(list(n))
v=list(n)
v
m
cp(m)
v=list(str(n))
v
v=list(list(n))
v
dir_name=r'.'
data = (os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
d=list(data)
d
data
data.next
data
d
[x for x in d not 'x' in x]
data
data
dir(data)
for n in data: print(n)
for n in data: print(n)
data
[x for x in data if not 'x' in x]
['j' +x for x in data if not 'x' in x]
'jim'.replace('i','x')
'\\'.replace('\\','/')
[x.replace('\\', '/') for x in data if not 'x' in x]
datal
with open(datal[1]) as f:
print(f)
with open(datal[1]) as f:
    print(f)
    
datal
sorted(datal)
datal
m
n = []
n
datal
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],2)
lnl(datal[1],8)
lnl(datal[1],8)
lnl(datal[1],18)
data[0:2]
datal[0:2]
lnl(datal[1],18)
lnl(datal[1])
list(lnl(datal[1]))
lnl(datal[1])
fname
data
datafiles=[x.replace('\\', '/') for x in data if 'x' in x]
datafiles
mn=[x.replace('\\', '/') for x in data if 'x' in x]
mn
mn[1]
lnl(mn[1])
lnl(mn[0])
files = glob.glob("*.py")
import glob
t=[]
t.append("*"*3)
t
t.append(f"*"*3)
t
t
t
t
files[1]
lnl(files[1])
a
lnl(files[1])
ab
ab=[]
lnl(files[1])
lnl(files[1])
t
t
k='jim \n"
k='jim \n'
k.strip()
k
t
t[1]
t.join("")
type(t)
str(t)
t
t
t
lof
lof
import my
cl('jim')
my.cl('jim')
dir(my)
import my
dir(my)
import my
dir(my)
cl("jim")
my.cl("jim")
dir(my)
import glob
t
files
my.cl(files)
lof
lof
with open(lof[4], 'r') as f:
    for line in f.readlines():
        print(line)
        
lof
lof
for count, value in enumerate(lof):
    print(count, value)
    
lofg = (filter(os.path.isfile, glob.glob(dir_name + "/**/*", recursive=True)))
type(lofg)
next(lofg)
next(lofg)
len(lofg)
dir(lofg)
logf.__sizeof__
lofg.__sizeof__
lofg.__sizeof__()
data
ax=list(sorted(data))
ax
type(data)
type(data)
data
n=['a','x','b']
sorted(n)
n
type(data)
type(data[1])
sorted(data)
data[1]
data[1][1]
type(data[1][1])
type.ctime(data[1][1])
time.ctime(data[1][1])
time.ctime(data[1][1]).format('%a')
time.ctime(data[1][1]).format('%x')
time.ctime(data[1][1]).strftime("%a %m %y")
now
type(now)
now.strftime("%a %m %y")
time.ctime(cdate)
f"{now:%d-%B-%Y}"
f"{time.ctime(cdate):%d-%B-%Y}"
time.ctime(cdate)
type(cdate)
type(time.ctime(cdate))
data[1]
data[1][3]
data[1][2]
lat(data[1][2])
import stat
lat(data[1][2])
time.ctime(lat(data[1][2]))
time.ctime(lat(data[1][2])).strftime("%a %m %y")
modTimeInSeconds
modTime
type(modTimeInSeconds)
time.ctime(modTimeInSeconds)
cdate
modet
print(modet)
modet
modet
time
time.ctime(cdate)
type(time.ctime(cdate))
int(time.ctime(cdate))
a=time.ctime(cdate)
a
type(a)
int(a)
type(modTimeInSeconds)
int(modTimeInSeconds)
cdate
cdate
str(cdate)
str(cdate).strftime('%d/%m/%Y')
type(modTimeInSeconds)
float(cdate)
float(cdate).strftime('%d/%m/%Y')
a=time.ctime(cdate)
a
l
v
v.json
v.json()
r
r.text
r.html
r.json()
import my
cl(r.json())
my.cl(r.json())
f=r.json()
f
len(f)
str(f)
list(r.json())
today = datetime.date.today()
today
type(o)
o
i=100*100
i
f"{i:_d}"
f"{o:_d}"
o
type(i)
o=int(o)
f"{o:_d}"
f"{o:%m}"
f"{o:%x}"
now
n=datetime.now()
from datetime import datetime
n=datetime.now()
n
int(n)
print(f'{now:%Y-%m-%d %H:%M}')
print(f'{n:%Y-%m-%d %H:%M}')
now
n
n+1
o
o +a
o +1
dti = datetime.datetime.fromtimestamp(o)
import datetime  
dti = datetime.datetime.fromtimestamp(o)
dti
dti = datetime.datetime.fromtimestamp(o)
dtis = dti.strftime( "%Y - %m - %d  %H : %M : %S")  
dtis
dti.strftime( "%x")  
cti(o)
cdate
cdate
cti(cdate)
cti(cdate)
print('G','F', sep='\t', end='')
data
data
from tabulate import tabulate
print(tabulate(data))
a=[]
a.append(data)
a
print(tabulate(a))
a=[]
for n in data:
    a.append(n)
    
n
data
for a in data:
    print(a)
    
n=[]
for a in data:
    print(a)
    n.append(a)
    
n
for a in data:
    print(a)
    n.append([a])
    
    
n
n=[]
for a in data:
    print(a)
    n.append([a])
    
    
n
print(tabulate(a))
print(tabulate(n))
"jim".split('')
"jim".split()
"jim steffes".split()
lt
data
data[1].split('#')
data[1].split('#').join()
data[:5]
data[2:5]
enumerate(data[2:5])
for f in enumerate(data[2:5]):
    print(f)
    
"jim".split()
data
data[1].split(" ")
''.join(data[1].split(" "))
' '.join(data[1].split(" "))
data[1].split(" ")
' '.join(data[1].split(" "))
list='shoat
tubal
eclat
olam
stat
gnar
babai
scoad
type(list)
list.split('\n')
list
' '.join(list)
list2
list
mlist
mlist = sorted(list, key=lambda x: x[-2])
list
list
mlist
mlist
list
mlist
data
list2
' '.split(list2)
list2
list2.split(' ')
' '.join(list2.split(' '))
'aaaa'.replace('a','b')
j='aaaaa'
j.replace('a','x')
j
j[1]
data[1]
data[1].split(' ')
data[1].split(' ')[3]
a=re'\n'
k='''I have a list of words where I want to sort based on their last (2,3) letters. In other words if we say (Sort by Words ending with)'''
k
k.split()
k.split()[8]
w
' '.join(w)
w
sort(w)
mlist
mlist
h
h=(w, lambda x: x[-1:])
w
h
data
data.split(' - ')
data
str(data)
len(str(data))
data[1]
data[1][6]
n=[]
for t in data:
    n.append(t.split(' '))
    
n
for a in n:
    print(a[3])
    
n
n[1][1]
data
n
n.sort(key=lambda x: x[0])
n
n.sort(key=lambda x: x[1][8])
n
n.sort(key=lambda x: x[1][2])
n
for a in n:
    print(a[1][2])
    
for a in n:
    print(a[1][1])
    
    
n
j=[2, 3, 7, 43, 13, 139, 3263443]
len(j)
sum(j)
for a in range(len(j)):
    print(a)
    
for a in range(len(j)):
    print(j[a])
    
    
for a in range(len(j)-1):
    print(j[a]*j[a+1])
    
    
for a in range(len(j)-1):
    print(f"j[a]*j[a+1]")
    
    
    
j
import numpy
numpy.prod(j)
j
aa=numpy.prod(j)
aa
multiplyList(j)
factors=[]
factors
multiplyList(j)
factors(multiplyList(j))
kk=multiplyList(j)
factor(kk)
factor=[]
factor(kk)
num=multiplyList(j)
import sys
a = range(1,1000)
print(a)
for b in a:
    print(b)
    
b=xrange(1,100)
x = xrange(1,10000)
import pydoc
pydoc.pager("SOME_VERY_LONG_TEXT") 
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
data
list(data)
list(data)
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data + data
t=data+data
t
pydoc.pager(t)
t
pydoc.pager(str(t))
len(t)
t=t+t
t
len(t)
t=t+t
t=t+t
len(t)
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t=t+t
t=t+t
pydoc.pager(str(t))
t
len(t)
subprocess.call(['dir'+longStr+'" | more'], shell=True)
longStr
datetime.now()
from datetime import datetime
datetime.now()
today=datetime.now()
today.strftime("%H")
today.strftime("%Y")
dir(datetime)
a=dir(datetime)
a
data
data[1].find('.')
data[1].find('t')
data[1].find('\.')
data[1].findall('\.')
d
import re
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
print((re.split(r'\s','we are splitting the words')))
print((re.split(r's','split the words')))
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+", xx)
r1
r1 = re.findall(r"^\w+", data[1])
r1
data[1]
data[3]
data
os.chdir(r'c:\you')
next(os.walk('.'))[1]
next(os.walk('.'))[1]
a=next(os.walk('.'))[1]
a
b=[e for e in a]
b
e
a[1]
a[1].match('car')
a[1].index('car')
a[1].index('a')
a[1].index('r')
a[1].index('r')
a=whos
a
a
a
z
l=range(0,5)
l
for a in l:
    print(a)
    
l=list(range(0,5))
'car'.find('c')
'car'.find('car')
b=[e for e in a if 'w' in e]
a
a=next(os.walk('.'))[1]
b=[e for e in a if 'w' in e]
b
b=[e for e in a if 'wy' in e]
b
b=[e for e in a if  re.search(r"w",e)]
b
a
b=[e for e in a if  re.search(r"p.*y",e)]
b
os.chdir('/docker')
os.chdir('docker')
os.listdir()
os.listdir('..')
os.listdir()
os.listdir()[1]
sys.modules.keys()
c=sys.modules.keys()
c
col_print(c)
type(c)
list(c)
list(sys.modules.keys())
dir()
dir(col_print)
col_print(dir())
col_print("jim")
help(col_print)
col_print(str("jim"))
col_print(str(dir()))
col_print(str(dir()))
import my
col_print(str(dir()))
help(col_print)
import my
col_print(str(dir()))
dir(col_print)
for a in dir(print):
    print(a)
    
a
a=str(dir())
a
a.split(())
list(a)
a=str(dir())
type(a)
a.split(())
a.split()
b=list(a.split())
b=a.split()
type(b)
len(b)
b[1]
n=[]
for g in b:
    n.append(g)
    
g
b
g[1]
g[6]
for g in b:
    n.append(g)
    
b
len(b)
for t in b:
    g.append(t)
    
n=[]
for t in b:
    n.append(t)
    
n
dir(os)
for a in dir(os):
    print(a)
    
b=dir(os)
b
out
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
out = [l[i: i+4] for i in range(0, len(l), 4)]
out = [l[i: i+1] for i in range(0, len(l), 4)]
out
out = [b[i: i+1] for i in range(0, len(b), 4)]
out
col_print(b)
help(os.cpu_count)
os.cpu_count()
col_print(b)
b=dir(os)
b=dir(os)
col_print(b)
b
dir()
os.chdir(r'\you\docker')
os.listdir()
os.listdir()[1]
import re
str1
fi=os.listdir()
fi
int(8)
int(j8)
int('j8')
fi
numlists = ["5","50","7","51","87","97","53"]
sorted(numlists)
numlists
results
sorted(results)
list(map(int,results))
list(map(str,results))
list(map(int*3,results))
list(map(a*3,results))
results
list(map(lambda a: a*3,results))
list(map(lambda a: a*30,results))
fi
matchObj
matchObj = re.match( r'dogs', line )
matchObj
line
re.match( r'dogs', line )
re.match( r'd', line )
re.search( r'd', line )
re.search( r'x', line )
a
fi
fi
fi[1]
fi.sort(key=lambda f: int(re.sub('\D', '', f)))
fi
fi[::-1]
for p in fi[::-1]:
    print(p)
    
fi
f1[1].replace('a','x')
fi[1].replace('a','x')
f1[1]
fi
re.sub('.*', 'xxx', fi[1])
fi[1]
re.sub('\D.*', 'xxx', fi[1])
re.sub('\D', 'xxx', fi[1])
re.sub(r'\D', 'xxx', fi[1])
re.sub(r'\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1])
re.sub(r'.*\d', 'xxx', fi[1],1)
re.sub(r'\s', '_', fi[1],1)
re.sub(r'\s', '_', fi[1])
re.sub(r'.*', '_', fi[1])
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility
import re
regex = r"[\s\S]*?(?=Course)"
test_str = "Docker Crash Course #2 - Installing Docker.mp4"
subst = "New "
# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)
if result:
        print (result)
        
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
:x
import fil
dir()
dir(fil)
dir(fil.os)
d=dir(fil.os)
d
print(d)
dir()
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
dir()
dir(os)
os.terminal_size()
dir_path=(r'c:\you\docker')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data
data[0]
Path('new').touch
import touch
import touch
from touch import touch
import touch
test_str
import re
fi
f
fi
for x in fi:
    touch.touch(x)
    
fi
for x in fi:
    print(x)
    touch.touch(x)
    
for x in fi:
    time.sleep(1)
    print(x)
    touch.touch(x)
    
fi[1]
clipboard.copy(str(fi[1]))
clipboard.copy(str(fi[1]))
x
regex = r".*(?=Course ).*#"
subst = ""
result = re.sub(regex, subst, x, 0, re.MULTILINE)
result
result.replace(' ', '_')
result=result.replace(' ', '_')
result
result.replace('-_','')
data
fi
EXIT
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
f
data.sort(key=lambda f: int(re.sub('\D', '', f)))
data
len(data)
data.remove(14)
data
enumerate(data)
for f in enumerate(data):    print(f)
data.remove(13)
dat
data
data[13]
data.remove('xxx')
data
data.sort(key=lambda f: int(re.sub("\D", "", f)))
data
mk='''I understand why Sublime doesn’t have this sorting option.'''.split()
mk
re.findall(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'sick them')==True
re.search(pattern, 'sick them')
re.search(pattern, 'ick them')
re.search(pattern, 'ick them')==True
if re.search(pattern, 'sick them'):
        print('yes')
        
if re.search(pattern, 'ick them'):
        print('yes')
        
re.search(pattern, 'ick them')==None
re.search(pattern, 'sick them')==None
pattern
re.search(data[0],'#')
data[0]
re.search(data[0],'is')
re.search('this','is')
re.search('#', data[0])
pattern='#'
dataf = filter(lambda x: re.search(pattern,x),data)
dataf
list(dataf)
for ff in filter(lambda x: re.search(pattern,x),data):
        print(ff)
        
data[0]
os.path.exists(data[0])
pattern = "^Dock"
import shutil
os.path.exists(data[0])
a
f
print(f"ok {ff}")
lens("jim")
lens("jim")
lens({"a"})
lens({a:2})
lens({"a":2})
min[-4,4,8]
min(-4,4,8)
st
def two(st):
        if len(st) > 2 and st[0] == st[len(st)-1]:
                    return "yes"
                        else:
                                    return "no"
two("jim")
two("mim")
two("im")
two('a')
two('aaa')
two(123)
two(12)
type("jim")
two(12)
[1,4].count(1)
[1,4,"a"].count("a")
[1,4].count("a")
lens(b)
lens(b)
data
type(data)
data
len(data)
data[1]
dir(data)
data.keys
data.keys()
dir()
import re
dir
dir()
a=dir()
a
col_print(a)
import tabulate as tabulate
dir_path = r"c:\you\docker\ch"
os.chdir(dir_path)
data = os.listdir(dir_path)
data
print(tabulate(data))
x=[("a",1)]
print(tabulate(x))
import tabulate as tabulate
print(tabulate(x))
dir(tabulate)
print(tabulate.tabulate(x))
print(tabulate.tabulate(data))
type(a)
a
x
type(x[1])
type(x[0])
data
tuples=[tuple(x) for x in data]
tuples
m=[]
for a in data:
    m.append(tuple(m))
    
m
type(data)
for a in data:
    print(a)
    
tuple(data)
print(tabulate.tabulate(tuple(data)))
data
m=[]
for g in data:
    m.append(g)
    
m
m=[]
for g in data:
    m.append([g])
    
    
m
print(tabulate.tabulate(m))
print(tabulate.tabulate(m))
m=[]
print(tabulate.tabulate(m))
data = os.listdir([dir_path, "January"])
data = [os.listdir(dir_path)]
data
data = os.listdir(dir_path)
data
data = ((os.stat(path), path) for path in data)
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
print(tabulate.tabulate(data))
data
data = list(((os.stat(path), path) for path in data))
data
((os.stat(path), path) for path in data)
((os.stat(path), path) for path in data)
list(((os.stat(path), path) for path in data))
((os.stat(path), path) for path in data)
print(((os.stat(path), path) for path in data))
data
for a in data:
    print(a)
    
data = ((os.stat(path), path) for path in data)
for a in data:
        print(a)
        
data
data
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
print(tabulate.tabulate(data))
kk
print(tabulate.tabulate(kk))
kk
print(tabulate.tabulate(kk))
j=[[1],[1]]
print(tabulate.tabulate(j))
b
tuple(b)
c=3
d=[b[i:i+c] for i in range(0, len(b),c)]
d
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
d=[b[i:i+c] for i in range(0, len(b),c)]
print(tabulate.tabulate(d))
5+4
_
_ +1
diff
diff.split('\n')
a='ppython'
a.split()
a.split(())
for s in a:
    print(s)
    
[x for x in a]
a.count('p')
set([x for x in a])
for a in set([x for x in a]):
    print(a)
    
for t in set([x for x in a]):
    print(t)
    
a='ppython'
for t in set([x for x in a]):
    print(t)
    
for t in set([x for x in a]):    print(t, a.count(t))
a
a='ppython'
for t in set([x for x in a]):    print(t, a.count(t))
a
set([x for x in a]).sort()
[1,3,1,8].sort()
dir(list)
[1,3,1,8].sort
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
cars = ['Ford', 'BMW', 'Volvo']
cars = ['Ford', 'BMW', 'Volvo'].sort()
cars
cars = ['Ford', 'BMW', 'Volvo']
cars.sort()
cars
ab=[1,3,1,8].sort()
ab
ab=[1,3,1,8]
ab
ab.sort()
ab
sorted(ab)
rl
rl
rl
x=sorted(w.split())
x
set(x)
x
sorted(x)
x
sorted(x)
import pydoc
pydoc.pager(x)
pydoc.pager(str(x))
print(x)
print(dir())
glob.glob('*.*')
sorted(glob.glob('*.*'))
import glob as glob
glob('*.*')
glob.glob('*.*')
fn(100000)
fn(100000000000000)


dir(__builitins__)
print(dir())
dir(_1)
type(_1)
print(dir())
dir(__builtins__)
print(dir(__builtins__))
dir(bin)
print(dir(__builtins__))
t
tl
import tabulate
print(tabulate.tabulate(tl))
tl
print("\t\tjim")
import datetime
tl
int("1"0)
int("1")
tl
tls
print(tabulate.tabulate(tls))
tls
tls
print(tabulate.tabulate(tls))
tl
tls
tls[3]
tls[3][2]
type(tls[3][2])
type(tls[3][:2])
tls[3][:2]
a=[10000,2000]
sorted(a)
int(1,200)
int(1)
tl
li
stn('88')
stn(fn('88'))
fn(1000000000000)
type(fn(10000000000))
a=123
b=str(a)
b
[char for char in b]
set("jimmm")
tuple("jimmm")
tuple("a")==tuple("a")
tuple("a")==set("a")
tuple("a")==tuple(set("a"))
def eq(n):
        return tuple(n)==tuple(set(n))
        
def eq(n,o):
        return tuple(n)==tuple(set(o))
        
eq(1,2)
set(a)
a
set(1,3)
set((1,3))
list(1)
list("jim")
list(1,23)
list(str(123))
eq(2,88)
set(tuple(1,3))
type(str(1,3,4))
str(34)
eq(1)
eq(8)
eq(888)
eq(8)
eq(899)
eq(888)
eq(888)
eq(8)
eq(891234)
eq(82)
eq(86)
eq(88)
eq(867)
eq(8)
eq(89)
set(1,3)
set([1,3])
set([1,3])==set([3,1])
eq(8)
eq(8)
eq(89234)
eq(892348)
eq("a")
eq("aa")
eq("ab")
len(888)
1+=1
chars
len(chars)
fact(8)
fact(8)
fact(8)
fact(8)
fact(8)
a=dir()
a
print(a)
print(a)
dir(quit)
print(a)
z=fact(8)
z
answer
def fac(n):
           return 1 if (n==0) else "not one"
           
fac(2)
fac(0)
fib(0)
fib(20)
fib(8)
fib(9)
fib(20)
fib(1)
fib(2)
fib(3)
fib(4)
fib(5)
fib(6)
fib(0)
fib(1)
fib(5)
fib(8)
for a in range(0,20):
        print(fib(a))
        
fnc
def fnc(n):
        return "{:,}".format(n)
        
dir(fnc)
print(dir(fnc))
import inspect
import tabulate
len(tab)
type(tab)
t='''When Buying the Dip Doesn’t Work: An Analysis of the Dot-com Crash'''.split()
t
[v.upper() for v in t]
[v.upper() + "  " for v in t]
[v[1] + "  " for v in t]
[v[0].upper() + "  " for v in t]
sorted(t)
sorted(t, key=t[2])
t
tab
import os
d=dir(os)
print(d)
type(d)
[x for x in d]
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
[x for x in d if d[0]!='_']
os.terminal_size()
os.terminal_size
numbers = list(map(lambda i: i*10, [i for i in range(1,6)]))
numbers
fh('os')
u
fh('os')
u
fh('os')
fd
dir()
fh('sys')
fh('os')
fh('os')
fh('sys')
fh('tabulate')
dir(sys)
d='sys'
dir(d)
d
d=r'sys'
dir(d)
d
dir(sys)
dir(d)
dir(d)
dir(sys)
d
d
print(dir(d))
type(d)
d=[1,2]
print(dir(d))
vars(list).keys()
vars(sys.keys())
sys
u=dir(sys)
u
print(u)
k=sys
u=dir(k)
print(u)
r=range(10,20)
r
r=list(range(10,20))
r
d=dir()
dir(repr(d))
dir()
repr(d)
d
d
vars(d)
repr(dir())
k=repr(dir(os))
k
help('modules')
k="os"
dir(k)
type(k)
dir(repr(k))
k='''os'''
dir(k)
type(k)
dir(f"{k}")
k
k=r"os"
k
id(k)
a
a=os
dir(a)
type(os)
type(a)
fh(os)
fh(a)
u = dir(os)
print([x for x in u if u[0] != "_"])
u
u[0]
u[10]
u[10][0]
for a in enumerate(u):
    print(a)
    
for a in enumerate(u):
    print(a[1])
    
    
for a in enumerate(u):
    print(a[1][0])
    
    
    
"jim"[0]
u
print(u)
for g in u:
    print(u[0])
    
os[1]
for f in os:
    print(f)
    
dir(os)
fh(os)
help(os.path)
sys.version_info
import
import sys
sys.version_info
dir()
dir
dir()
a=dir()
[x for x in a]
[x for x in a x[0]!='_']
[x for x in a a[0]!='_']
[x for x in a x[0] =='_']
[x for x in a if x[0] =='_']
[x for x in a if x[0] !=='_']
[x for x in a if x[0] !='_']
a=dir(os)
a=dir(sys)
[x for x in a if x[0] !='_']
os.winver
sys.winver
print([x for x in a if x[0] !='_'])
dir
dir()
import os
dir()
print(dir)
print(dir())
import my
dir(my)
print(dir())
def d:
    print(dir())
dir(my)
dir(my.cl)
def dd():
    print(dir())
dd
dd()
print(dir())
dir(pasted_block)
dir(pasted_block)
dir(os)
import os
dir()
help(os)
os.chdir(python)
os.chdir('python')
today
print(today)
import tabulate
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([[f"{os.path.basename(path)} {len(os.path.basename(path))}"],["nothing"]])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
tar
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}","nothing"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
tar
print(tabulate.tabulate(tar))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f"create date: {cti(cdate)} access date: {cti(adate)}"])
    print(
        f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    )
print(tabulate.tabulate(tar))
rom tabulate import tabulate
table = [[‘Aman’, 23], [‘Neha’, 25], [‘Lata’, 27]]
print(tabulate(table), headers = [‘Name’, ‘Age’])
from tabulate import tabulate
table = [['Name', 'Age'], ['Aman', 23], ['Neha', 25], ['Lata', 27]]
print(tabulate(table, headers = "firstrow" ))
print(tabulate.tabulate(tar,headers=['a', 'b']))
import tabulate
print(tabulate.tabulate(tar,headers=['a', 'b']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} {len(os.path.basename(path))}",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates']))
tar=[]
for cdate, adate, path in sorted(data):
    # print("-" * 10)
    # k = time.ctime(cdate)
    # print(f"k is {k}")
    # l = f"{now:%d-%B-%Y}"

    # print(f" l is {l}\n")
    tar.append([f"{os.path.basename(path)} ",f" {cti(cdate)} {cti(adate)}"])
    # print(
    #     f"{os.path.basename(path)} {len(os.path.basename(path))} ---> \t\t create date: {cti(cdate)} access date: {cti(adate)}"
    # )

print(tabulate.tabulate(tar,headers=['file', 'dates \t access']))
tar
string_nonASCII = " àa fuünny charactersß. "
string_encode = string_nonASCII.encode("ascii", "ignore")
string_decode = string_encode.decode()
print(string_decode)
dir()
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import sys
import time
import datetime
import re
import touch
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
# good version of change file name
# important
from stat import S_ISREG, ST_CTIME, ST_MTIME, ST_MODE, ST_ATIME
import os
import re
import shutil
from pathlib import Path

dir_path = r"C:\you\nextjs"
os.chdir(dir_path)
data = os.listdir(dir_path)
regex = r".*(?=Tutorial ).*#"
subst = ""
pattern = "#"

for ff in filter(lambda x: re.search(pattern, x), data):
    result = re.sub(regex, subst, ff, 0, re.MULTILINE)
    print(f"{ff} \nwill move to:\n {result}")
    # shutil.copyfile(ff, result)
    print("-" * 8)
import glob
files=glob.glob('*.*')
filex
filex
files
sorted(files, key=t[2])
sorted(files, key=files[2])
aa=list(range(0,10))
aa
import randome
import random
n=random.randint(0,20)
n
n
n
def ri():
    return random.randint(0,100)
ri()
ri()
ri()
[x for list(range(0,20) ) ]
[x for x in list(range(0,20) ) ]
[ri() for x in list(range(0,20) ) ]
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
sorted([ri() for x in list(range(0,20) ) ])
l=[x for x in list(range(0,20) ) ]
l
l=[ri() for x in list(range(0,20) ) ]
l
sorted(l, reverse=True)
x=101
x[0]
x="jim"
x[1]
str(x)[0]
x=101
str(x)[0]
str(x)[1]
str(x)[5]
str(x)[5]
str(x)[3]
str(x)[2]
int(str(x)[2])
int(str(x)[len(x)-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
int(str(x)[len(str(x))-1])
x
x=99999
int(str(x)[len(str(x))-1])
x=123489
int(str(x)[len(str(x))-1])
func = lambda x: int(str(x)[len(str(x))-1])
func(999983)
func(999983)
def ri():
    return random.randint(0,10000)
ri()
ri()
func(ri())
mm=[]
for a in range(0,20):
    mm.append(ri())
    
mm
sorted(mm)
sorted(mm, key=func)
print(sorted(mm, key=func))
mm=[]
for a in range(0,20):    mm.append([ri(), ri()])
print(mm)
sorted(mm, key=mm[1])
func2=lambda x: x[1]
sorted(mm, key=func2)
a=who
a=dir()
print(a)
[x for x in a ]
[x for x in a[0] ]
[x for x in a ]
[x[0] for x in a ]
[x for x in a if x[0] !='_']
print([x for x in a if x[0] !='_'])
def glbo():
    a=dir()
    print(a)
glbo()
print(dir())
class Shape:
    def __dir__(self):
        return ['area', 'perimeter', 'location']
s = Shape()
dir(s)
dir(s)
s.area
import re

test_list = ["Gfg34", "is67", "be3st", "f23or", "ge9eks"]

print("The original list is : " + str(test_list))

test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])

print("Strings after numerical Sort  : " + str(test_list))
test_list= glob.glob('*.*')
test_list
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
test_list
for a in test_list:
    print(a)
import touch
for a in test_list:
    print(a)
    touch.touch(a)
lt
touch.touch('9 - Images & Metadata.mp4')
touch('9 - Images & Metadata.mp4')
help(touch)
import touch

touch.touch(["info.txt", "data.txt", "apple.txt"])
import touch

touch.touch("x")
import touch

touch.touch(r"x")
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
import touch
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
touch.touch(data[0])
print(f"data[0] {data[0]} touched")
data
data[0]
touch.touch(data[0])
data[0]
touch.touch(data[0])
touch(data[0])
import random
import glob
import re
import touch
import os
import sys
from pathlib import Path
dir_path=(r'c:\temp')
data = list(os.path.join(dir_path, fn) for fn in os.listdir(dir_path))
data[0]
Path(data[0]).touch()
Path('duh').touch()
os.chdir(r"c:\you\nextjs")
test_list= glob.glob('*.*')
test_list.sort(key=lambda test_string : list( map(int, re.findall(r'\d+', test_string)))[0])
for a in test_list:
    print(a)
    Path(a).touch()
import re
  
# initializing string
test_str = 'geeksforgeeks'
  
# printing original String
print("The original string is : " + str(test_str))
  
# using sub() to perform substitutions
# ord() for conversion.
res = (re.sub('.', lambda x: r'\u % 04X' % ord(x.group()), test_str))
  
# printing result 
print("The unicode converted String : " + str(res)) 
dir()
dis=lambda: print('jim')
dis
dis()
dis=lambda: print(dir())
dis
dis()
dis=lambda: print(dir(os))
dis()
dir(global)
dit=lambda: print(globals())
dit()
a=globals()
a
print(a)
[x for x in a if x[0] !='_']
a
dit
dit()
ds=[a for a in globals() if a[0]!='_']
ds
print(ds)
dir(In)
print(dir(ln))
def mm():
    ds=[a for a in globals() if a[0]!='_']
    print(ds)
mm()
help(os)
dir(os)
o=dir(os)
print(o)
mm()
dir(mm)
type(mm)
print(dir(mm))
import inspect
mm()
mm()
help(inspect)
print(dir(quit))
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a)
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.trim())
ce()
def ce():
    with open ('x.py') as f:
        for a in f:
            print(a.strip())
ce()
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name

user=User("joe smith")
dir(user)
user.name
class User:
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
User.fname
dir(user)
user.fname
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]

user=User("joe smith")
help(User)
dir(__main__)
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)

user=User("joe smith")
user.p()
class User:
    '''This is a test class'''
    def __init__(self, full_name) -> None:
        self.name=full_name
        names=full_name.split(' ')
        self.fname=names[0]
    def p(self):
        print(self.name)
    def f(self):
        print(self.fname)

user=User("joe smith")
dir(user)
dir(user.name)
user.f()
u2=User("time ")
u2
user.f()
u2.f()
dit()
dir()
mm()
mm()
dir(mm)
help(pprint)
help(Class)
dir(__builtins__)
print(dir(__builtins__))
'hello'[1:3]
'222'.zfill(8)
def mySqrt(x):

    r = x
    precision = 10 ** (-10)
    
    while abs(x - r * r) > precision:
        r = (r + x / r) / 2
        
    return r
    
mySqrt(10)
mySqrt(10)*mySqrt(10)
dir()
mm()
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
m
for a in m:
    print(a)
    
m
for a in m:
    print(a)
    
g=r"this")
g=r"this"
g
g=r"\tthis"
g
g=r(dir())
import re
s='123abc456'
p=re.compile(r'abc')
m=p.finditer(s)
m
for a in m:
    print(a)
    
for a in m:
    print(a)
m
m=p.finditer(s)
for a in m:
    print(a)
m=list(p.finditer(s))
m
len(m)
m[0]
m[0].group
m[0].group()
m[0].group()
t='''Inductive reasoning is a method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
t
p=re.compile(r'\d')
m=p.finditer(s)
m
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=''.join(s)
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a body of observations is synthesized to come up with a general principle'''.split()

s=' '.join(s)
s
p=re.compile(r'\d')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\D{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\S{3}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
m
type(m)
' '.joint(m)
' '.join(m)
str(m)
p=re.compile(r'\w}')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s
p=re.compile(r'\w')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bb')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''.split()
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\Bbody')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'[s]')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[16]
s[16:20]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d+')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))
s
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
m=p.finditer(s)
m=list(p.finditer(s))

for a in m:
    print(a)
s[128]
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d*')
sp=p.split(s)
sp
s='''Inductive 22 reasoning is a 33 method of reasoning in which a anybody of observations is synthesized to come up with a general principle'''
p=re.compile(r'\d+')
sp=p.split(s)
s
sp
import glob
dirn=r'C:\projects\node\js\mm\public\img'
files=glob.glob(dirn)
print(files)
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(files)
files
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
print(ntpath.basename(files))
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath.basename(f))    
import ntpath
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    print(ntpath(f))    
files
files[0]
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(head, tail)    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}, {tail}")    
import ntpath
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
import os
import glob
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"{head}\{tail}")    
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
for f in files:
    head, tail = os.path.split(f)
    print(f"touch {head}\{tail}")    
files
[os.path.split(i) for i in files]
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
fil
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    # print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\node\js\mm\public\img\*.*'
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
[os.path.split(i) for i in files]
dirn=r'C:\projects\*.*'
files=glob.glob(dirn)
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
fil
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}\{tail}")
    
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"touch {head}{tail}")
fil
fil=[]
for f in files:
    head, tail = os.path.split(f)
    fil.append(f"{head}{tail}")
    # print(f"touch {head}\{tail}")    
# [os.path.split(i) for i in files]
file
fil
lst=list(range(1,5))
lst
lst=list(range(1,5,2))
lst
lst=list(range(1,10,2))
lst
lst=list(range(1,10,2))
b=[x*3 for x in lst]
b
lst
c=list(map(lambda x: x*40, lst))
c
n=pwd
import os
jim.replace('i', 'xxx')
'jim'.replace('i', 'xxx')
'\\\'.replace('\\','nnn')
'\\\'.replace('\\\','nnn')
'\\\'.replace('\\','')
import re

phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, '\\',phone_no)

print(result)
phone_no = '\\ok'
pattern = '\\\\'
result = re.sub(pattern, r'\\',phone_no)

print(result)
result
print(result)
[x for x in [1,2,34]]
[str(x) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]]
[range(x,35) for x in [1,2,34]][0]
print([range(x,35) for x in [1,2,34]][0])
print(range(1,5))
for i in [range(x,35) for x in [1,2,34]][0]:
    print(i)
    
import os
import pathlib
import glob
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
files
dirs=r"C:\projects\node\mm\memory\public\img\*.*"
files=glob.glob(dirs)
y=[x for x in files]
y
y=[os.path.basename(x) for x in files]
y
y=[{os.path.basename(x)} for x in files]
y
print(\"")
print('"')
y=['"src": '+ {os.path.basename(x)} for x in files]
y=['jim' + {os.path.basename(x)} for x in files]
y=[('jim' + {os.path.basename(x)}) for x in files]
y=['jim' + str({os.path.basename(x)}) for x in files]
y
y=['jim ' + str({os.path.basename(x)}) for x in files]
y=['jim '  str({os.path.basename(x)}) for x in files]
y=['jim ' + str({os.path.basename(x)}) for x in files]
y
y=['src: "' + str({os.path.basename(x)}) for x in files]
y
y=['src":' + '"' + str({os.path.basename(x)}) for x in files]
y
y=[({os.path.basename(x)}) for x in files]
y
mm()
mm()
def cl(x):
    clipboard.copy(str(x))
mm()
y=[({os.path.basename(x)}) for x in files]
cl(y)
y=[({os.path.basename(x)}+'\n') for x in files]
y=[({os.path.basename(x)}) for x in files]
y
cl(y)
y=['"src":'+ str({os.path.basename(x)}) for x in files]
y
str(y)
y=['"src":{ " /img/'+ str({os.path.basename(x)}) for x in files]
y
y=['{"src": " /img/'+ str({os.path.basename(x)}+'"') for x in files]
y=['{"src": " /img/'+ str({os.path.basename(x)}) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"' for x in files]
y
y=['{"src": "/img/'+ str(os.path.basename(x)) +'"\n' for x in files]
y
cl(y)
mm()
print(f"header is {response.headers}")
h=response.headers
h
type(h)
h
for i in h:
    print(i)
    
h.Server
dir(h)
response.json()
js=response.json()
js
type(js)
h=response.headers.json()
js
js
len(js)
for a in js:
    print(a)
    
str(js)
js[1]
dir(js[1])
type(js[1])
js[1].created_at
js[1]['created_at']
for i in js:
    print(i.html_url)
    
for i in js:
    print(i)
    
js[1]['created_at']
for i in js:
    print(i['html_url'])
    
mm()
cl(y)
import my
for i in js:
    print(i['html_url'], i['updated_at'])
for i in js:
    print(f"{i['html_url']}, {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
for i in js:
    print(f"{i['html_url']} \t {i['updated_at']}")
ba=[]
for i in js:
    ba.append([f"{i['html_url']} \t {i['updated_at']}"])
ba
import tabulate
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{i['updated_at']}"])

print(tabulate.tabulate(ba))
ba
sorted(ba)
print(tabulate.tabulate(ba))
import datetime
js
cti(js[1]['created_at'])
js[1]['created_at']
type(js[1]['created_at'])
from datetime import datetime
date_string = '2021-12-31 15:37'
datetime = datetime.strptime(date_string, '%Y-%m-%d %H:%M')
print(datetime)
datetime = datetime.strptime(date_string, '%Y-%m-%d ')
print(datetime)
from datetime import date
today=date.today()
print(f"today is {today}")
today.day
today.month
type(today)
dir(today)
today.strftime("%a")
today.strftime("%a %d")
today.strftime("%a %d %M")
today.strftime("%a %d %B")
today.strftime("%a %B %d ")
today.strftime("%a %B %dth ")
today.strftime("%a %B %dth")
js[1]['created_at']
type())js[1]['created_at']
type(js[1]['created_at'])
date = datetime.datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date = datetime.strptime(js[1]['created_at'] , "%Y-%m-%dT%H:%M:%SZ")
date
def iso(d):
    return datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
iso(js[1]['created_at'])
date=iso(js[1]['created_at'])
date.strftime('%A %b %d, %Y at %H:%M GMT')
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')
date=iso(js[1]['created_at'])
data
date
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
    
js
js[1]
ba=[1]
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M GMT')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%A %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%a %b %d, %Y at %H:%M ')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m/%d/%Y')

ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
js[1]
type(js[1])
key_value ={}   
  
# Initializing the value
 key_value[2] = 56      
 key_value[1] = 2
 key_value[5] = 12
 key_value[4] = 24
 key_value[6] = 18     
 key_value[3] = 323
key_value
for i in js:
    print(i)
    
for i in js:
    print(f"{i} \n)
for i in js:
    print(f"{i} \n")
    
for i in js:
    print(f"{i} \n\n")
    
for i in js:
    print(f"{i[1]} \n\n")
    
for i in js:
    print(f"{i[created_at]} \n\n")
    
for i in js:
    print(f"{i['created_at']} \n\n")
    
js[1]
print(js[1])
len(js)
gl
for i in js[0]:
    print(i)
    
[x for x in js]
[x.['git_url'] for x in js]
[x['git_url'] for x in js]
[x+ x['git_url'] for x in js]
[x for x in js[1]]
str([x for x in js[1]])
cl(str([x for x in js[1]]))
import my
my.cl(str([x for x in js[1]]))
after:2020
[x['name'] for x in js[1]]
[x['name'] for x in js]
[x['name'] + x['description'] for x in js]
[(x['name'] , x['description')] for x in js]
sorted(js)
js
type(js)
str(js)
js[1]
sorted(js)
sorted(js.items())
sorted(js.topics())
sorted(js['watchers'])
sorted(js[1])
dict
dict[3]
for i in dict:
    print(i)
    
dict[3]
d = {'Red': 1, 'Green': 2, 'Blue': 3} 
d[1]
d['red']
d
for a in d:
    print(a)
    
d.items()
for a in d.items():
    print(a)
    
for a in d.items():
    print(type(a))
    
for a, b in d.items():
    print(a, b)
    
for a, b in d.items():
    print(a,'is', b)
    
js
js[1]
js[1]['forks']
del js[1]['forks']
js[1]
color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}
fruits = {}
fruits["apple"] = 1
fruits["mango"] = 2
fruits["banana"] = 4
fruits
'apple' in fruits
len(fruits)
js[1]
type(js)
for i in js:
    print(type(i))
    
newlist = sorted(js, key=lambda d: d['name']) 
newlist
for a in newlist:
    print(a['name'])
    
newlist
for a in newlist:
    print(a['name'])
    
for a in newlist:
    print(a['name'], a['date_created'])
    
import my
mm()
dir(my)
type(js)
len(js)
type(js[1])
j=(js[1])
j
for i in j:
    print(i)
    
enumerate(j)
list(enumerate(j))
cl(str(list(enumerate(j))))
my.cl(str(list(enumerate(j))))
for i in js:
    print(i['name'])
for i in js:
    print(i['name'], i['git_commits']))
for i in js:
    print(i['name'], i['git_commits'])
    
for i in js:
    print(i['name'], i['created_at']))
for i in js:
    print(i['name'], i['created_at'])
def iso(d):
    mydate= datetime.strptime(d, "%Y-%m-%dT%H:%M:%SZ")    
    return mydate.strftime('%m-%d-%y')
for i in js:
    print(i['name'], iso(i['created_at']))
import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
from datetime import datetime
for i in js:
    print(i['name'], iso(i['created_at']))
    
for i in js:
    print(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append(i['name'], iso(i['created_at']), iso(i['pushed_at']))
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[0]) 
newlist
newlist = sorted(s, key=lambda d: d[2])
newlist
yesterday = date.today() - timedelta(days=1)
import datetime as date
yesterday = date.today() - timedelta(days=1)
datatime.today()
datetime.today()
date=datetime
yesterday = date.today() - timedelta(days=1)
yesterday = date.today() - date.timedelta(days=1)
yesterday = date.today() - datetime.timedelta(days=1)
dir(datetime)
from datetime import timedelta
yesterday = date.today() - timedelta(days=1)
yesterday
yesterday.strftime('%A %b %d, %Y at %H:%M ')
yesterday = date.today() - timedelta(years=1)
yesterday = date.today() - timedelta(year=1)
yesterday = date.today() - timedelta(days=20)
yesterday.strftime('%A %b %d, %Y')
yesterday = date.today() - timedelta(days=1)
today = date.today()
tomorrow = date.today() + timedelta(days=1)
date_list =[today, tomorrow, yesterday]
date_list
sorted(date_list)
s
s[0][2]
datetime = datetime.strptime(s[0][2], '%Y-%m-%d ')
datetime = datetime.strptime(s[0][2], '%m-%d-%y ')
datetime.strptime('07/28/2014 18:54:55.099', '%m/%d/%Y %H:%M:%S.%f')
s[0][2]
datetime = datetime.strptime('03-02-22', '%m-%d-%y ')
datetime = datetime.strptime('3-2-22', '%m-%d-%y ')
from datetime import datetime
date_time_str = '13/03/21 06:33:13'

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y %H:%M:%S')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
date_time_str = '13/03/21 '

date_time_obj = datetime.strptime(date_time_str, '%d/%m/%y ')


print ("Lets see the type of date_time_obj",  type(date_time_obj))
print ("Date:", date_time_obj)
s[0][2]
type(s[0][2])
datetime.strptime(s[0][2], '%m/%d/%Y %H:%M:%S.%f')
type(s[0][2])
s[0][2]
datetime.strptime('13/03/21 ', '%m/%d/%Y')
datetime.strptime('13/03/21 ', '%m/%d/%y')
datetime.strptime('13/03/21', '%m/%d/%y')
datetime.strptime(r'13/03/21', '%m/%d/%y')
datetime.strptime('13/03/21', '%d/%m/%y')
datetime.strptime('13-03-21', '%d-%m-%y')
datetime.strptime(s[0][2], '%d-%m-%y')
s=[]
for i in js:
    s.append([i['name'], iso(i['created_at']), iso(i['pushed_at'])])
    
s[1]
def ds(x):
    return datetime.strptime(x, '%d-%m-%y') #good
    
s[1][1]
ds(s[1][1])
def ds(x):
    return datetime.strptime(x, '%m-%d-%y') #good
    
ds(s[1][1])
s=[]
for i in js:
    s.append([i['name'], ds(iso(i['created_at'])), iso(i['pushed_at'])])
s
newlist = sorted(s, key=lambda d: d[1]) 
newlist
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"])

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}"], f"{ds(iso(i['updated_at']))}")

print(tabulate.tabulate(ba))
ba=[]
for i in js:
    ba.append([f"{i['html_url']}",  f"{iso(i['updated_at'])}", f"{ds(iso(i['updated_at']))}"])
ba
nl = sorted(ba, key=lambda d: d[2]) 
nl
cp(nl)
dir(my)
my.cl(da)
my.cl(ba)
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
l=[1,4,5]

def tl(li):
    for x in li:
        a+=x 
    return a
tl(l)
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a+=x 
    return a
tl(l)
tl([9,9,9,])
total = 0
[total := total + x for x in [1, 2, 3, 4, 5]]
total
def tc(li):
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
def tc(li):
    print(type(li))
    total = 0
    [total := total + x for x in li]
    return total
tc([8,9])
a
a=3
a*=8
a
l=[1,4,5]

def tl(li):
    a=0
    for x in li:
        a*=x 
    return a
tl(l)
l
tl(l)
l=[1,4,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
l=[5,5,5]

def tl(li):
    a=1
    for x in li:
        a*=x 
    return a
tl(l)
max([1,4,5])
def m(y):
    return max(y)
m(l)
import random as random
n=random()
import random as random
n=random.random()
n
for in range(10)"
for i in range(10):
    print(i)
    
for i in range(10):
    print(random.random)
    
for i in range(10):
    print(random.random())
    
import random
randomlist = []
for i in range(0,5):
n = random.randint(1,30)
randomlist.append(n)
print(randomlist)
import random
randomlist = []
for i in range(0,5):
    n = random.randint(1,30)
    randomlist.append(n)
print(randomlist)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return y
mi(rnl)
rnl
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,30)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
rnl = []
for i in range(0,5):
    n = random.randint(1,3000)
    rnl.append(n)
print(rnl)
def mi(l):
    mn=l[0]
    for y in l:
        if y<mn:
            mn=y
    return mn
mi(rnl)
n = random.randint(1,3000)
n
n
n
[x for x in range(20)]
[random.randint(1,3000) for x in range(20)]
hasattr(str, '__iter__')
hasattr(float, '__iter__')
hasattr(list, '__iter__')
hasattr('jim', '__iter__')
gen_exp = (x ** 2 for x in range(10) if x % 2 == 0)
gen_exp
gen_exp[1]
gen=(random.randint(1,3000) for x in range(20))
gen
for a in gen:
    print(a)
    
for a in gen:
    print(a)
    
for l in "jim":
    print(l)
    
[jim steffes]
['jim']
a=['jim']
a
print(a)
[a for a in "bill")
[a for a in "bill"]
[a for a in "bill" if a='i']
[a for a in "bill" if a=='i']
[a for a in "bill" if a>'i']
[for b in range(50)]
[b for b in range(50)]
[b for b in range(50) if b%2!=0]
[b for b in range(50) if b%3!=0]
[b for b in range(50) if b%3=0]
[b for b in range(50) if b%3==0]
matrix = [[1, 2], [3,4], [5,6], [7,8]]
[a for a in matrix]
len(matrix)
[[row[1] for row in matrix]]
[[row[2] for row in matrix]]
[[row[0] for row in matrix]]
matrix
fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True, figsize=(12,4))
sns.countplot(dice_1, ax=ax1)
sns.countplot(dice_2, ax=ax2)
import os
pipe=os.popen("dir *.md")
print (pipe.read())
import os
pipe=os.popen("dir *.*")
print (pipe.read())
os.chdir(r"c:\twit")
pipe=os.popen("exiftool -j twit0877.mp3")
print (pipe.read())
pipe=os.popen("exiftool -j twit0877.mp3")
pr=(pipe.read())
print (pipe.read())
pr
print(pr)
type(pr)
pr.split(",")
pr.replace('\n','')
pr.replace('\n','').split(',')
pr.replace('\n','').split(',')[2]
mm()
import my
mm()
prl=pr.replace('\n','').split(',')
prl
type(prl)
type(prl)[1]
prl[1]
prl[2]
import glob
for a in glob.glob('.'):
    print(a)
    
for a in glob.glob('*.*'):
    print(a)
    
[x for x in glob.glob('*.*') x]
[x for x in glob.glob('*.*')]
[x for x in glob.glob('*.*') if x.startswith('B')]
[x for x in glob.glob('*.*') if x[2]]
[x[2] for x in glob.glob('*.*') ]
'jim'.split('i')
[x.split(' ') for x in glob.glob('*.*') ]
[x.split(' '[3]) for x in glob.glob('*.*') ]
[x.split(' ')[3] for x in glob.glob('*.*') ]
[x.split(' ')[0] for x in glob.glob('*.*') ]
[x.split(' ')[2] for x in glob.glob('*.*') ]
f=glob.glob('*.*')
f
[len(a) for a in f]
[a.split(' ') for a in f]
[len(a.split(' ')) for a in f]
def p(n):
    n.split(' ')
    
[len(p(a)) for a in f]
p('th is')
def p(n):
    return n.split(' ')
    
p('th is')
[len(p(a)) for a in f]
[a[3] for a in f if p(a)>3] 
[a[3] for a in f if p(a)=3]
[a[3] for a in f if p(a)==3]
f[1]
p(f[1])
[a[3] for a in f if len(p(a))>=3]
[p(a)[3] for a in f if len(p(a))>=3]
import os
from sys import exit
from os import system, name


from mido import MidiFile
system('cls')

mid = MidiFile('let.mid', clip=True)
# mid2 = MidiFile('legend.mid', clip=True)
mm()
mid
type(mid)
for x in mid:
    print(x)
    
for x in mid[0:5]:
    print(x)
    
l=list(mid)
l[0:5}
l[0:5]
l[0:25]
len(l)
mid
mid.tracks
del mid.tracks[2]
mid.trackss
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
mid.tracks
del mid.tracks[0]
del mid.tracks[2]
mid.tracks
for x in list(mid.tracks):
    print(x)
    
enumerate(list(mid.tracks))
list(enumerate(mid.tracks))
del mid.tracks[3:5]
list(enumerate(mid.tracks))
del mid.tracks[1:11]
list(enumerate(mid.tracks))
mid.save('letmy.mid')
list(enumerate(mid.tracks))
#!/usr/bin/env python
"""
Create a new MIDI file with some random notes.

The file is saved to test.mid.
"""
from __future__ import division
import random
import sys
from mido import Message, MidiFile, MidiTrack, MAX_PITCHWHEEL

notes = [64, 64+7, 64+12]

outfile = MidiFile()

track = MidiTrack()
outfile.tracks.append(track)

track.append(Message('program_change', program=12))

delta = 300
ticks_per_expr = int(sys.argv[1]) if len(sys.argv) > 1 else 20
for i in range(4):
    note = random.choice(notes)
    track.append(Message('note_on', note=note, velocity=100, time=delta))
    for j in range(delta // ticks_per_expr):
        pitch = MAX_PITCHWHEEL * j * ticks_per_expr // delta
        track.append(Message('pitchwheel', pitch=pitch, time=ticks_per_expr))
    track.append(Message('note_off', note=note, velocity=100, time=0))

outfile.save('test.mid')
import subprocess
print(subprocess.run("echo Hello World", shell=True))  
import subprocess
print(subprocess.run("ex", shell=True))
import re
a="Full React Tutorial #26 - Reusing Custom Hooks.mp4"
print(re.sub('.*#', '', a))
import glob
test_list= glob.glob('*.*')
print(f'glob is {test_list}')
import glob
test_list= glob.glob('#')
print(f'glob is {test_list}')
import glob
import re
reg='#'
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file)
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', ''))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(file, re.sub('.*#', '', file))
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}, {re.sub('.*#', '', file)}")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"\'{file}\', \'{re.sub('.*#', '', file)}\'")
        
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\', \'{re.sub('.*#', '', file)}\'")
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        print(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc=[]
for file in  glob.glob('*.*'):
    if re.search(reg, file):
        sc.append(f"mv \'{file}\' \'{re.sub('.*#', '', file)}\'")
sc
str(sc)
for a in sc:
    print(a)
    
with open('filename.txt', 'w') as f:
    for k in sc:
        print(k, file=f)
time="12"
min="30"
t=f"{time}+{min}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
time="12"
min="30"
t=f"{time}+{min*60}"
print(t)
2*60
time=int("12")
min=int("30")
t=f"{time*60}+{min}"
print(t)
time=int("12")
min=int("30")
t=f"{(time*60)+ min}"
print(t)
start=int(input("start: "))
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
print(spl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0]*60))+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
decspl=(int(spl[0])*60)+(int(spl[1]))
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    despl=int(start)
    print("no :")
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    despl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in spl:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    decspl=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    decspl=int(start)
print(decspl)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=end-start
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=start-end
print(end)
start=input("start: ")
# end=int(input("start: "))
spl=start.split(":")
if ":" in start:
    print("yes")
    start=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    start=int(start)
print(start)

end=input("end: ")
# end=int(input("end: "))
spl=end.split(":")
if ":" in end:
    print("yes")
    end=(int(spl[0])*60)+(int(spl[1]))
else:
    print("no :")
    end=int(end)
end=(start-end)*-1
print(end)
import glob
filelist=glob.glob('*.*')
filelist
type(filelist)
import re                                  # Add the re import declaration to use regex
reg = re.compile(r'py$')                    # Compile the regex
test = list(filter(reg.search, filelist))      # Create iterator using filter, cast to list 
test
test
type(test)
test[0]
test = list(filter(reg.search, filelist))[0]
test
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
type(content)
content
filename = list(filter(reg.search, filelist))[0]

with open(filename) as f:
    content = f.readlines()
content
filename
type(content)
for line in content:
    print(line),
with open('j.py') as f:
    content = f.readlines()
content
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    content = f.readlines()
content
content[1:4]
temp = open(filename,'r').read().splitlines()
temp
import glob
filelist=glob.glob('*.*')
filename = list(filter(reg.search, filelist))[0]

with open('j.py') as f:
    # content = f.readlines()
    content = open(filename,'r').read().splitlines()
    
content
str(content)
content
non_empty_lines = [line for line in content if line.strip() != ""]
ne = [line for line in content if line.strip() != ""]
ne
str(ne)
for s in ne:
    print(s)
    
filelist=glob.glob('*.*')
filelist
def stx(n):
    return f'{n} is nothing'
    
stx("p")
def addition(n):
    return n + n
  
# We double all numbers using map()
numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
result = map(stx, numbers)
result
result
list(result)
def stx(n):
    return f'{n} \'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/{n}\'is\' nothing'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f'{n} <img src=/"/img/{n}/" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style=/"width:100%/"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
    
result = list(map(stx, filelist))
print(result)
for t in result:
    print(t)
    
result=['jim']
result.append['tom')
result.append['tom']
result=['jim']
type(result)
result.append['tom']
result.append('tom')
result
result += "mike"
result
result += ["mike"]
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
print(result)
result
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
result
join(result)
''.joint(result)
''.join(result)
'\n'.join(result)
s='\n'.join(result)
with open('out.py') as f:
    f.write(s)
    
with open('out.py',mode="wt") as f:
    f.write(s)
    
def stx(n):
    return f' <img src="/img/{n}" style="width:100%"'
result=[]
result.append('<div class="column">')    
result += list(map(stx, filelist))
result+=['</div>']
print(result)
with open('out.py',mode="wt") as f:    f.write(s)
import inspect
a=1
inspect(a)
a
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
    
f(2)
a=f(1)
a
a(5)
f
f()
inspect(f)
i
for a in i:
    print(a)
    
a
a(8)
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.
a=f(1)
a
a(8)
x = "hello"

#if condition returns False, AssertionError is raised:
assert x == "goodbye", "x should be 'hello'"
x
assert x=="hello"
assert x=="hellos"
import glob
files = glob.glob("*.*")
for f in files:
    print(f)
files
import re
re.match("j","jim)
for f in files:
    print(re.split(r"\#",f))
    
for f in files:    print(re.split(r"\#",f))
for f in files:    print(re.split(r"\#",f)[1])
xx = "guru99,education is fun"
r1 = re.findall(r"^\w+",xx)
print(r1)
r1
if (r1):
    print(r1)
    
if (r2):
    print(r1)
    
r1 = re.search(r"^\j","jimxx")
re=r""
r1 = re.search("jimxx")
import glob
import re
files = glob.glob("*.*")
z
print(i for i in files)
files
print(list(i for i in files))
print(list(i for i in files if re.search(r"s",i)))
import os
os.chdir(r'C:\you\memgame')
files = glob.glob("*.*")
print(list(i for i in files if re.search(r"#",i)))
for f in (list(i for i in files if re.search(r"#",i))):
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f)
    print(re.split(r"\#",f)[1])
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}"}
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'\#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}    {re.split(r'#',f)[1]}")
    print(re.split(r"\#",f)[1])
    os.rename(f,re.split(r"\#",f)[1]) 
ip = input("Ip Address: ") or "127.0.0.1"
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Ip Address: ") or "127.0.0.1"
print(idir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(dir)
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
C:\you\memgame
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1])
    
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
idir = input("Directory: ") or "."
print(idir)
os.chdir(idir)
files = glob.glob("*.*")

for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r'#',f)[1]}")
    # os.rename(f,re.split(r"\#",f)[1]) 
for f in (list(i for i in files if re.search(r"#",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"s",i))):
    print(f"rename {f}   \t will name {re.split(r's',f)[1]}")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\d',f)[1]}")
for f in (list(i for i in files if re.search(r"\\d",i))):
    print(f"rename {f}   \t will name {re.split(r'\\d',f)[1]}")
print(f"really show this {{")
print(f"\\")
for f in (list(i for i in files if re.search(r"\d",i))):
    print(f"rename {f}   \t will name {re.split(r'd',f)[1]}")
    
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
plt.plot(x,y)
plt.show()
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt 
    
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
    
# plotting the points  
plt.plot(x, y) 
    
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
    
# giving a title to my graph 
plt.title('My first graph!') 
    
# function to show the plot 
plt.show() 
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
plt.plot(x,y)
plt.show()
x = np.arange(0,4*np.pi,0.1)   # start,stop,step
y = np.sin(x)
z = np.cos(x)
plt.plot(x,y,x,z)
plt.show()
import glob

files=glob.glob('*.*')
print(files)
import glob

files=glob.glob('*.*')
print(files)


import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
import glob

# search all files inside a specific folder
# *.* means file name with any extension
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'c:\you\*.*'
res = glob.glob(dir_path)
print(res)
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'C:\projects\node\python'
for path in os.scandir(dir_path):
    print(path.name)
dir_path = r'.'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'.*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*'
res = glob.glob(dir_path)
print(res)
dir_path = r'*p'
res = glob.glob(dir_path)
print(res)
dir_path = r'*.py'
res = glob.glob(dir_path)
print(res)
lt
dir_path = r'c:\you\*'
res = glob.glob(dir_path)
print(res)
type(res)
import json
f=open('a.json')
data=json.load(f)
data
data['fulltile']
data[1]
type(data)
data.keys
data.keys()
data['id']
x=data.keys()
x
x[3]
x=list(data.keys())
x
[n + 'this' for n in x]
[n + 'this' for n in x]
['<div class=\"n\"' for n in x]
['<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n}' for n in x]
[f'<div class=\"n\" {n} </div>' for n in x]
y=[f'<div class=\"n\" {n} </div>' for n in x]
y
join(y)
import re
s="Specify where the variable comes from"
re.split(r'\s',s)
' '.join(x)
x
' '.join(y)
'\n '.join(y)
x
x
y
data['fulltitle']
lt
path_to_file/person.json
import json


with open('a.json', 'r') as f:
  data = json.load(f)
print(data)
data.keys()
print(json.dumps(data, indent = 4, sort_keys=True))
print(json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True))
s=json.dumps(data, indent = 4, sort_keys=True)
s
import clip
import clipboard
s
clipboard.copy(str(s))
s[1]
s['fulltitle']
type(s)
type(data)
data['fulltitle']
import json
import clipboard
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
fulltitle
description
m=fulltitle+'.mp3'
m
import touch
'This is first line'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    pass
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
with open(r'profit.txt', 'w') as fp:
    fp.write(fulltitle)
    fp.write(description)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write(text)
    pass
# dir='/mnt/c/you/webdev'
import json
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
# dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
dir='/mnt/c/you/webdev'
full=dir+'/'+fulltitle+'.mp3'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp3'
print(full)
full=dir+'/'+fulltitle+'.mp4'
Path(y).touch
Path('y').touch
a=pwd
foo = "a\c\d" # example string with backslashes
foo
foo = r"a\c\d" # example string with backslashes
foo
foo.replace('\\', " ")
o
print(0)
print(o)
print(o)
p=o+'\a'
p
p=o+'a'
p
p=o+'x'
Path(x).touch()
o
Path(o).touch()
o
Path(o).touch()
Path('x').touch()
o
p
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
full
path(full).touch()
Path(full).touch()
os.chdir('\mnt')
os.chdir('\\mnt')
os.chdir('/mnt')
os.chdir('//mnt')
import os
os.chdir('mnt')
os.chdir('..')
os.chdir('c:\you')
os.chdir('c:\you\nn')
os.chdir('c:\you\\nn')
path('Firebase - Back to the Basics.mp4').touch()
Path('Firebase - Back to the Basics.mp4').touch()
import path
from pathlib import Path
Path('Firebase - Back to the Basics.mp4').touch()
lt
from pathlib import Path
import json
# import touch
import clipboard
import os
with open('a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir='/mnt/c/you/nn'
full=dir+'/'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\'+fulltitle+'.mp4'
print(full)
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
print(full)
dir=r'c:\all\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
full
Path(full).touch()
Path('c:\\all'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path(r'CSS Animation Tutorial #1 - Introduction.mp4'.touch())
Path('CSS Animation Tutorial #1 - Introduction.mp4').touch()
full
Path('c:\\all\\filex').touch()
full
clipboard.copy(str(full))
from pathlib import Path
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\a.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'c:\you\nn'
full=dir+'\\'+fulltitle+'.mp4'
print(full)
Path(full).touch()
lt
import subprocess

list_files = subprocess.run(["ls", "-l"])
print("The exit code was: %d" % list_files.returncode)
mcmd="yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 &
"
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 $USERVAR -o '%(title)s.mp3'  >output.log 2>&1 & '''
mcmd
import os
m='''ls -a'''
mo=os.system(m)
mo
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/watch?v=SLfhMt5OUPI -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
mo
mo
import subprocess
from pathlib import Path
import json
# import touch
import clipboard
import os
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print('finish')
print('start')
mcmd='''yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 & '''
mo=os.system(mcmd)
print(mcmd)
print('finish')
yt-dlp -f 'ba' --embed-metadata -x --audio-format mp3 https://www.youtube.com/shorts/hh5EwXkf4Z8 -o '%(title)s.mp3'  >output.log 2>&1 &
import subprocess
exit_code = subprocess.call('./practice.sh')
print(exit_code)
lt
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
exit_code = subprocess.call('bash practice.sh')
args = ["ping", "www.google.com"]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
args=[
    "yt-dlp",
    "https://www.youtube.com/shorts/hh5EwXkf4Z8"
]
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
data = process.communicate()
print(data)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process = subprocess.Popen(args, stdout=subprocess.PIPE)
process
args=[ "yt-dlp", "https://www.youtube.com/shorts/hh5EwXkf4Z8" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
args=[ "yt-dlp" ]
process = subprocess.Popen(args, stdout=subprocess.PIPE)
import sys
result = subprocess.run([sys.executable, "-c", "print('ocean')"])
print(subprocess.run("yt-dlp", shell=True))  
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
import json

import yt_dlp
from yt_dlp.postprocessor.common import PostProcessor


class MyLogger:
    def debug(self, msg):
        # For compatability with youtube-dl, both debug and info are passed into debug
        # You can distinguish them by the prefix '[debug] '
        if msg.startswith('[debug] '):
            pass
        else:
            self.info(msg)

    def info(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


class MyCustomPP(PostProcessor):
    def run(self, info):
        self.to_screen('Doing stuff')
        return [], info


def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')


ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.add_post_processor(MyCustomPP())
    info = ydl.extract_info('https://www.youtube.com/watch?v=BaW_jenozKc')
    pri
import yt_dlp
import subprocess
subprocess.call('dir', shell=True)
import subprocess
subprocess.call('yt-dlp', shell=True)
print(subprocess.run("/usr/local/bin/yt-dlp", shell=True))  
print(subprocess.run("ls", shell=True))
print(subprocess.run("ls .", shell=True))
print(subprocess.run("whereis yv.sh", shell=True))
print(subprocess.run("whereis", shell=True))
print(subprocess.run("pwd", shell=True))
subprocess.run("pwd", shell=True)
s=subprocess.run("pwd", shell=True)
s
s=subprocess.run("whereis", shell=True)
s=subprocess.run("whoami", shell=True)
s=subprocess.run("ps", shell=True)
subprocess.run(['wsl'], shell = True)
exit_code = subprocess.call('./practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code = subprocess.call('practice.sh')
exit_code
p = subprocess.Popen("date", stdout=subprocess.PIPE, shell=True)
import sys
sys.platform
import sys
import clipboard
impor
import clipboard
import os
os.chdir('c:\you\\nn')
vid
response
print(response.json())
print(response)
info=response.json()
type(info)
info
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
fulltitle
fulltitle+'\.mp3'
fulltitle+'.mp3'
full=dir+'\\'+fulltitle+'.mp3'
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
lt
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
dir=r'.'
full=dir+'\\'+fulltitle+'.mp3'
print(full)
Path(full).touch()
s
print(s)
import requests
x=pwd
import os
o
import clipboard
clipboard.copy(str(o))
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from exif import Image
with open("dock.mp4", "rb") as d:
    dm=Image(d)
    palm_1_image = Image(dm)
    
from pathlib import Path
import requests
import json
# import touch
import clipboard
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
all
fulltitle=data['fulltitle']
fulltitle=data['fulltitle']
fulltitle
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    write(fulltitle)
    write('\n')
    
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(fulltitle)
    fp.write('\n')
    
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
clipboard.copy(str(s))
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
print(text)
fulltitle
lt
fulltitle
fulltitle+'.mp4'
t=fulltitle+'.mp4'
Path(t).touch()
lt
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
from pathlib import Path
import json
# import touch
import os
with open(r'c:\all\bash\b.json', 'r') as f:  data = json.load(f)
s=json.dumps(data, indent = 4, sort_keys=True)
fulltitle=data['fulltitle']
description=data['description']
text = str(description.encode('utf-8'))
t=fulltitle+'.mp4'
print(text)
all=fulltitle + '\n' +text
with open(r'profit.txt', 'w',encoding="utf-8") as fp:
    fp.write(all)
    pass
print(t)
Path(t).touch()
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"

for path, directories, files in os.walk(root_vid_directory):
import os
import subprocess
# root_vid_directory = r"C:\you\dock"
root_vid_directory = r"C:\you\dock"
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
files
for path, directories, files in os.walk(root_vid_directory):
    for video_file in files:
        if video_file.endswith("MP4"):
            full_mp4_path = os.path.join(path, video_file)
            full_gpx_output_path = full_mp4_path.replace(".MP4", ".GPX")
            print(f"Processing: {full_mp4_path}")
            with open(full_gpx_output_path, "w") as gpx_file:
                exiftool_command = ["exiftool", "-ee", "-m", "-p", "/Users/fpolig01/Videos/dashcam_footage/gpx.fmt", full_mp4_path]
                subprocess.run(exiftool_command, stdout=gpx_file)
            print(f"Succesfully created: {full_gpx_output_path}\n")
import sys
print(sys.path)
import sys
print(sys.path)
import piexif
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import sys
from pprint import pprint # for printing Python dictionaries in a human-readable way
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg
import ffmpeg-python
import ffmpeg
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
import sys
print(sys.executable)
print(sys.version)
print(sys.version_info)
te="Goethe took up residence in Weimar in November 1775 following".split('\s')
te
te.split(' ')
"jim is".split(' ')
"jim is".split('\s')
"jim is".split(\s)
"jim is".split(" ")
"jim is".split(r"\s")
"jim is".split(r'\s')
"jim is".split(r'i')
"jim is".split('i')
import re
re.split(r'\s',s)
s="Specify where the variable comes from"
re.split(r'\s',s)
re.split('\s',s)
s
s
s.replace(' ', '\n')
k=s.replace(' ', '\n')
print(k)
type(k)
import string
import random
import os

passphrases = []
for _ in range(100):
    st = "".join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for i in range(random.randint(8,16)))
    passphrases.append(st)
    print(st)
    
st
passphrases
passphrases[1:10]
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write(f"{p}\n")
with open("pass", "w") as pass:
    for p in passphrases:
        pass.write("xx")
with open("Passphrases2.txt","w") as pass_file:
    for p in passphrases:
        pass_file.write("%s\n" %p)
        
print(p)
with open("me","w") as xx:
    xx.write(s)
    
s
with open("kk","w") as kk:
    kk.write(kk)
    
with open("kk","w") as kk:
    kk.write(k)
    
import sqlite3
conn = sqlite3.connect("/home/steff007/.ipython/profile_default/history.sqlite")
c = conn.cursor()
ip = c.execute("SELECT source from history")
ipl=list(ip)
import sys
dir(sys)
sys.platform
sys.about
sys.version
sys.about
k=dir(sys)
k
for f in k:
    print(f)
    
print(str(k))
import sys
k=dir(sys)
with open("kk","w") as kk:
    write(str(k))
    
with open("kk","w") as kk:
    kk.write(str(k))
    
sys.executable
import mysql.connector
import mysql.connector
import sys
print(sys.version_info)
dir(sys)
a=dir(sys)
print(a)
a
a
a['version_info']
type(a)
(x for x in a)
[x for x in a]
[x for x in a and x.startswith('s')]
[x for x in a if x.startswith('s')]
[x for x in a if x.startswith('v')]
a['version_info']
a.version
dir(a)
a
a
a['version_info']
a[3]
a[2]
b=[n for n in a if not n.startswith('a')]
b
b=[n for n in a if not n.startswith('w')]
b
import clipboard
exit()3651 Lancaster Ln N, Minneapolis, MN 55441
import sys
print(sys.path)
import matplotlib.pyplot as plt
import numpy as np

# X axis parameter:
xaxis = np.array([2, 8])

# Y axis parameter:
yaxis = np.array([4, 9])

plt.plot(xaxis, yaxis)
plt.show()
import os
os.path.dirname()
os.path.dirname('.')
import os
os = sys.platform()
import sys
os = sys.platform()
sys.platform
os = str(sys.platform())
myos=sys.platform
import sys
sys.platform
sys.platform()
import nest_asyncio; nest_asyncio.apply()  # This is needed to use sync API in repl
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
chrome = pw.chromium.launch(headless=False)
page = chrome.new_page()
page.goto("https://twitch.tv")
pw = sync_playwright.start()
h
w
c
from playwright.sync_api import sync_playwright
pw = sync_playwright.start()
dir(pw)
dir(sync_playwright)
pw = sync_playwright.start()
from playwright.sync_api import Playwright, sync_playwright, expect
playwright = sync_playwright().start()
pw = sync_playwright.start()
pw = sync_playwright().start()
from pill import Image
from pil import Image
from PIL import Image
import cv2
list='letS1.png lets2.png pentatonic.png'.split()
list
from PIL import Image
[[a,b] for a,b in enumerate(list)]
elist=[[a,b] for a,b in enumerate(list)]
elis
elist
img=Image.open(list[0])
img2=Image.open(list[1])
img.paste(img2, (400,400))
img.show
img.show()
img.show()
zdir(img)
dir(img)
img.save('new.png')
img2.show()
img
img=Image.open('letS1.png)
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (2450,450))
img.show()
from PIL import Image
img=Image.open('letS1.png')
img2=Image.open('letS2.png')
img.paste(img2, (400,400))
img.show()
img2.show()
img=Image.open('s.jpg')
img2=Image.open('t.jpg')
img.show()
img.paste(img2, (400,400))
img.show()
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (200,200))
img.show()
img=Image.open('letS2.png')
img2=Image.open('letS1.png')
img.paste(img2, (20,20))
img.show()
img.size
img2.size
img.show()
background = Image.new('RGBA',(1300, 1300), (255, 255, 255, 255))
background.show()
background.paste(img(30,30))
background.paste(img,(30,30))
background.show()
background.paste(img2,(60,60))
background.show()
background.paste(img2,(260,260))
background.show()
img.mode
img.size
img2.size
e
new_image = image.resize((600, 600))
new_image = img2.resize((600, 600))
new_image.show()
new_image.paste(img(300,300))
new_image.paste(img,(300,300))
new_image.show()
new_image.paste(img2,(0,0))
new_image.show()
w
dir()
w
c
import os
[a.name for a in os.scandir('.')]
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
import re
fil=[a.name for a in os.scandir('.') if re.search(r'\.png',a.name)]
fil
img3=Image.open(fil[4])
img3=Image.open(fil[3])
img3.show()
ni = img3.resize((600, 600))
ni.show()
img3.size
ni = img3.resize((350, 600))
ni.show()
ni = img3.resize((350, 200))
ni.show()
fil=[a.name for a in os.scandir('.') if re.search(r'\.jpg',a.name)]
fil
i=Image.open(fil[0])
i.show()
i.size
box = (200, 300, 700, 600)
nii=i.crop(box)
nii.show()
box = (200, 3000, 700, 600)
nii=i.crop(box)
box = (200, 3000, 700, 3600)
nii=i.crop(box)
nii.show()
box = (2000, 500, 4000, 3000)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 300)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 500)
nii=i.crop(box)
nii.show()
box = (2000, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 200, 4000, 2000)
nii=i.crop(box)
nii.show()
box = (100, 1000, 4000, 2000)
nii=i.crop(box)
nii.show()
from music21 import *
s = corpus.parse('bach/bwv65.2.xml')
s
s.analyze('key')
s.show()
us = environment.UserSettings()
us
us['musicxmlSettings'] = 'C:/Program Files (x86)/MuseScore 2/bin/MuseScore.exe'
s.show()
configure.run()
s.show()
littleMelody = converter.parse("tinynotation: 3/4 c4 d8 f g16 a g f#")
littleMelody.show()
littleMelody = converter.parse("tinynotation: 4/4 c4 d8 f g16 a g f#")
littleMelody.show()
dicant = corpus.parse('trecento/Fava_Dicant_nunc_iudei')
h
dicant.show()
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# obtain dataset
df = pd.read_csv('https://raw.githubusercontent.com/bot13956/Bayes_theorem/master/heights.csv')

# display head of dataset
pd.head()
df
pd
pd.crosstab
pd.crosstab()
from PIL import Image, ImageDraw

img = Image.open("cat.jpg").convert("RGBA")
x,y = img.size
img2 = Image.open("smith.jpg").convert("RGBA").resize((x,y))

img.putalpha(225)
img2.putalpha(45)

img3 = Image.alpha_composite(img, img2)
img3.show()
import matplotlib.pyplot as plt
import numpy as np

# Use numpy to generate a bunch of random data in a bell curve around 5.
n = 5 + np.random.randn(1000)

m = [m for m in range(len(n))]
plt.bar(m, n)
plt.title("Raw Data")
plt.show()

plt.hist(n, bins=20)
plt.title("Histogram")
plt.show()

plt.hist(n, cumulative=True, bins=20)
plt.title("Cumulative Histogram")
plt.show()
inp='google.com'
def counts(inp):
    dd={key:0 for key in inp}
    for l in inp:
        if l in list(dd.keys()):
            dd[l]=dd[l]+1
    return dd
print('h')
print(dd)
print('wednesday 1/24')
